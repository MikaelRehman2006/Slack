"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@apollo";
exports.ids = ["vendor-chunks/@apollo"];
exports.modules = {

/***/ "(ssr)/./node_modules/@apollo/client/cache/core/cache.js":
/*!*********************************************************!*\
  !*** ./node_modules/@apollo/client/cache/core/cache.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApolloCache: () => (/* binding */ ApolloCache)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var optimism__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! optimism */ \"(ssr)/./node_modules/optimism/lib/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/fragments.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/sizes.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/zen-observable-ts/module.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/mergeDeep.js\");\n/* harmony import */ var _wry_caches__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @wry/caches */ \"(ssr)/./node_modules/@wry/caches/lib/weak.js\");\n/* harmony import */ var _utilities_caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../utilities/caching/getMemoryInternals.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/getMemoryInternals.js\");\n/* harmony import */ var _core_equalByQuery_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../core/equalByQuery.js */ \"(ssr)/./node_modules/@apollo/client/core/equalByQuery.js\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _masking_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../masking/index.js */ \"(ssr)/./node_modules/@apollo/client/masking/maskFragment.js\");\n/* harmony import */ var _utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utilities/deprecation/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/deprecation/index.js\");\n\n\n\n\n\n\n\n\n\nvar ApolloCache = /** @class */ function() {\n    function ApolloCache() {\n        this.assumeImmutableResults = false;\n        // Make sure we compute the same (===) fragment query document every\n        // time we receive the same fragment in readFragment.\n        this.getFragmentDoc = (0,optimism__WEBPACK_IMPORTED_MODULE_0__.wrap)(_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.getFragmentQueryDocument, {\n            max: _utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.cacheSizes[\"cache.fragmentQueryDocuments\"] || 1000 /* defaultCacheSizes[\"cache.fragmentQueryDocuments\"] */ ,\n            cache: _wry_caches__WEBPACK_IMPORTED_MODULE_4__.WeakCache\n        });\n    }\n    // Function used to lookup a fragment when a fragment definition is not part\n    // of the GraphQL document. This is useful for caches, such as InMemoryCache,\n    // that register fragments ahead of time so they can be referenced by name.\n    ApolloCache.prototype.lookupFragment = function(fragmentName) {\n        return null;\n    };\n    // Transactional API\n    // The batch method is intended to replace/subsume both performTransaction\n    // and recordOptimisticTransaction, but performTransaction came first, so we\n    // provide a default batch implementation that's just another way of calling\n    // performTransaction. Subclasses of ApolloCache (such as InMemoryCache) can\n    // override the batch method to do more interesting things with its options.\n    ApolloCache.prototype.batch = function(options) {\n        var _this = this;\n        var optimisticId = typeof options.optimistic === \"string\" ? options.optimistic : options.optimistic === false ? null : void 0;\n        var updateResult;\n        this.performTransaction(function() {\n            return updateResult = options.update(_this);\n        }, optimisticId);\n        return updateResult;\n    };\n    ApolloCache.prototype.recordOptimisticTransaction = function(transaction, optimisticId) {\n        this.performTransaction(transaction, optimisticId);\n    };\n    // Optional API\n    // Called once per input document, allowing the cache to make static changes\n    // to the query, such as adding __typename fields.\n    ApolloCache.prototype.transformDocument = function(document) {\n        return document;\n    };\n    // Called before each ApolloLink request, allowing the cache to make dynamic\n    // changes to the query, such as filling in missing fragment definitions.\n    ApolloCache.prototype.transformForLink = function(document) {\n        return document;\n    };\n    ApolloCache.prototype.identify = function(object) {\n        return;\n    };\n    ApolloCache.prototype.gc = function() {\n        return [];\n    };\n    ApolloCache.prototype.modify = function(options) {\n        return false;\n    };\n    // DataProxy API\n    ApolloCache.prototype.readQuery = function(options, optimistic) {\n        var _this = this;\n        if (optimistic === void 0) {\n            optimistic = !!options.optimistic;\n        }\n        if (globalThis.__DEV__ !== false) {\n            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_5__.warnRemovedOption)(options, \"canonizeResults\", \"cache.readQuery\");\n        }\n        return (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_5__.muteDeprecations)(\"canonizeResults\", function() {\n            return _this.read((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, options), {\n                rootId: options.id || \"ROOT_QUERY\",\n                optimistic: optimistic\n            }));\n        });\n    };\n    /** {@inheritDoc @apollo/client!ApolloClient#watchFragment:member(1)} */ ApolloCache.prototype.watchFragment = function(options) {\n        var _this = this;\n        var fragment = options.fragment, fragmentName = options.fragmentName, from = options.from, _a = options.optimistic, optimistic = _a === void 0 ? true : _a, otherOptions = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__rest)(options, [\n            \"fragment\",\n            \"fragmentName\",\n            \"from\",\n            \"optimistic\"\n        ]);\n        var query = this.getFragmentDoc(fragment, fragmentName);\n        // While our TypeScript types do not allow for `undefined` as a valid\n        // `from`, its possible `useFragment` gives us an `undefined` since it\n        // calls` cache.identify` and provides that value to `from`. We are\n        // adding this fix here however to ensure those using plain JavaScript\n        // and using `cache.identify` themselves will avoid seeing the obscure\n        // warning.\n        var id = typeof from === \"undefined\" || typeof from === \"string\" ? from : this.identify(from);\n        var dataMasking = !!options[Symbol.for(\"apollo.dataMasking\")];\n        if (globalThis.__DEV__ !== false) {\n            var actualFragmentName = fragmentName || (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.getFragmentDefinition)(fragment).name.value;\n            if (!id) {\n                globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_1__.invariant.warn(1, actualFragmentName);\n            }\n        }\n        var diffOptions = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, otherOptions), {\n            returnPartialData: true,\n            id: id,\n            query: query,\n            optimistic: optimistic\n        });\n        var latestDiff;\n        return new _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.Observable(function(observer) {\n            return _this.watch((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, diffOptions), {\n                immediate: true,\n                callback: function(diff) {\n                    var data = dataMasking ? (0,_masking_index_js__WEBPACK_IMPORTED_MODULE_9__.maskFragment)(diff.result, fragment, _this, fragmentName) : diff.result;\n                    if (// Always ensure we deliver the first result\n                    latestDiff && (0,_core_equalByQuery_js__WEBPACK_IMPORTED_MODULE_10__.equalByQuery)(query, {\n                        data: latestDiff.result\n                    }, {\n                        data: data\n                    }, // TODO: Fix the type on WatchFragmentOptions so that TVars\n                    // extends OperationVariables\n                    options.variables)) {\n                        return;\n                    }\n                    var result = {\n                        data: data,\n                        complete: !!diff.complete\n                    };\n                    if (diff.missing) {\n                        result.missing = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_11__.mergeDeepArray)(diff.missing.map(function(error) {\n                            return error.missing;\n                        }));\n                    }\n                    latestDiff = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, diff), {\n                        result: data\n                    });\n                    observer.next(result);\n                }\n            }));\n        });\n    };\n    ApolloCache.prototype.readFragment = function(options, optimistic) {\n        var _this = this;\n        if (optimistic === void 0) {\n            optimistic = !!options.optimistic;\n        }\n        if (globalThis.__DEV__ !== false) {\n            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_5__.warnRemovedOption)(options, \"canonizeResults\", \"cache.readFragment\");\n        }\n        return (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_5__.muteDeprecations)(\"canonizeResults\", function() {\n            return _this.read((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, options), {\n                query: _this.getFragmentDoc(options.fragment, options.fragmentName),\n                rootId: options.id,\n                optimistic: optimistic\n            }));\n        });\n    };\n    ApolloCache.prototype.writeQuery = function(_a) {\n        var id = _a.id, data = _a.data, options = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__rest)(_a, [\n            \"id\",\n            \"data\"\n        ]);\n        return this.write(Object.assign(options, {\n            dataId: id || \"ROOT_QUERY\",\n            result: data\n        }));\n    };\n    ApolloCache.prototype.writeFragment = function(_a) {\n        var id = _a.id, data = _a.data, fragment = _a.fragment, fragmentName = _a.fragmentName, options = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__rest)(_a, [\n            \"id\",\n            \"data\",\n            \"fragment\",\n            \"fragmentName\"\n        ]);\n        return this.write(Object.assign(options, {\n            query: this.getFragmentDoc(fragment, fragmentName),\n            dataId: id,\n            result: data\n        }));\n    };\n    ApolloCache.prototype.updateQuery = function(options, update) {\n        if (globalThis.__DEV__ !== false) {\n            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_5__.warnRemovedOption)(options, \"canonizeResults\", \"cache.updateQuery\");\n        }\n        return this.batch({\n            update: function(cache) {\n                var value = (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_5__.muteDeprecations)(\"canonizeResults\", function() {\n                    return cache.readQuery(options);\n                });\n                var data = update(value);\n                if (data === void 0 || data === null) return value;\n                cache.writeQuery((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, options), {\n                    data: data\n                }));\n                return data;\n            }\n        });\n    };\n    ApolloCache.prototype.updateFragment = function(options, update) {\n        if (globalThis.__DEV__ !== false) {\n            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_5__.warnRemovedOption)(options, \"canonizeResults\", \"cache.updateFragment\");\n        }\n        return this.batch({\n            update: function(cache) {\n                var value = (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_5__.muteDeprecations)(\"canonizeResults\", function() {\n                    return cache.readFragment(options);\n                });\n                var data = update(value);\n                if (data === void 0 || data === null) return value;\n                cache.writeFragment((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, options), {\n                    data: data\n                }));\n                return data;\n            }\n        });\n    };\n    return ApolloCache;\n}();\n\nif (globalThis.__DEV__ !== false) {\n    ApolloCache.prototype.getMemoryInternals = _utilities_caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_12__.getApolloCacheMemoryInternals;\n} //# sourceMappingURL=cache.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/cache/core/cache.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/cache/core/types/common.js":
/*!****************************************************************!*\
  !*** ./node_modules/@apollo/client/cache/core/types/common.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MissingFieldError: () => (/* binding */ MissingFieldError)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n\nvar MissingFieldError = /** @class */ function(_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(MissingFieldError, _super);\n    function MissingFieldError(message, path, query, variables) {\n        var _a;\n        // 'Error' breaks prototype chain here\n        var _this = _super.call(this, message) || this;\n        _this.message = message;\n        _this.path = path;\n        _this.query = query;\n        _this.variables = variables;\n        if (Array.isArray(_this.path)) {\n            _this.missing = _this.message;\n            for(var i = _this.path.length - 1; i >= 0; --i){\n                _this.missing = (_a = {}, _a[_this.path[i]] = _this.missing, _a);\n            }\n        } else {\n            _this.missing = _this.path;\n        }\n        // We're not using `Object.setPrototypeOf` here as it isn't fully supported\n        // on Android (see issue #3236).\n        _this.__proto__ = MissingFieldError.prototype;\n        return _this;\n    }\n    return MissingFieldError;\n}(Error);\n //# sourceMappingURL=common.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvY2FjaGUvY29yZS90eXBlcy9jb21tb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBa0M7QUFDbEMsSUFBSUMsb0JBQW9CLFdBQVcsR0FBSSxTQUFVQyxNQUFNO0lBQ25ERixnREFBU0EsQ0FBQ0MsbUJBQW1CQztJQUM3QixTQUFTRCxrQkFBa0JFLE9BQU8sRUFBRUMsSUFBSSxFQUFFQyxLQUFLLEVBQUVDLFNBQVM7UUFDdEQsSUFBSUM7UUFDSixzQ0FBc0M7UUFDdEMsSUFBSUMsUUFBUU4sT0FBT08sSUFBSSxDQUFDLElBQUksRUFBRU4sWUFBWSxJQUFJO1FBQzlDSyxNQUFNTCxPQUFPLEdBQUdBO1FBQ2hCSyxNQUFNSixJQUFJLEdBQUdBO1FBQ2JJLE1BQU1ILEtBQUssR0FBR0E7UUFDZEcsTUFBTUYsU0FBUyxHQUFHQTtRQUNsQixJQUFJSSxNQUFNQyxPQUFPLENBQUNILE1BQU1KLElBQUksR0FBRztZQUMzQkksTUFBTUksT0FBTyxHQUFHSixNQUFNTCxPQUFPO1lBQzdCLElBQUssSUFBSVUsSUFBSUwsTUFBTUosSUFBSSxDQUFDVSxNQUFNLEdBQUcsR0FBR0QsS0FBSyxHQUFHLEVBQUVBLEVBQUc7Z0JBQzdDTCxNQUFNSSxPQUFPLEdBQUlMLENBQUFBLEtBQUssQ0FBQyxHQUFHQSxFQUFFLENBQUNDLE1BQU1KLElBQUksQ0FBQ1MsRUFBRSxDQUFDLEdBQUdMLE1BQU1JLE9BQU8sRUFBRUwsRUFBQztZQUNsRTtRQUNKLE9BQ0s7WUFDREMsTUFBTUksT0FBTyxHQUFHSixNQUFNSixJQUFJO1FBQzlCO1FBQ0EsMkVBQTJFO1FBQzNFLGdDQUFnQztRQUNoQ0ksTUFBTU8sU0FBUyxHQUFHZCxrQkFBa0JlLFNBQVM7UUFDN0MsT0FBT1I7SUFDWDtJQUNBLE9BQU9QO0FBQ1gsRUFBRWdCO0FBQzJCLENBQzdCLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL3NsYWNrLWdyYXBocWwtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvY2FjaGUvY29yZS90eXBlcy9jb21tb24uanM/NmFhMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbnZhciBNaXNzaW5nRmllbGRFcnJvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTWlzc2luZ0ZpZWxkRXJyb3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTWlzc2luZ0ZpZWxkRXJyb3IobWVzc2FnZSwgcGF0aCwgcXVlcnksIHZhcmlhYmxlcykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIC8vICdFcnJvcicgYnJlYWtzIHByb3RvdHlwZSBjaGFpbiBoZXJlXG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIG1lc3NhZ2UpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgICAgICBfdGhpcy5wYXRoID0gcGF0aDtcbiAgICAgICAgX3RoaXMucXVlcnkgPSBxdWVyeTtcbiAgICAgICAgX3RoaXMudmFyaWFibGVzID0gdmFyaWFibGVzO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShfdGhpcy5wYXRoKSkge1xuICAgICAgICAgICAgX3RoaXMubWlzc2luZyA9IF90aGlzLm1lc3NhZ2U7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gX3RoaXMucGF0aC5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICAgICAgICAgIF90aGlzLm1pc3NpbmcgPSAoX2EgPSB7fSwgX2FbX3RoaXMucGF0aFtpXV0gPSBfdGhpcy5taXNzaW5nLCBfYSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBfdGhpcy5taXNzaW5nID0gX3RoaXMucGF0aDtcbiAgICAgICAgfVxuICAgICAgICAvLyBXZSdyZSBub3QgdXNpbmcgYE9iamVjdC5zZXRQcm90b3R5cGVPZmAgaGVyZSBhcyBpdCBpc24ndCBmdWxseSBzdXBwb3J0ZWRcbiAgICAgICAgLy8gb24gQW5kcm9pZCAoc2VlIGlzc3VlICMzMjM2KS5cbiAgICAgICAgX3RoaXMuX19wcm90b19fID0gTWlzc2luZ0ZpZWxkRXJyb3IucHJvdG90eXBlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBNaXNzaW5nRmllbGRFcnJvcjtcbn0oRXJyb3IpKTtcbmV4cG9ydCB7IE1pc3NpbmdGaWVsZEVycm9yIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21tb24uanMubWFwIl0sIm5hbWVzIjpbIl9fZXh0ZW5kcyIsIk1pc3NpbmdGaWVsZEVycm9yIiwiX3N1cGVyIiwibWVzc2FnZSIsInBhdGgiLCJxdWVyeSIsInZhcmlhYmxlcyIsIl9hIiwiX3RoaXMiLCJjYWxsIiwiQXJyYXkiLCJpc0FycmF5IiwibWlzc2luZyIsImkiLCJsZW5ndGgiLCJfX3Byb3RvX18iLCJwcm90b3R5cGUiLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/cache/core/types/common.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/cache/inmemory/entityStore.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@apollo/client/cache/inmemory/entityStore.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EntityStore: () => (/* binding */ EntityStore),\n/* harmony export */   maybeDependOnExistenceOfEntity: () => (/* binding */ maybeDependOnExistenceOfEntity),\n/* harmony export */   supportsResultCaching: () => (/* binding */ supportsResultCaching)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var optimism__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! optimism */ \"(ssr)/./node_modules/optimism/lib/index.js\");\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @wry/equality */ \"(ssr)/./node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var _wry_trie__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @wry/trie */ \"(ssr)/./node_modules/@wry/trie/lib/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/maybeDeepFreeze.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/mergeDeep.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/objects.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/helpers.js\");\n\n\n\n\n\n\n\nvar DELETE = Object.create(null);\nvar delModifier = function() {\n    return DELETE;\n};\nvar INVALIDATE = Object.create(null);\nvar EntityStore = /** @class */ function() {\n    function EntityStore(policies, group) {\n        var _this = this;\n        this.policies = policies;\n        this.group = group;\n        this.data = Object.create(null);\n        // Maps root entity IDs to the number of times they have been retained, minus\n        // the number of times they have been released. Retained entities keep other\n        // entities they reference (even indirectly) from being garbage collected.\n        this.rootIds = Object.create(null);\n        // Lazily tracks { __ref: <dataId> } strings contained by this.data[dataId].\n        this.refs = Object.create(null);\n        // Bound function that can be passed around to provide easy access to fields\n        // of Reference objects as well as ordinary objects.\n        this.getFieldValue = function(objectOrReference, storeFieldName) {\n            return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.maybeDeepFreeze)((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isReference)(objectOrReference) ? _this.get(objectOrReference.__ref, storeFieldName) : objectOrReference && objectOrReference[storeFieldName]);\n        };\n        // Returns true for non-normalized StoreObjects and non-dangling\n        // References, indicating that readField(name, objOrRef) has a chance of\n        // working. Useful for filtering out dangling references from lists.\n        this.canRead = function(objOrRef) {\n            return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isReference)(objOrRef) ? _this.has(objOrRef.__ref) : typeof objOrRef === \"object\";\n        };\n        // Bound function that converts an id or an object with a __typename and\n        // primary key fields to a Reference object. If called with a Reference object,\n        // that same Reference object is returned. Pass true for mergeIntoStore to persist\n        // an object into the store.\n        this.toReference = function(objOrIdOrRef, mergeIntoStore) {\n            if (typeof objOrIdOrRef === \"string\") {\n                return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.makeReference)(objOrIdOrRef);\n            }\n            if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isReference)(objOrIdOrRef)) {\n                return objOrIdOrRef;\n            }\n            var id = _this.policies.identify(objOrIdOrRef)[0];\n            if (id) {\n                var ref = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.makeReference)(id);\n                if (mergeIntoStore) {\n                    _this.merge(id, objOrIdOrRef);\n                }\n                return ref;\n            }\n        };\n    }\n    // Although the EntityStore class is abstract, it contains concrete\n    // implementations of the various NormalizedCache interface methods that\n    // are inherited by the Root and Layer subclasses.\n    EntityStore.prototype.toObject = function() {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, this.data);\n    };\n    EntityStore.prototype.has = function(dataId) {\n        return this.lookup(dataId, true) !== void 0;\n    };\n    EntityStore.prototype.get = function(dataId, fieldName) {\n        this.group.depend(dataId, fieldName);\n        if (_helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(this.data, dataId)) {\n            var storeObject = this.data[dataId];\n            if (storeObject && _helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(storeObject, fieldName)) {\n                return storeObject[fieldName];\n            }\n        }\n        if (fieldName === \"__typename\" && _helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(this.policies.rootTypenamesById, dataId)) {\n            return this.policies.rootTypenamesById[dataId];\n        }\n        if (this instanceof Layer) {\n            return this.parent.get(dataId, fieldName);\n        }\n    };\n    EntityStore.prototype.lookup = function(dataId, dependOnExistence) {\n        // The has method (above) calls lookup with dependOnExistence = true, so\n        // that it can later be invalidated when we add or remove a StoreObject for\n        // this dataId. Any consumer who cares about the contents of the StoreObject\n        // should not rely on this dependency, since the contents could change\n        // without the object being added or removed.\n        if (dependOnExistence) this.group.depend(dataId, \"__exists\");\n        if (_helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(this.data, dataId)) {\n            return this.data[dataId];\n        }\n        if (this instanceof Layer) {\n            return this.parent.lookup(dataId, dependOnExistence);\n        }\n        if (this.policies.rootTypenamesById[dataId]) {\n            return Object.create(null);\n        }\n    };\n    EntityStore.prototype.merge = function(older, newer) {\n        var _this = this;\n        var dataId;\n        // Convert unexpected references to ID strings.\n        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isReference)(older)) older = older.__ref;\n        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isReference)(newer)) newer = newer.__ref;\n        var existing = typeof older === \"string\" ? this.lookup(dataId = older) : older;\n        var incoming = typeof newer === \"string\" ? this.lookup(dataId = newer) : newer;\n        // If newer was a string ID, but that ID was not defined in this store,\n        // then there are no fields to be merged, so we're done.\n        if (!incoming) return;\n        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(typeof dataId === \"string\", 2);\n        var merged = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.DeepMerger(storeObjectReconciler).merge(existing, incoming);\n        // Even if merged === existing, existing may have come from a lower\n        // layer, so we always need to set this.data[dataId] on this level.\n        this.data[dataId] = merged;\n        if (merged !== existing) {\n            delete this.refs[dataId];\n            if (this.group.caching) {\n                var fieldsToDirty_1 = Object.create(null);\n                // If we added a new StoreObject where there was previously none, dirty\n                // anything that depended on the existence of this dataId, such as the\n                // EntityStore#has method.\n                if (!existing) fieldsToDirty_1.__exists = 1;\n                // Now invalidate dependents who called getFieldValue for any fields\n                // that are changing as a result of this merge.\n                Object.keys(incoming).forEach(function(storeFieldName) {\n                    if (!existing || existing[storeFieldName] !== merged[storeFieldName]) {\n                        // Always dirty the full storeFieldName, which may include\n                        // serialized arguments following the fieldName prefix.\n                        fieldsToDirty_1[storeFieldName] = 1;\n                        // Also dirty fieldNameFromStoreName(storeFieldName) if it's\n                        // different from storeFieldName and this field does not have\n                        // keyArgs configured, because that means the cache can't make\n                        // any assumptions about how field values with the same field\n                        // name but different arguments might be interrelated, so it\n                        // must err on the side of invalidating all field values that\n                        // share the same short fieldName, regardless of arguments.\n                        var fieldName = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_7__.fieldNameFromStoreName)(storeFieldName);\n                        if (fieldName !== storeFieldName && !_this.policies.hasKeyArgs(merged.__typename, fieldName)) {\n                            fieldsToDirty_1[fieldName] = 1;\n                        }\n                        // If merged[storeFieldName] has become undefined, and this is the\n                        // Root layer, actually delete the property from the merged object,\n                        // which is guaranteed to have been created fresh in this method.\n                        if (merged[storeFieldName] === void 0 && !(_this instanceof Layer)) {\n                            delete merged[storeFieldName];\n                        }\n                    }\n                });\n                if (fieldsToDirty_1.__typename && !(existing && existing.__typename) && // Since we return default root __typename strings\n                // automatically from store.get, we don't need to dirty the\n                // ROOT_QUERY.__typename field if merged.__typename is equal\n                // to the default string (usually \"Query\").\n                this.policies.rootTypenamesById[dataId] === merged.__typename) {\n                    delete fieldsToDirty_1.__typename;\n                }\n                Object.keys(fieldsToDirty_1).forEach(function(fieldName) {\n                    return _this.group.dirty(dataId, fieldName);\n                });\n            }\n        }\n    };\n    EntityStore.prototype.modify = function(dataId, fields) {\n        var _this = this;\n        var storeObject = this.lookup(dataId);\n        if (storeObject) {\n            var changedFields_1 = Object.create(null);\n            var needToMerge_1 = false;\n            var allDeleted_1 = true;\n            var sharedDetails_1 = {\n                DELETE: DELETE,\n                INVALIDATE: INVALIDATE,\n                isReference: _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isReference,\n                toReference: this.toReference,\n                canRead: this.canRead,\n                readField: function(fieldNameOrOptions, from) {\n                    return _this.policies.readField(typeof fieldNameOrOptions === \"string\" ? {\n                        fieldName: fieldNameOrOptions,\n                        from: from || (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.makeReference)(dataId)\n                    } : fieldNameOrOptions, {\n                        store: _this\n                    });\n                }\n            };\n            Object.keys(storeObject).forEach(function(storeFieldName) {\n                var fieldName = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_7__.fieldNameFromStoreName)(storeFieldName);\n                var fieldValue = storeObject[storeFieldName];\n                if (fieldValue === void 0) return;\n                var modify = typeof fields === \"function\" ? fields : fields[storeFieldName] || fields[fieldName];\n                if (modify) {\n                    var newValue = modify === delModifier ? DELETE : modify((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.maybeDeepFreeze)(fieldValue), (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, sharedDetails_1), {\n                        fieldName: fieldName,\n                        storeFieldName: storeFieldName,\n                        storage: _this.getStorage(dataId, storeFieldName)\n                    }));\n                    if (newValue === INVALIDATE) {\n                        _this.group.dirty(dataId, storeFieldName);\n                    } else {\n                        if (newValue === DELETE) newValue = void 0;\n                        if (newValue !== fieldValue) {\n                            changedFields_1[storeFieldName] = newValue;\n                            needToMerge_1 = true;\n                            fieldValue = newValue;\n                            if (globalThis.__DEV__ !== false) {\n                                var checkReference = function(ref) {\n                                    if (_this.lookup(ref.__ref) === undefined) {\n                                        globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(3, ref);\n                                        return true;\n                                    }\n                                };\n                                if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isReference)(newValue)) {\n                                    checkReference(newValue);\n                                } else if (Array.isArray(newValue)) {\n                                    // Warn about writing \"mixed\" arrays of Reference and non-Reference objects\n                                    var seenReference = false;\n                                    var someNonReference = void 0;\n                                    for(var _i = 0, newValue_1 = newValue; _i < newValue_1.length; _i++){\n                                        var value = newValue_1[_i];\n                                        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isReference)(value)) {\n                                            seenReference = true;\n                                            if (checkReference(value)) break;\n                                        } else {\n                                            // Do not warn on primitive values, since those could never be represented\n                                            // by a reference. This is a valid (albeit uncommon) use case.\n                                            if (typeof value === \"object\" && !!value) {\n                                                var id = _this.policies.identify(value)[0];\n                                                // check if object could even be referenced, otherwise we are not interested in it for this warning\n                                                if (id) {\n                                                    someNonReference = value;\n                                                }\n                                            }\n                                        }\n                                        if (seenReference && someNonReference !== undefined) {\n                                            globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(4, someNonReference);\n                                            break;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                if (fieldValue !== void 0) {\n                    allDeleted_1 = false;\n                }\n            });\n            if (needToMerge_1) {\n                this.merge(dataId, changedFields_1);\n                if (allDeleted_1) {\n                    if (this instanceof Layer) {\n                        this.data[dataId] = void 0;\n                    } else {\n                        delete this.data[dataId];\n                    }\n                    this.group.dirty(dataId, \"__exists\");\n                }\n                return true;\n            }\n        }\n        return false;\n    };\n    // If called with only one argument, removes the entire entity\n    // identified by dataId. If called with a fieldName as well, removes all\n    // fields of that entity whose names match fieldName according to the\n    // fieldNameFromStoreName helper function. If called with a fieldName\n    // and variables, removes all fields of that entity whose names match fieldName\n    // and whose arguments when cached exactly match the variables passed.\n    EntityStore.prototype.delete = function(dataId, fieldName, args) {\n        var _a;\n        var storeObject = this.lookup(dataId);\n        if (storeObject) {\n            var typename = this.getFieldValue(storeObject, \"__typename\");\n            var storeFieldName = fieldName && args ? this.policies.getStoreFieldName({\n                typename: typename,\n                fieldName: fieldName,\n                args: args\n            }) : fieldName;\n            return this.modify(dataId, storeFieldName ? (_a = {}, _a[storeFieldName] = delModifier, _a) : delModifier);\n        }\n        return false;\n    };\n    EntityStore.prototype.evict = function(options, limit) {\n        var evicted = false;\n        if (options.id) {\n            if (_helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(this.data, options.id)) {\n                evicted = this.delete(options.id, options.fieldName, options.args);\n            }\n            if (this instanceof Layer && this !== limit) {\n                evicted = this.parent.evict(options, limit) || evicted;\n            }\n            // Always invalidate the field to trigger rereading of watched\n            // queries, even if no cache data was modified by the eviction,\n            // because queries may depend on computed fields with custom read\n            // functions, whose values are not stored in the EntityStore.\n            if (options.fieldName || evicted) {\n                this.group.dirty(options.id, options.fieldName || \"__exists\");\n            }\n        }\n        return evicted;\n    };\n    EntityStore.prototype.clear = function() {\n        this.replace(null);\n    };\n    EntityStore.prototype.extract = function() {\n        var _this = this;\n        var obj = this.toObject();\n        var extraRootIds = [];\n        this.getRootIdSet().forEach(function(id) {\n            if (!_helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(_this.policies.rootTypenamesById, id)) {\n                extraRootIds.push(id);\n            }\n        });\n        if (extraRootIds.length) {\n            obj.__META = {\n                extraRootIds: extraRootIds.sort()\n            };\n        }\n        return obj;\n    };\n    EntityStore.prototype.replace = function(newData) {\n        var _this = this;\n        Object.keys(this.data).forEach(function(dataId) {\n            if (!(newData && _helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(newData, dataId))) {\n                _this.delete(dataId);\n            }\n        });\n        if (newData) {\n            var __META = newData.__META, rest_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__rest)(newData, [\n                \"__META\"\n            ]);\n            Object.keys(rest_1).forEach(function(dataId) {\n                _this.merge(dataId, rest_1[dataId]);\n            });\n            if (__META) {\n                __META.extraRootIds.forEach(this.retain, this);\n            }\n        }\n    };\n    EntityStore.prototype.retain = function(rootId) {\n        return this.rootIds[rootId] = (this.rootIds[rootId] || 0) + 1;\n    };\n    EntityStore.prototype.release = function(rootId) {\n        if (this.rootIds[rootId] > 0) {\n            var count = --this.rootIds[rootId];\n            if (!count) delete this.rootIds[rootId];\n            return count;\n        }\n        return 0;\n    };\n    // Return a Set<string> of all the ID strings that have been retained by\n    // this layer/root *and* any layers/roots beneath it.\n    EntityStore.prototype.getRootIdSet = function(ids) {\n        if (ids === void 0) {\n            ids = new Set();\n        }\n        Object.keys(this.rootIds).forEach(ids.add, ids);\n        if (this instanceof Layer) {\n            this.parent.getRootIdSet(ids);\n        } else {\n            // Official singleton IDs like ROOT_QUERY and ROOT_MUTATION are\n            // always considered roots for garbage collection, regardless of\n            // their retainment counts in this.rootIds.\n            Object.keys(this.policies.rootTypenamesById).forEach(ids.add, ids);\n        }\n        return ids;\n    };\n    // The goal of garbage collection is to remove IDs from the Root layer of the\n    // store that are no longer reachable starting from any IDs that have been\n    // explicitly retained (see retain and release, above). Returns an array of\n    // dataId strings that were removed from the store.\n    EntityStore.prototype.gc = function() {\n        var _this = this;\n        var ids = this.getRootIdSet();\n        var snapshot = this.toObject();\n        ids.forEach(function(id) {\n            if (_helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(snapshot, id)) {\n                // Because we are iterating over an ECMAScript Set, the IDs we add here\n                // will be visited in later iterations of the forEach loop only if they\n                // were not previously contained by the Set.\n                Object.keys(_this.findChildRefIds(id)).forEach(ids.add, ids);\n                // By removing IDs from the snapshot object here, we protect them from\n                // getting removed from the root store layer below.\n                delete snapshot[id];\n            }\n        });\n        var idsToRemove = Object.keys(snapshot);\n        if (idsToRemove.length) {\n            var root_1 = this;\n            while(root_1 instanceof Layer)root_1 = root_1.parent;\n            idsToRemove.forEach(function(id) {\n                return root_1.delete(id);\n            });\n        }\n        return idsToRemove;\n    };\n    EntityStore.prototype.findChildRefIds = function(dataId) {\n        if (!_helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(this.refs, dataId)) {\n            var found_1 = this.refs[dataId] = Object.create(null);\n            var root = this.data[dataId];\n            if (!root) return found_1;\n            var workSet_1 = new Set([\n                root\n            ]);\n            // Within the store, only arrays and objects can contain child entity\n            // references, so we can prune the traversal using this predicate:\n            workSet_1.forEach(function(obj) {\n                if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isReference)(obj)) {\n                    found_1[obj.__ref] = true;\n                // In rare cases, a { __ref } Reference object may have other fields.\n                // This often indicates a mismerging of References with StoreObjects,\n                // but garbage collection should not be fooled by a stray __ref\n                // property in a StoreObject (ignoring all the other fields just\n                // because the StoreObject looks like a Reference). To avoid this\n                // premature termination of findChildRefIds recursion, we fall through\n                // to the code below, which will handle any other properties of obj.\n                }\n                if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isNonNullObject)(obj)) {\n                    Object.keys(obj).forEach(function(key) {\n                        var child = obj[key];\n                        // No need to add primitive values to the workSet, since they cannot\n                        // contain reference objects.\n                        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isNonNullObject)(child)) {\n                            workSet_1.add(child);\n                        }\n                    });\n                }\n            });\n        }\n        return this.refs[dataId];\n    };\n    EntityStore.prototype.makeCacheKey = function() {\n        return this.group.keyMaker.lookupArray(arguments);\n    };\n    return EntityStore;\n}();\n\n// A single CacheGroup represents a set of one or more EntityStore objects,\n// typically the Root store in a CacheGroup by itself, and all active Layer\n// stores in a group together. A single EntityStore object belongs to only\n// one CacheGroup, store.group. The CacheGroup is responsible for tracking\n// dependencies, so store.group is helpful for generating unique keys for\n// cached results that need to be invalidated when/if those dependencies\n// change. If we used the EntityStore objects themselves as cache keys (that\n// is, store rather than store.group), the cache would become unnecessarily\n// fragmented by all the different Layer objects. Instead, the CacheGroup\n// approach allows all optimistic Layer objects in the same linked list to\n// belong to one CacheGroup, with the non-optimistic Root object belonging\n// to another CacheGroup, allowing resultCaching dependencies to be tracked\n// separately for optimistic and non-optimistic entity data.\nvar CacheGroup = /** @class */ function() {\n    function CacheGroup(caching, parent) {\n        if (parent === void 0) {\n            parent = null;\n        }\n        this.caching = caching;\n        this.parent = parent;\n        this.d = null;\n        this.resetCaching();\n    }\n    CacheGroup.prototype.resetCaching = function() {\n        this.d = this.caching ? (0,optimism__WEBPACK_IMPORTED_MODULE_1__.dep)() : null;\n        this.keyMaker = new _wry_trie__WEBPACK_IMPORTED_MODULE_3__.Trie(_utilities_index_js__WEBPACK_IMPORTED_MODULE_10__.canUseWeakMap);\n    };\n    CacheGroup.prototype.depend = function(dataId, storeFieldName) {\n        if (this.d) {\n            this.d(makeDepKey(dataId, storeFieldName));\n            var fieldName = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_7__.fieldNameFromStoreName)(storeFieldName);\n            if (fieldName !== storeFieldName) {\n                // Fields with arguments that contribute extra identifying\n                // information to the fieldName (thus forming the storeFieldName)\n                // depend not only on the full storeFieldName but also on the\n                // short fieldName, so the field can be invalidated using either\n                // level of specificity.\n                this.d(makeDepKey(dataId, fieldName));\n            }\n            if (this.parent) {\n                this.parent.depend(dataId, storeFieldName);\n            }\n        }\n    };\n    CacheGroup.prototype.dirty = function(dataId, storeFieldName) {\n        if (this.d) {\n            this.d.dirty(makeDepKey(dataId, storeFieldName), // When storeFieldName === \"__exists\", that means the entity identified\n            // by dataId has either disappeared from the cache or was newly added,\n            // so the result caching system would do well to \"forget everything it\n            // knows\" about that object. To achieve that kind of invalidation, we\n            // not only dirty the associated result cache entry, but also remove it\n            // completely from the dependency graph. For the optimism implementation\n            // details, see https://github.com/benjamn/optimism/pull/195.\n            storeFieldName === \"__exists\" ? \"forget\" : \"setDirty\");\n        }\n    };\n    return CacheGroup;\n}();\nfunction makeDepKey(dataId, storeFieldName) {\n    // Since field names cannot have '#' characters in them, this method\n    // of joining the field name and the ID should be unambiguous, and much\n    // cheaper than JSON.stringify([dataId, fieldName]).\n    return storeFieldName + \"#\" + dataId;\n}\nfunction maybeDependOnExistenceOfEntity(store, entityId) {\n    if (supportsResultCaching(store)) {\n        // We use this pseudo-field __exists elsewhere in the EntityStore code to\n        // represent changes in the existence of the entity object identified by\n        // entityId. This dependency gets reliably dirtied whenever an object with\n        // this ID is deleted (or newly created) within this group, so any result\n        // cache entries (for example, StoreReader#executeSelectionSet results) that\n        // depend on __exists for this entityId will get dirtied as well, leading to\n        // the eventual recomputation (instead of reuse) of those result objects the\n        // next time someone reads them from the cache.\n        store.group.depend(entityId, \"__exists\");\n    }\n}\n(function(EntityStore) {\n    // Refer to this class as EntityStore.Root outside this namespace.\n    var Root = /** @class */ function(_super) {\n        (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__extends)(Root, _super);\n        function Root(_a) {\n            var policies = _a.policies, _b = _a.resultCaching, resultCaching = _b === void 0 ? true : _b, seed = _a.seed;\n            var _this = _super.call(this, policies, new CacheGroup(resultCaching)) || this;\n            _this.stump = new Stump(_this);\n            _this.storageTrie = new _wry_trie__WEBPACK_IMPORTED_MODULE_3__.Trie(_utilities_index_js__WEBPACK_IMPORTED_MODULE_10__.canUseWeakMap);\n            if (seed) _this.replace(seed);\n            return _this;\n        }\n        Root.prototype.addLayer = function(layerId, replay) {\n            // Adding an optimistic Layer on top of the Root actually adds the Layer\n            // on top of the Stump, so the Stump always comes between the Root and\n            // any Layer objects that we've added.\n            return this.stump.addLayer(layerId, replay);\n        };\n        Root.prototype.removeLayer = function() {\n            // Never remove the root layer.\n            return this;\n        };\n        Root.prototype.getStorage = function() {\n            return this.storageTrie.lookupArray(arguments);\n        };\n        return Root;\n    }(EntityStore);\n    EntityStore.Root = Root;\n})(EntityStore || (EntityStore = {}));\n// Not exported, since all Layer instances are created by the addLayer method\n// of the EntityStore.Root class.\nvar Layer = /** @class */ function(_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__extends)(Layer, _super);\n    function Layer(id, parent, replay, group) {\n        var _this = _super.call(this, parent.policies, group) || this;\n        _this.id = id;\n        _this.parent = parent;\n        _this.replay = replay;\n        _this.group = group;\n        replay(_this);\n        return _this;\n    }\n    Layer.prototype.addLayer = function(layerId, replay) {\n        return new Layer(layerId, this, replay, this.group);\n    };\n    Layer.prototype.removeLayer = function(layerId) {\n        var _this = this;\n        // Remove all instances of the given id, not just the first one.\n        var parent = this.parent.removeLayer(layerId);\n        if (layerId === this.id) {\n            if (this.group.caching) {\n                // Dirty every ID we're removing. Technically we might be able to avoid\n                // dirtying fields that have values in higher layers, but we don't have\n                // easy access to higher layers here, and we're about to recreate those\n                // layers anyway (see parent.addLayer below).\n                Object.keys(this.data).forEach(function(dataId) {\n                    var ownStoreObject = _this.data[dataId];\n                    var parentStoreObject = parent[\"lookup\"](dataId);\n                    if (!parentStoreObject) {\n                        // The StoreObject identified by dataId was defined in this layer\n                        // but will be undefined in the parent layer, so we can delete the\n                        // whole entity using this.delete(dataId). Since we're about to\n                        // throw this layer away, the only goal of this deletion is to dirty\n                        // the removed fields.\n                        _this.delete(dataId);\n                    } else if (!ownStoreObject) {\n                        // This layer had an entry for dataId but it was undefined, which\n                        // means the entity was deleted in this layer, and it's about to\n                        // become undeleted when we remove this layer, so we need to dirty\n                        // all fields that are about to be reexposed.\n                        _this.group.dirty(dataId, \"__exists\");\n                        Object.keys(parentStoreObject).forEach(function(storeFieldName) {\n                            _this.group.dirty(dataId, storeFieldName);\n                        });\n                    } else if (ownStoreObject !== parentStoreObject) {\n                        // If ownStoreObject is not exactly the same as parentStoreObject,\n                        // dirty any fields whose values will change as a result of this\n                        // removal.\n                        Object.keys(ownStoreObject).forEach(function(storeFieldName) {\n                            if (!(0,_wry_equality__WEBPACK_IMPORTED_MODULE_2__.equal)(ownStoreObject[storeFieldName], parentStoreObject[storeFieldName])) {\n                                _this.group.dirty(dataId, storeFieldName);\n                            }\n                        });\n                    }\n                });\n            }\n            return parent;\n        }\n        // No changes are necessary if the parent chain remains identical.\n        if (parent === this.parent) return this;\n        // Recreate this layer on top of the new parent.\n        return parent.addLayer(this.id, this.replay);\n    };\n    Layer.prototype.toObject = function() {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, this.parent.toObject()), this.data);\n    };\n    Layer.prototype.findChildRefIds = function(dataId) {\n        var fromParent = this.parent.findChildRefIds(dataId);\n        return _helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(this.data, dataId) ? (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, fromParent), _super.prototype.findChildRefIds.call(this, dataId)) : fromParent;\n    };\n    Layer.prototype.getStorage = function() {\n        var p = this.parent;\n        while(p.parent)p = p.parent;\n        return p.getStorage.apply(p, // @ts-expect-error\n        arguments);\n    };\n    return Layer;\n}(EntityStore);\n// Represents a Layer permanently installed just above the Root, which allows\n// reading optimistically (and registering optimistic dependencies) even when\n// no optimistic layers are currently active. The stump.group CacheGroup object\n// is shared by any/all Layer objects added on top of the Stump.\nvar Stump = /** @class */ function(_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__extends)(Stump, _super);\n    function Stump(root) {\n        return _super.call(this, \"EntityStore.Stump\", root, function() {}, new CacheGroup(root.group.caching, root.group)) || this;\n    }\n    Stump.prototype.removeLayer = function() {\n        // Never remove the Stump layer.\n        return this;\n    };\n    Stump.prototype.merge = function(older, newer) {\n        // We never want to write any data into the Stump, so we forward any merge\n        // calls to the Root instead. Another option here would be to throw an\n        // exception, but the toReference(object, true) function can sometimes\n        // trigger Stump writes (which used to be Root writes, before the Stump\n        // concept was introduced).\n        return this.parent.merge(older, newer);\n    };\n    return Stump;\n}(Layer);\nfunction storeObjectReconciler(existingObject, incomingObject, property) {\n    var existingValue = existingObject[property];\n    var incomingValue = incomingObject[property];\n    // Wherever there is a key collision, prefer the incoming value, unless\n    // it is deeply equal to the existing value. It's worth checking deep\n    // equality here (even though blindly returning incoming would be\n    // logically correct) because preserving the referential identity of\n    // existing data can prevent needless rereading and rerendering.\n    return (0,_wry_equality__WEBPACK_IMPORTED_MODULE_2__.equal)(existingValue, incomingValue) ? existingValue : incomingValue;\n}\nfunction supportsResultCaching(store) {\n    // When result caching is disabled, store.depend will be null.\n    return !!(store instanceof EntityStore && store.group.caching);\n} //# sourceMappingURL=entityStore.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/cache/inmemory/entityStore.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/cache/inmemory/helpers.js":
/*!***************************************************************!*\
  !*** ./node_modules/@apollo/client/cache/inmemory/helpers.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TypeOrFieldNameRegExp: () => (/* binding */ TypeOrFieldNameRegExp),\n/* harmony export */   defaultDataIdFromObject: () => (/* binding */ defaultDataIdFromObject),\n/* harmony export */   extractFragmentContext: () => (/* binding */ extractFragmentContext),\n/* harmony export */   fieldNameFromStoreName: () => (/* binding */ fieldNameFromStoreName),\n/* harmony export */   getTypenameFromStoreObject: () => (/* binding */ getTypenameFromStoreObject),\n/* harmony export */   hasOwn: () => (/* binding */ hasOwn),\n/* harmony export */   isArray: () => (/* reexport safe */ _utilities_index_js__WEBPACK_IMPORTED_MODULE_0__.isArray),\n/* harmony export */   isNullish: () => (/* binding */ isNullish),\n/* harmony export */   makeProcessedFieldsMerger: () => (/* binding */ makeProcessedFieldsMerger),\n/* harmony export */   normalizeConfig: () => (/* binding */ normalizeConfig),\n/* harmony export */   selectionSetMatchesResult: () => (/* binding */ selectionSetMatchesResult),\n/* harmony export */   shouldCanonizeResults: () => (/* binding */ shouldCanonizeResults),\n/* harmony export */   storeValueIsStoreObject: () => (/* binding */ storeValueIsStoreObject)\n/* harmony export */ });\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/compact.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/objects.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/directives.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/mergeDeep.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/fragments.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nfunction isNullish(value) {\n    return value === null || value === void 0;\n}\n\nfunction defaultDataIdFromObject(_a, context) {\n    var __typename = _a.__typename, id = _a.id, _id = _a._id;\n    if (typeof __typename === \"string\") {\n        if (context) {\n            context.keyObject = !isNullish(id) ? {\n                id: id\n            } : !isNullish(_id) ? {\n                _id: _id\n            } : void 0;\n        }\n        // If there is no object.id, fall back to object._id.\n        if (isNullish(id) && !isNullish(_id)) {\n            id = _id;\n        }\n        if (!isNullish(id)) {\n            return \"\".concat(__typename, \":\").concat(typeof id === \"number\" || typeof id === \"string\" ? id : JSON.stringify(id));\n        }\n    }\n}\nvar defaultConfig = {\n    dataIdFromObject: defaultDataIdFromObject,\n    addTypename: true,\n    resultCaching: true,\n    // Thanks to the shouldCanonizeResults helper, this should be the only line\n    // you have to change to reenable canonization by default in the future.\n    canonizeResults: false\n};\nfunction normalizeConfig(config) {\n    return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.compact)(defaultConfig, config);\n}\nfunction shouldCanonizeResults(config) {\n    var value = config.canonizeResults;\n    return value === void 0 ? defaultConfig.canonizeResults : value;\n}\nfunction getTypenameFromStoreObject(store, objectOrReference) {\n    return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.isReference)(objectOrReference) ? store.get(objectOrReference.__ref, \"__typename\") : objectOrReference && objectOrReference.__typename;\n}\nvar TypeOrFieldNameRegExp = /^[_a-z][_0-9a-z]*/i;\nfunction fieldNameFromStoreName(storeFieldName) {\n    var match = storeFieldName.match(TypeOrFieldNameRegExp);\n    return match ? match[0] : storeFieldName;\n}\nfunction selectionSetMatchesResult(selectionSet, result, variables) {\n    if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.isNonNullObject)(result)) {\n        return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_0__.isArray)(result) ? result.every(function(item) {\n            return selectionSetMatchesResult(selectionSet, item, variables);\n        }) : selectionSet.selections.every(function(field) {\n            if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.isField)(field) && (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.shouldInclude)(field, variables)) {\n                var key = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.resultKeyNameFromField)(field);\n                return hasOwn.call(result, key) && (!field.selectionSet || selectionSetMatchesResult(field.selectionSet, result[key], variables));\n            }\n            // If the selection has been skipped with @skip(true) or\n            // @include(false), it should not count against the matching. If\n            // the selection is not a field, it must be a fragment (inline or\n            // named). We will determine if selectionSetMatchesResult for that\n            // fragment when we get to it, so for now we return true.\n            return true;\n        });\n    }\n    return false;\n}\nfunction storeValueIsStoreObject(value) {\n    return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.isNonNullObject)(value) && !(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.isReference)(value) && !(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_0__.isArray)(value);\n}\nfunction makeProcessedFieldsMerger() {\n    return new _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.DeepMerger();\n}\nfunction extractFragmentContext(document, fragments) {\n    // FragmentMap consisting only of fragments defined directly in document, not\n    // including other fragments registered in the FragmentRegistry.\n    var fragmentMap = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_6__.createFragmentMap)((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.getFragmentDefinitions)(document));\n    return {\n        fragmentMap: fragmentMap,\n        lookupFragment: function(name) {\n            var def = fragmentMap[name];\n            if (!def && fragments) {\n                def = fragments.lookup(name);\n            }\n            return def || null;\n        }\n    };\n} //# sourceMappingURL=helpers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/cache/inmemory/helpers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/cache/inmemory/inMemoryCache.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@apollo/client/cache/inmemory/inMemoryCache.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InMemoryCache: () => (/* binding */ InMemoryCache)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var optimism__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! optimism */ \"(ssr)/./node_modules/optimism/lib/index.js\");\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @wry/equality */ \"(ssr)/./node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var _core_cache_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../core/cache.js */ \"(ssr)/./node_modules/@apollo/client/cache/core/cache.js\");\n/* harmony import */ var _core_types_common_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../core/types/common.js */ \"(ssr)/./node_modules/@apollo/client/cache/core/types/common.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/DocumentTransform.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/transform.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/sizes.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canonicalStringify.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/print.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _readFromStore_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./readFromStore.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/readFromStore.js\");\n/* harmony import */ var _writeToStore_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./writeToStore.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/writeToStore.js\");\n/* harmony import */ var _entityStore_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./entityStore.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/entityStore.js\");\n/* harmony import */ var _reactiveVars_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./reactiveVars.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/reactiveVars.js\");\n/* harmony import */ var _policies_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./policies.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/policies.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/helpers.js\");\n/* harmony import */ var _utilities_caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../utilities/caching/getMemoryInternals.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/getMemoryInternals.js\");\n/* harmony import */ var _utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utilities/deprecation/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/deprecation/index.js\");\n\n\n// Make builtins like Map and Set safe to use with non-extensible objects.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar InMemoryCache = /** @class */ function(_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(InMemoryCache, _super);\n    function InMemoryCache(config) {\n        if (config === void 0) {\n            config = {};\n        }\n        var _this = _super.call(this) || this;\n        _this.watches = new Set();\n        _this.addTypenameTransform = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.DocumentTransform(_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.addTypenameToDocument);\n        // Override the default value, since InMemoryCache result objects are frozen\n        // in development and expected to remain logically immutable in production.\n        _this.assumeImmutableResults = true;\n        _this.makeVar = _reactiveVars_js__WEBPACK_IMPORTED_MODULE_6__.makeVar;\n        _this.txCount = 0;\n        if (globalThis.__DEV__ !== false) {\n            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_7__.warnRemovedOption)(config, \"addTypename\", \"InMemoryCache\", \"Please remove the `addTypename` option when initializing `InMemoryCache`.\");\n            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_7__.warnRemovedOption)(config, \"canonizeResults\", \"InMemoryCache\", \"Please remove the `canonizeResults` option when initializing `InMemoryCache`.\");\n        }\n        _this.config = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_8__.normalizeConfig)(config);\n        _this.addTypename = !!_this.config.addTypename;\n        _this.policies = new _policies_js__WEBPACK_IMPORTED_MODULE_9__.Policies({\n            cache: _this,\n            dataIdFromObject: _this.config.dataIdFromObject,\n            possibleTypes: _this.config.possibleTypes,\n            typePolicies: _this.config.typePolicies\n        });\n        _this.init();\n        return _this;\n    }\n    InMemoryCache.prototype.init = function() {\n        // Passing { resultCaching: false } in the InMemoryCache constructor options\n        // will completely disable dependency tracking, which will improve memory\n        // usage but worsen the performance of repeated reads.\n        var rootStore = this.data = new _entityStore_js__WEBPACK_IMPORTED_MODULE_10__.EntityStore.Root({\n            policies: this.policies,\n            resultCaching: this.config.resultCaching\n        });\n        // When no optimistic writes are currently active, cache.optimisticData ===\n        // cache.data, so there are no additional layers on top of the actual data.\n        // When an optimistic update happens, this.optimisticData will become a\n        // linked list of EntityStore Layer objects that terminates with the\n        // original this.data cache object.\n        this.optimisticData = rootStore.stump;\n        this.resetResultCache();\n    };\n    InMemoryCache.prototype.resetResultCache = function(resetResultIdentities) {\n        var _this = this;\n        var previousReader = this.storeReader;\n        var fragments = this.config.fragments;\n        this.addTypenameTransform.resetCache();\n        fragments === null || fragments === void 0 ? void 0 : fragments.resetCaches();\n        // The StoreWriter is mostly stateless and so doesn't really need to be\n        // reset, but it does need to have its writer.storeReader reference updated,\n        // so it's simpler to update this.storeWriter as well.\n        this.storeWriter = new _writeToStore_js__WEBPACK_IMPORTED_MODULE_11__.StoreWriter(this, this.storeReader = new _readFromStore_js__WEBPACK_IMPORTED_MODULE_12__.StoreReader({\n            cache: this,\n            addTypename: this.addTypename,\n            resultCacheMaxSize: this.config.resultCacheMaxSize,\n            canonizeResults: (0,_helpers_js__WEBPACK_IMPORTED_MODULE_8__.shouldCanonizeResults)(this.config),\n            canon: resetResultIdentities ? void 0 : previousReader && previousReader.canon,\n            fragments: fragments\n        }), fragments);\n        this.maybeBroadcastWatch = (0,optimism__WEBPACK_IMPORTED_MODULE_1__.wrap)(function(c, options) {\n            return _this.broadcastWatch(c, options);\n        }, {\n            max: this.config.resultCacheMaxSize || _utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.cacheSizes[\"inMemoryCache.maybeBroadcastWatch\"] || 5000 /* defaultCacheSizes[\"inMemoryCache.maybeBroadcastWatch\"] */ ,\n            makeCacheKey: function(c) {\n                // Return a cache key (thus enabling result caching) only if we're\n                // currently using a data store that can track cache dependencies.\n                var store = c.optimistic ? _this.optimisticData : _this.data;\n                if ((0,_entityStore_js__WEBPACK_IMPORTED_MODULE_10__.supportsResultCaching)(store)) {\n                    var optimistic = c.optimistic, id = c.id, variables = c.variables;\n                    return store.makeCacheKey(c.query, // Different watches can have the same query, optimistic\n                    // status, rootId, and variables, but if their callbacks are\n                    // different, the (identical) result needs to be delivered to\n                    // each distinct callback. The easiest way to achieve that\n                    // separation is to include c.callback in the cache key for\n                    // maybeBroadcastWatch calls. See issue #5733.\n                    c.callback, (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_14__.canonicalStringify)({\n                        optimistic: optimistic,\n                        id: id,\n                        variables: variables\n                    }));\n                }\n            }\n        });\n        // Since we have thrown away all the cached functions that depend on the\n        // CacheGroup dependencies maintained by EntityStore, we should also reset\n        // all CacheGroup dependency information.\n        new Set([\n            this.data.group,\n            this.optimisticData.group\n        ]).forEach(function(group) {\n            return group.resetCaching();\n        });\n    };\n    InMemoryCache.prototype.restore = function(data) {\n        this.init();\n        // Since calling this.init() discards/replaces the entire StoreReader, along\n        // with the result caches it maintains, this.data.replace(data) won't have\n        // to bother deleting the old data.\n        if (data) this.data.replace(data);\n        return this;\n    };\n    InMemoryCache.prototype.extract = function(optimistic) {\n        if (optimistic === void 0) {\n            optimistic = false;\n        }\n        return (optimistic ? this.optimisticData : this.data).extract();\n    };\n    InMemoryCache.prototype.read = function(options) {\n        if (globalThis.__DEV__ !== false) {\n            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_7__.warnRemovedOption)(options, \"canonizeResults\", \"cache.read\");\n        }\n        var // Since read returns data or null, without any additional metadata\n        // about whether/where there might have been missing fields, the\n        // default behavior cannot be returnPartialData = true (like it is\n        // for the diff method), since defaulting to true would violate the\n        // integrity of the T in the return type. However, partial data may\n        // be useful in some cases, so returnPartialData:true may be\n        // specified explicitly.\n        _a = options.returnPartialData, // Since read returns data or null, without any additional metadata\n        // about whether/where there might have been missing fields, the\n        // default behavior cannot be returnPartialData = true (like it is\n        // for the diff method), since defaulting to true would violate the\n        // integrity of the T in the return type. However, partial data may\n        // be useful in some cases, so returnPartialData:true may be\n        // specified explicitly.\n        returnPartialData = _a === void 0 ? false : _a;\n        try {\n            return this.storeReader.diffQueryAgainstStore((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, options), {\n                store: options.optimistic ? this.optimisticData : this.data,\n                config: this.config,\n                returnPartialData: returnPartialData\n            })).result || null;\n        } catch (e) {\n            if (e instanceof _core_types_common_js__WEBPACK_IMPORTED_MODULE_15__.MissingFieldError) {\n                // Swallow MissingFieldError and return null, so callers do not need to\n                // worry about catching \"normal\" exceptions resulting from incomplete\n                // cache data. Unexpected errors will be re-thrown. If you need more\n                // information about which fields were missing, use cache.diff instead,\n                // and examine diffResult.missing.\n                return null;\n            }\n            throw e;\n        }\n    };\n    InMemoryCache.prototype.write = function(options) {\n        try {\n            ++this.txCount;\n            return this.storeWriter.writeToStore(this.data, options);\n        } finally{\n            if (!--this.txCount && options.broadcast !== false) {\n                this.broadcastWatches();\n            }\n        }\n    };\n    InMemoryCache.prototype.modify = function(options) {\n        if (_helpers_js__WEBPACK_IMPORTED_MODULE_8__.hasOwn.call(options, \"id\") && !options.id) {\n            // To my knowledge, TypeScript does not currently provide a way to\n            // enforce that an optional property?:type must *not* be undefined\n            // when present. That ability would be useful here, because we want\n            // options.id to default to ROOT_QUERY only when no options.id was\n            // provided. If the caller attempts to pass options.id with a\n            // falsy/undefined value (perhaps because cache.identify failed), we\n            // should not assume the goal was to modify the ROOT_QUERY object.\n            // We could throw, but it seems natural to return false to indicate\n            // that nothing was modified.\n            return false;\n        }\n        var store = options.optimistic // Defaults to false.\n         ? this.optimisticData : this.data;\n        try {\n            ++this.txCount;\n            return store.modify(options.id || \"ROOT_QUERY\", options.fields);\n        } finally{\n            if (!--this.txCount && options.broadcast !== false) {\n                this.broadcastWatches();\n            }\n        }\n    };\n    InMemoryCache.prototype.diff = function(options) {\n        if (globalThis.__DEV__ !== false) {\n            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_7__.warnRemovedOption)(options, \"canonizeResults\", \"cache.diff\");\n        }\n        return this.storeReader.diffQueryAgainstStore((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, options), {\n            store: options.optimistic ? this.optimisticData : this.data,\n            rootId: options.id || \"ROOT_QUERY\",\n            config: this.config\n        }));\n    };\n    InMemoryCache.prototype.watch = function(watch) {\n        var _this = this;\n        if (!this.watches.size) {\n            // In case we previously called forgetCache(this) because\n            // this.watches became empty (see below), reattach this cache to any\n            // reactive variables on which it previously depended. It might seem\n            // paradoxical that we're able to recall something we supposedly\n            // forgot, but the point of calling forgetCache(this) is to silence\n            // useless broadcasts while this.watches is empty, and to allow the\n            // cache to be garbage collected. If, however, we manage to call\n            // recallCache(this) here, this cache object must not have been\n            // garbage collected yet, and should resume receiving updates from\n            // reactive variables, now that it has a watcher to notify.\n            (0,_reactiveVars_js__WEBPACK_IMPORTED_MODULE_6__.recallCache)(this);\n        }\n        this.watches.add(watch);\n        if (watch.immediate) {\n            this.maybeBroadcastWatch(watch);\n        }\n        return function() {\n            // Once we remove the last watch from this.watches, cache.broadcastWatches\n            // no longer does anything, so we preemptively tell the reactive variable\n            // system to exclude this cache from future broadcasts.\n            if (_this.watches.delete(watch) && !_this.watches.size) {\n                (0,_reactiveVars_js__WEBPACK_IMPORTED_MODULE_6__.forgetCache)(_this);\n            }\n            // Remove this watch from the LRU cache managed by the\n            // maybeBroadcastWatch OptimisticWrapperFunction, to prevent memory\n            // leaks involving the closure of watch.callback.\n            _this.maybeBroadcastWatch.forget(watch);\n        };\n    };\n    InMemoryCache.prototype.gc = function(options) {\n        if (globalThis.__DEV__ !== false) {\n            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_7__.warnRemovedOption)(options || {}, \"resetResultIdentities\", \"cache.gc\", \"First ensure all usages of `canonizeResults` are removed, then remove this option.\");\n        }\n        _utilities_index_js__WEBPACK_IMPORTED_MODULE_14__.canonicalStringify.reset();\n        _utilities_index_js__WEBPACK_IMPORTED_MODULE_16__.print.reset();\n        var ids = this.optimisticData.gc();\n        if (options && !this.txCount) {\n            if (options.resetResultCache) {\n                this.resetResultCache(options.resetResultIdentities);\n            } else if (options.resetResultIdentities) {\n                this.storeReader.resetCanon();\n            }\n        }\n        return ids;\n    };\n    // Call this method to ensure the given root ID remains in the cache after\n    // garbage collection, along with its transitive child entities. Note that\n    // the cache automatically retains all directly written entities. By default,\n    // the retainment persists after optimistic updates are removed. Pass true\n    // for the optimistic argument if you would prefer for the retainment to be\n    // discarded when the top-most optimistic layer is removed. Returns the\n    // resulting (non-negative) retainment count.\n    InMemoryCache.prototype.retain = function(rootId, optimistic) {\n        return (optimistic ? this.optimisticData : this.data).retain(rootId);\n    };\n    // Call this method to undo the effect of the retain method, above. Once the\n    // retainment count falls to zero, the given ID will no longer be preserved\n    // during garbage collection, though it may still be preserved by other safe\n    // entities that refer to it. Returns the resulting (non-negative) retainment\n    // count, in case that's useful.\n    InMemoryCache.prototype.release = function(rootId, optimistic) {\n        return (optimistic ? this.optimisticData : this.data).release(rootId);\n    };\n    // Returns the canonical ID for a given StoreObject, obeying typePolicies\n    // and keyFields (and dataIdFromObject, if you still use that). At minimum,\n    // the object must contain a __typename and any primary key fields required\n    // to identify entities of that type. If you pass a query result object, be\n    // sure that none of the primary key fields have been renamed by aliasing.\n    // If you pass a Reference object, its __ref ID string will be returned.\n    InMemoryCache.prototype.identify = function(object) {\n        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_17__.isReference)(object)) return object.__ref;\n        try {\n            return this.policies.identify(object)[0];\n        } catch (e) {\n            globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(e);\n        }\n    };\n    InMemoryCache.prototype.evict = function(options) {\n        if (!options.id) {\n            if (_helpers_js__WEBPACK_IMPORTED_MODULE_8__.hasOwn.call(options, \"id\")) {\n                // See comment in modify method about why we return false when\n                // options.id exists but is falsy/undefined.\n                return false;\n            }\n            options = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, options), {\n                id: \"ROOT_QUERY\"\n            });\n        }\n        try {\n            // It's unlikely that the eviction will end up invoking any other\n            // cache update operations while it's running, but {in,de}crementing\n            // this.txCount still seems like a good idea, for uniformity with\n            // the other update methods.\n            ++this.txCount;\n            // Pass this.data as a limit on the depth of the eviction, so evictions\n            // during optimistic updates (when this.data is temporarily set equal to\n            // this.optimisticData) do not escape their optimistic Layer.\n            return this.optimisticData.evict(options, this.data);\n        } finally{\n            if (!--this.txCount && options.broadcast !== false) {\n                this.broadcastWatches();\n            }\n        }\n    };\n    InMemoryCache.prototype.reset = function(options) {\n        var _this = this;\n        this.init();\n        _utilities_index_js__WEBPACK_IMPORTED_MODULE_14__.canonicalStringify.reset();\n        if (options && options.discardWatches) {\n            // Similar to what happens in the unsubscribe function returned by\n            // cache.watch, applied to all current watches.\n            this.watches.forEach(function(watch) {\n                return _this.maybeBroadcastWatch.forget(watch);\n            });\n            this.watches.clear();\n            (0,_reactiveVars_js__WEBPACK_IMPORTED_MODULE_6__.forgetCache)(this);\n        } else {\n            // Calling this.init() above unblocks all maybeBroadcastWatch caching, so\n            // this.broadcastWatches() triggers a broadcast to every current watcher\n            // (letting them know their data is now missing). This default behavior is\n            // convenient because it means the watches do not have to be manually\n            // reestablished after resetting the cache. To prevent this broadcast and\n            // cancel all watches, pass true for options.discardWatches.\n            this.broadcastWatches();\n        }\n        return Promise.resolve();\n    };\n    InMemoryCache.prototype.removeOptimistic = function(idToRemove) {\n        var newOptimisticData = this.optimisticData.removeLayer(idToRemove);\n        if (newOptimisticData !== this.optimisticData) {\n            this.optimisticData = newOptimisticData;\n            this.broadcastWatches();\n        }\n    };\n    InMemoryCache.prototype.batch = function(options) {\n        var _this = this;\n        var update = options.update, _a = options.optimistic, optimistic = _a === void 0 ? true : _a, removeOptimistic = options.removeOptimistic, onWatchUpdated = options.onWatchUpdated;\n        var updateResult;\n        var perform = function(layer) {\n            var _a = _this, data = _a.data, optimisticData = _a.optimisticData;\n            ++_this.txCount;\n            if (layer) {\n                _this.data = _this.optimisticData = layer;\n            }\n            try {\n                return updateResult = update(_this);\n            } finally{\n                --_this.txCount;\n                _this.data = data;\n                _this.optimisticData = optimisticData;\n            }\n        };\n        var alreadyDirty = new Set();\n        if (onWatchUpdated && !this.txCount) {\n            // If an options.onWatchUpdated callback is provided, we want to call it\n            // with only the Cache.WatchOptions objects affected by options.update,\n            // but there might be dirty watchers already waiting to be broadcast that\n            // have nothing to do with the update. To prevent including those watchers\n            // in the post-update broadcast, we perform this initial broadcast to\n            // collect the dirty watchers, so we can re-dirty them later, after the\n            // post-update broadcast, allowing them to receive their pending\n            // broadcasts the next time broadcastWatches is called, just as they would\n            // if we never called cache.batch.\n            this.broadcastWatches((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, options), {\n                onWatchUpdated: function(watch) {\n                    alreadyDirty.add(watch);\n                    return false;\n                }\n            }));\n        }\n        if (typeof optimistic === \"string\") {\n            // Note that there can be multiple layers with the same optimistic ID.\n            // When removeOptimistic(id) is called for that id, all matching layers\n            // will be removed, and the remaining layers will be reapplied.\n            this.optimisticData = this.optimisticData.addLayer(optimistic, perform);\n        } else if (optimistic === false) {\n            // Ensure both this.data and this.optimisticData refer to the root\n            // (non-optimistic) layer of the cache during the update. Note that\n            // this.data could be a Layer if we are currently executing an optimistic\n            // update function, but otherwise will always be an EntityStore.Root\n            // instance.\n            perform(this.data);\n        } else {\n            // Otherwise, leave this.data and this.optimisticData unchanged and run\n            // the update with broadcast batching.\n            perform();\n        }\n        if (typeof removeOptimistic === \"string\") {\n            this.optimisticData = this.optimisticData.removeLayer(removeOptimistic);\n        }\n        // Note: if this.txCount > 0, then alreadyDirty.size === 0, so this code\n        // takes the else branch and calls this.broadcastWatches(options), which\n        // does nothing when this.txCount > 0.\n        if (onWatchUpdated && alreadyDirty.size) {\n            this.broadcastWatches((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, options), {\n                onWatchUpdated: function(watch, diff) {\n                    var result = onWatchUpdated.call(this, watch, diff);\n                    if (result !== false) {\n                        // Since onWatchUpdated did not return false, this diff is\n                        // about to be broadcast to watch.callback, so we don't need\n                        // to re-dirty it with the other alreadyDirty watches below.\n                        alreadyDirty.delete(watch);\n                    }\n                    return result;\n                }\n            }));\n            // Silently re-dirty any watches that were already dirty before the update\n            // was performed, and were not broadcast just now.\n            if (alreadyDirty.size) {\n                alreadyDirty.forEach(function(watch) {\n                    return _this.maybeBroadcastWatch.dirty(watch);\n                });\n            }\n        } else {\n            // If alreadyDirty is empty or we don't have an onWatchUpdated\n            // function, we don't need to go to the trouble of wrapping\n            // options.onWatchUpdated.\n            this.broadcastWatches(options);\n        }\n        return updateResult;\n    };\n    InMemoryCache.prototype.performTransaction = function(update, optimisticId) {\n        return this.batch({\n            update: update,\n            optimistic: optimisticId || optimisticId !== null\n        });\n    };\n    InMemoryCache.prototype.transformDocument = function(document) {\n        return this.addTypenameToDocument(this.addFragmentsToDocument(document));\n    };\n    InMemoryCache.prototype.fragmentMatches = function(fragment, typename) {\n        return this.policies.fragmentMatches(fragment, typename);\n    };\n    InMemoryCache.prototype.lookupFragment = function(fragmentName) {\n        var _a;\n        return ((_a = this.config.fragments) === null || _a === void 0 ? void 0 : _a.lookup(fragmentName)) || null;\n    };\n    InMemoryCache.prototype.broadcastWatches = function(options) {\n        var _this = this;\n        if (!this.txCount) {\n            this.watches.forEach(function(c) {\n                return _this.maybeBroadcastWatch(c, options);\n            });\n        }\n    };\n    InMemoryCache.prototype.addFragmentsToDocument = function(document) {\n        var fragments = this.config.fragments;\n        return fragments ? fragments.transform(document) : document;\n    };\n    InMemoryCache.prototype.addTypenameToDocument = function(document) {\n        if (this.addTypename) {\n            return this.addTypenameTransform.transformDocument(document);\n        }\n        return document;\n    };\n    // This method is wrapped by maybeBroadcastWatch, which is called by\n    // broadcastWatches, so that we compute and broadcast results only when\n    // the data that would be broadcast might have changed. It would be\n    // simpler to check for changes after recomputing a result but before\n    // broadcasting it, but this wrapping approach allows us to skip both\n    // the recomputation and the broadcast, in most cases.\n    InMemoryCache.prototype.broadcastWatch = function(c, options) {\n        var _this = this;\n        var lastDiff = c.lastDiff;\n        // Both WatchOptions and DiffOptions extend ReadOptions, and DiffOptions\n        // currently requires no additional properties, so we can use c (a\n        // WatchOptions object) as DiffOptions, without having to allocate a new\n        // object, and without having to enumerate the relevant properties (query,\n        // variables, etc.) explicitly. There will be some additional properties\n        // (lastDiff, callback, etc.), but cache.diff ignores them.\n        var diff = (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_7__.muteDeprecations)(\"canonizeResults\", function() {\n            return _this.diff(c);\n        });\n        if (options) {\n            if (c.optimistic && typeof options.optimistic === \"string\") {\n                diff.fromOptimisticTransaction = true;\n            }\n            if (options.onWatchUpdated && options.onWatchUpdated.call(this, c, diff, lastDiff) === false) {\n                // Returning false from the onWatchUpdated callback will prevent\n                // calling c.callback(diff) for this watcher.\n                return;\n            }\n        }\n        if (!lastDiff || !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_2__.equal)(lastDiff.result, diff.result)) {\n            c.callback(c.lastDiff = diff, lastDiff);\n        }\n    };\n    return InMemoryCache;\n}(_core_cache_js__WEBPACK_IMPORTED_MODULE_18__.ApolloCache);\n\nif (globalThis.__DEV__ !== false) {\n    InMemoryCache.prototype.getMemoryInternals = _utilities_caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_19__.getInMemoryCacheMemoryInternals;\n} //# sourceMappingURL=inMemoryCache.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/cache/inmemory/inMemoryCache.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/cache/inmemory/key-extractor.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@apollo/client/cache/inmemory/key-extractor.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   collectSpecifierPaths: () => (/* binding */ collectSpecifierPaths),\n/* harmony export */   extractKeyPath: () => (/* binding */ extractKeyPath),\n/* harmony export */   getSpecifierPaths: () => (/* binding */ getSpecifierPaths),\n/* harmony export */   keyArgsFnFromSpecifier: () => (/* binding */ keyArgsFnFromSpecifier),\n/* harmony export */   keyFieldsFnFromSpecifier: () => (/* binding */ keyFieldsFnFromSpecifier)\n/* harmony export */ });\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/mergeDeep.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/objects.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/helpers.js\");\n\n\n\n// Mapping from JSON-encoded KeySpecifier strings to associated information.\nvar specifierInfoCache = Object.create(null);\nfunction lookupSpecifierInfo(spec) {\n    // It's safe to encode KeySpecifier arrays with JSON.stringify, since they're\n    // just arrays of strings or nested KeySpecifier arrays, and the order of the\n    // array elements is important (and suitably preserved by JSON.stringify).\n    var cacheKey = JSON.stringify(spec);\n    return specifierInfoCache[cacheKey] || (specifierInfoCache[cacheKey] = Object.create(null));\n}\nfunction keyFieldsFnFromSpecifier(specifier) {\n    var info = lookupSpecifierInfo(specifier);\n    return info.keyFieldsFn || (info.keyFieldsFn = function(object, context) {\n        var extract = function(from, key) {\n            return context.readField(key, from);\n        };\n        var keyObject = context.keyObject = collectSpecifierPaths(specifier, function(schemaKeyPath) {\n            var extracted = extractKeyPath(context.storeObject, schemaKeyPath, // Using context.readField to extract paths from context.storeObject\n            // allows the extraction to see through Reference objects and respect\n            // custom read functions.\n            extract);\n            if (extracted === void 0 && object !== context.storeObject && _helpers_js__WEBPACK_IMPORTED_MODULE_1__.hasOwn.call(object, schemaKeyPath[0])) {\n                // If context.storeObject fails to provide a value for the requested\n                // path, fall back to the raw result object, if it has a top-level key\n                // matching the first key in the path (schemaKeyPath[0]). This allows\n                // key fields included in the written data to be saved in the cache\n                // even if they are not selected explicitly in context.selectionSet.\n                // Not being mentioned by context.selectionSet is convenient here,\n                // since it means these extra fields cannot be affected by field\n                // aliasing, which is why we can use extractKey instead of\n                // context.readField for this extraction.\n                extracted = extractKeyPath(object, schemaKeyPath, extractKey);\n            }\n            (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(extracted !== void 0, 5, schemaKeyPath.join(\".\"), object);\n            return extracted;\n        });\n        return \"\".concat(context.typename, \":\").concat(JSON.stringify(keyObject));\n    });\n}\n// The keyArgs extraction process is roughly analogous to keyFields extraction,\n// but there are no aliases involved, missing fields are tolerated (by merely\n// omitting them from the key), and drawing from field.directives or variables\n// is allowed (in addition to drawing from the field's arguments object).\n// Concretely, these differences mean passing a different key path extractor\n// function to collectSpecifierPaths, reusing the shared extractKeyPath helper\n// wherever possible.\nfunction keyArgsFnFromSpecifier(specifier) {\n    var info = lookupSpecifierInfo(specifier);\n    return info.keyArgsFn || (info.keyArgsFn = function(args, _a) {\n        var field = _a.field, variables = _a.variables, fieldName = _a.fieldName;\n        var collected = collectSpecifierPaths(specifier, function(keyPath) {\n            var firstKey = keyPath[0];\n            var firstChar = firstKey.charAt(0);\n            if (firstChar === \"@\") {\n                if (field && (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.isNonEmptyArray)(field.directives)) {\n                    var directiveName_1 = firstKey.slice(1);\n                    // If the directive appears multiple times, only the first\n                    // occurrence's arguments will be used. TODO Allow repetition?\n                    // TODO Cache this work somehow, a la aliasMap?\n                    var d = field.directives.find(function(d) {\n                        return d.name.value === directiveName_1;\n                    });\n                    // Fortunately argumentsObjectFromField works for DirectiveNode!\n                    var directiveArgs = d && (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.argumentsObjectFromField)(d, variables);\n                    // For directives without arguments (d defined, but directiveArgs ===\n                    // null), the presence or absence of the directive still counts as\n                    // part of the field key, so we return null in those cases. If no\n                    // directive with this name was found for this field (d undefined and\n                    // thus directiveArgs undefined), we return undefined, which causes\n                    // this value to be omitted from the key object returned by\n                    // collectSpecifierPaths.\n                    return directiveArgs && extractKeyPath(directiveArgs, // If keyPath.length === 1, this code calls extractKeyPath with an\n                    // empty path, which works because it uses directiveArgs as the\n                    // extracted value.\n                    keyPath.slice(1));\n                }\n                // If the key started with @ but there was no corresponding directive,\n                // we want to omit this value from the key object, not fall through to\n                // treating @whatever as a normal argument name.\n                return;\n            }\n            if (firstChar === \"$\") {\n                var variableName = firstKey.slice(1);\n                if (variables && _helpers_js__WEBPACK_IMPORTED_MODULE_1__.hasOwn.call(variables, variableName)) {\n                    var varKeyPath = keyPath.slice(0);\n                    varKeyPath[0] = variableName;\n                    return extractKeyPath(variables, varKeyPath);\n                }\n                // If the key started with $ but there was no corresponding variable, we\n                // want to omit this value from the key object, not fall through to\n                // treating $whatever as a normal argument name.\n                return;\n            }\n            if (args) {\n                return extractKeyPath(args, keyPath);\n            }\n        });\n        var suffix = JSON.stringify(collected);\n        // If no arguments were passed to this field, and it didn't have any other\n        // field key contributions from directives or variables, hide the empty\n        // :{} suffix from the field key. However, a field passed no arguments can\n        // still end up with a non-empty :{...} suffix if its key configuration\n        // refers to directives or variables.\n        if (args || suffix !== \"{}\") {\n            fieldName += \":\" + suffix;\n        }\n        return fieldName;\n    });\n}\nfunction collectSpecifierPaths(specifier, extractor) {\n    // For each path specified by specifier, invoke the extractor, and repeatedly\n    // merge the results together, with appropriate ancestor context.\n    var merger = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.DeepMerger();\n    return getSpecifierPaths(specifier).reduce(function(collected, path) {\n        var _a;\n        var toMerge = extractor(path);\n        if (toMerge !== void 0) {\n            // This path is not expected to contain array indexes, so the toMerge\n            // reconstruction will not contain arrays. TODO Fix this?\n            for(var i = path.length - 1; i >= 0; --i){\n                toMerge = (_a = {}, _a[path[i]] = toMerge, _a);\n            }\n            collected = merger.merge(collected, toMerge);\n        }\n        return collected;\n    }, Object.create(null));\n}\nfunction getSpecifierPaths(spec) {\n    var info = lookupSpecifierInfo(spec);\n    if (!info.paths) {\n        var paths_1 = info.paths = [];\n        var currentPath_1 = [];\n        spec.forEach(function(s, i) {\n            if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.isArray)(s)) {\n                getSpecifierPaths(s).forEach(function(p) {\n                    return paths_1.push(currentPath_1.concat(p));\n                });\n                currentPath_1.length = 0;\n            } else {\n                currentPath_1.push(s);\n                if (!(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.isArray)(spec[i + 1])) {\n                    paths_1.push(currentPath_1.slice(0));\n                    currentPath_1.length = 0;\n                }\n            }\n        });\n    }\n    return info.paths;\n}\nfunction extractKey(object, key) {\n    return object[key];\n}\nfunction extractKeyPath(object, path, extract) {\n    // For each key in path, extract the corresponding child property from obj,\n    // flattening arrays if encountered (uncommon for keyFields and keyArgs, but\n    // possible). The final result of path.reduce is normalized so unexpected leaf\n    // objects have their keys safely sorted. That final result is difficult to\n    // type as anything other than any. You're welcome to try to improve the\n    // return type, but keep in mind extractKeyPath is not a public function\n    // (exported only for testing), so the effort may not be worthwhile unless the\n    // limited set of actual callers (see above) pass arguments that TypeScript\n    // can statically type. If we know only that path is some array of strings\n    // (and not, say, a specific tuple of statically known strings), any (or\n    // possibly unknown) is the honest answer.\n    extract = extract || extractKey;\n    return normalize(path.reduce(function reducer(obj, key) {\n        return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.isArray)(obj) ? obj.map(function(child) {\n            return reducer(child, key);\n        }) : obj && extract(obj, key);\n    }, object));\n}\nfunction normalize(value) {\n    // Usually the extracted value will be a scalar value, since most primary\n    // key fields are scalar, but just in case we get an object or an array, we\n    // need to do some normalization of the order of (nested) keys.\n    if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isNonNullObject)(value)) {\n        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.isArray)(value)) {\n            return value.map(normalize);\n        }\n        return collectSpecifierPaths(Object.keys(value).sort(), function(path) {\n            return extractKeyPath(value, path);\n        });\n    }\n    return value;\n} //# sourceMappingURL=key-extractor.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/cache/inmemory/key-extractor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/cache/inmemory/object-canon.js":
/*!********************************************************************!*\
  !*** ./node_modules/@apollo/client/cache/inmemory/object-canon.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ObjectCanon: () => (/* binding */ ObjectCanon)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _wry_trie__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wry/trie */ \"(ssr)/./node_modules/@wry/trie/lib/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/objects.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n\n\n\n\nfunction shallowCopy(value) {\n    if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.isNonNullObject)(value)) {\n        return (0,_helpers_js__WEBPACK_IMPORTED_MODULE_2__.isArray)(value) ? value.slice(0) : (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({\n            __proto__: Object.getPrototypeOf(value)\n        }, value);\n    }\n    return value;\n}\n// When programmers talk about the \"canonical form\" of an object, they\n// usually have the following meaning in mind, which I've copied from\n// https://en.wiktionary.org/wiki/canonical_form:\n//\n// 1. A standard or normal presentation of a mathematical entity [or\n//    object]. A canonical form is an element of a set of representatives\n//    of equivalence classes of forms such that there is a function or\n//    procedure which projects every element of each equivalence class\n//    onto that one element, the canonical form of that equivalence\n//    class. The canonical form is expected to be simpler than the rest of\n//    the forms in some way.\n//\n// That's a long-winded way of saying any two objects that have the same\n// canonical form may be considered equivalent, even if they are !==,\n// which usually means the objects are structurally equivalent (deeply\n// equal), but don't necessarily use the same memory.\n//\n// Like a literary or musical canon, this ObjectCanon class represents a\n// collection of unique canonical items (JavaScript objects), with the\n// important property that canon.admit(a) === canon.admit(b) if a and b\n// are deeply equal to each other. In terms of the definition above, the\n// canon.admit method is the \"function or procedure which projects every\"\n// object \"onto that one element, the canonical form.\"\n//\n// In the worst case, the canonicalization process may involve looking at\n// every property in the provided object tree, so it takes the same order\n// of time as deep equality checking. Fortunately, already-canonicalized\n// objects are returned immediately from canon.admit, so the presence of\n// canonical subtrees tends to speed up canonicalization.\n//\n// Since consumers of canonical objects can check for deep equality in\n// constant time, canonicalizing cache results can massively improve the\n// performance of application code that skips re-rendering unchanged\n// results, such as \"pure\" UI components in a framework like React.\n//\n// Of course, since canonical objects may be shared widely between\n// unrelated consumers, it's important to think of them as immutable, even\n// though they are not actually frozen with Object.freeze in production,\n// due to the extra performance overhead that comes with frozen objects.\n//\n// Custom scalar objects whose internal class name is neither Array nor\n// Object can be included safely in the admitted tree, but they will not\n// be replaced with a canonical version (to put it another way, they are\n// assumed to be canonical already).\n//\n// If we ignore custom objects, no detection of cycles or repeated object\n// references is currently required by the StoreReader class, since\n// GraphQL result objects are JSON-serializable trees (and thus contain\n// neither cycles nor repeated subtrees), so we can avoid the complexity\n// of keeping track of objects we've already seen during the recursion of\n// the admit method.\n//\n// In the future, we may consider adding additional cases to the switch\n// statement to handle other common object types, such as \"[object Date]\"\n// objects, as needed.\nvar ObjectCanon = /** @class */ function() {\n    function ObjectCanon() {\n        // Set of all canonical objects this ObjectCanon has admitted, allowing\n        // canon.admit to return previously-canonicalized objects immediately.\n        this.known = new (_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.canUseWeakSet ? WeakSet : Set)();\n        // Efficient storage/lookup structure for canonical objects.\n        this.pool = new _wry_trie__WEBPACK_IMPORTED_MODULE_0__.Trie(_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.canUseWeakMap);\n        // Make the ObjectCanon assume this value has already been\n        // canonicalized.\n        this.passes = new WeakMap();\n        // Arrays that contain the same elements in a different order can share\n        // the same SortedKeysInfo object, to save memory.\n        this.keysByJSON = new Map();\n        // This has to come last because it depends on keysByJSON.\n        this.empty = this.admit({});\n    }\n    ObjectCanon.prototype.isKnown = function(value) {\n        return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.isNonNullObject)(value) && this.known.has(value);\n    };\n    ObjectCanon.prototype.pass = function(value) {\n        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.isNonNullObject)(value)) {\n            var copy = shallowCopy(value);\n            this.passes.set(copy, value);\n            return copy;\n        }\n        return value;\n    };\n    ObjectCanon.prototype.admit = function(value) {\n        var _this = this;\n        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.isNonNullObject)(value)) {\n            var original = this.passes.get(value);\n            if (original) return original;\n            var proto = Object.getPrototypeOf(value);\n            switch(proto){\n                case Array.prototype:\n                    {\n                        if (this.known.has(value)) return value;\n                        var array = value.map(this.admit, this);\n                        // Arrays are looked up in the Trie using their recursively\n                        // canonicalized elements, and the known version of the array is\n                        // preserved as node.array.\n                        var node = this.pool.lookupArray(array);\n                        if (!node.array) {\n                            this.known.add(node.array = array);\n                            // Since canonical arrays may be shared widely between\n                            // unrelated consumers, it's important to regard them as\n                            // immutable, even if they are not frozen in production.\n                            if (globalThis.__DEV__ !== false) {\n                                Object.freeze(array);\n                            }\n                        }\n                        return node.array;\n                    }\n                case null:\n                case Object.prototype:\n                    {\n                        if (this.known.has(value)) return value;\n                        var proto_1 = Object.getPrototypeOf(value);\n                        var array_1 = [\n                            proto_1\n                        ];\n                        var keys = this.sortedKeys(value);\n                        array_1.push(keys.json);\n                        var firstValueIndex_1 = array_1.length;\n                        keys.sorted.forEach(function(key) {\n                            array_1.push(_this.admit(value[key]));\n                        });\n                        // Objects are looked up in the Trie by their prototype (which\n                        // is *not* recursively canonicalized), followed by a JSON\n                        // representation of their (sorted) keys, followed by the\n                        // sequence of recursively canonicalized values corresponding to\n                        // those keys. To keep the final results unambiguous with other\n                        // sequences (such as arrays that just happen to contain [proto,\n                        // keys.json, value1, value2, ...]), the known version of the\n                        // object is stored as node.object.\n                        var node = this.pool.lookupArray(array_1);\n                        if (!node.object) {\n                            var obj_1 = node.object = Object.create(proto_1);\n                            this.known.add(obj_1);\n                            keys.sorted.forEach(function(key, i) {\n                                obj_1[key] = array_1[firstValueIndex_1 + i];\n                            });\n                            // Since canonical objects may be shared widely between\n                            // unrelated consumers, it's important to regard them as\n                            // immutable, even if they are not frozen in production.\n                            if (globalThis.__DEV__ !== false) {\n                                Object.freeze(obj_1);\n                            }\n                        }\n                        return node.object;\n                    }\n            }\n        }\n        return value;\n    };\n    // It's worthwhile to cache the sorting of arrays of strings, since the\n    // same initial unsorted arrays tend to be encountered many times.\n    // Fortunately, we can reuse the Trie machinery to look up the sorted\n    // arrays in linear time (which is faster than sorting large arrays).\n    ObjectCanon.prototype.sortedKeys = function(obj) {\n        var keys = Object.keys(obj);\n        var node = this.pool.lookupArray(keys);\n        if (!node.keys) {\n            keys.sort();\n            var json = JSON.stringify(keys);\n            if (!(node.keys = this.keysByJSON.get(json))) {\n                this.keysByJSON.set(json, node.keys = {\n                    sorted: keys,\n                    json: json\n                });\n            }\n        }\n        return node.keys;\n    };\n    return ObjectCanon;\n}();\n //# sourceMappingURL=object-canon.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/cache/inmemory/object-canon.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/cache/inmemory/policies.js":
/*!****************************************************************!*\
  !*** ./node_modules/@apollo/client/cache/inmemory/policies.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Policies: () => (/* binding */ Policies),\n/* harmony export */   normalizeReadFieldOptions: () => (/* binding */ normalizeReadFieldOptions)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/stringifyForDisplay.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/objects.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/helpers.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n/* harmony import */ var _reactiveVars_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./reactiveVars.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/reactiveVars.js\");\n/* harmony import */ var _key_extractor_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./key-extractor.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/key-extractor.js\");\n/* harmony import */ var _masking_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../masking/index.js */ \"(ssr)/./node_modules/@apollo/client/masking/utils.js\");\n\n\n\n\n\n\n\nfunction argsFromFieldSpecifier(spec) {\n    return spec.args !== void 0 ? spec.args : spec.field ? (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.argumentsObjectFromField)(spec.field, spec.variables) : null;\n}\nvar nullKeyFieldsFn = function() {\n    return void 0;\n};\nvar simpleKeyArgsFn = function(_args, context) {\n    return context.fieldName;\n};\n// These merge functions can be selected by specifying merge:true or\n// merge:false in a field policy.\nvar mergeTrueFn = function(existing, incoming, _a) {\n    var mergeObjects = _a.mergeObjects;\n    return mergeObjects(existing, incoming);\n};\nvar mergeFalseFn = function(_, incoming) {\n    return incoming;\n};\nvar Policies = /** @class */ function() {\n    function Policies(config) {\n        this.config = config;\n        this.typePolicies = Object.create(null);\n        this.toBeAdded = Object.create(null);\n        // Map from subtype names to sets of supertype names. Note that this\n        // representation inverts the structure of possibleTypes (whose keys are\n        // supertypes and whose values are arrays of subtypes) because it tends\n        // to be much more efficient to search upwards than downwards.\n        this.supertypeMap = new Map();\n        // Any fuzzy subtypes specified by possibleTypes will be converted to\n        // RegExp objects and recorded here. Every key of this map can also be\n        // found in supertypeMap. In many cases this Map will be empty, which\n        // means no fuzzy subtype checking will happen in fragmentMatches.\n        this.fuzzySubtypes = new Map();\n        this.rootIdsByTypename = Object.create(null);\n        this.rootTypenamesById = Object.create(null);\n        this.usingPossibleTypes = false;\n        this.config = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({\n            dataIdFromObject: _helpers_js__WEBPACK_IMPORTED_MODULE_3__.defaultDataIdFromObject\n        }, config);\n        this.cache = this.config.cache;\n        this.setRootTypename(\"Query\");\n        this.setRootTypename(\"Mutation\");\n        this.setRootTypename(\"Subscription\");\n        if (config.possibleTypes) {\n            this.addPossibleTypes(config.possibleTypes);\n        }\n        if (config.typePolicies) {\n            this.addTypePolicies(config.typePolicies);\n        }\n    }\n    Policies.prototype.identify = function(object, partialContext) {\n        var _a;\n        var policies = this;\n        var typename = partialContext && (partialContext.typename || ((_a = partialContext.storeObject) === null || _a === void 0 ? void 0 : _a.__typename)) || object.__typename;\n        // It should be possible to write root Query fields with writeFragment,\n        // using { __typename: \"Query\", ... } as the data, but it does not make\n        // sense to allow the same identification behavior for the Mutation and\n        // Subscription types, since application code should never be writing\n        // directly to (or reading directly from) those root objects.\n        if (typename === this.rootTypenamesById.ROOT_QUERY) {\n            return [\n                \"ROOT_QUERY\"\n            ];\n        }\n        // Default context.storeObject to object if not otherwise provided.\n        var storeObject = partialContext && partialContext.storeObject || object;\n        var context = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, partialContext), {\n            typename: typename,\n            storeObject: storeObject,\n            readField: partialContext && partialContext.readField || function() {\n                var options = normalizeReadFieldOptions(arguments, storeObject);\n                return policies.readField(options, {\n                    store: policies.cache[\"data\"],\n                    variables: options.variables\n                });\n            }\n        });\n        var id;\n        var policy = typename && this.getTypePolicy(typename);\n        var keyFn = policy && policy.keyFn || this.config.dataIdFromObject;\n        _masking_index_js__WEBPACK_IMPORTED_MODULE_4__.disableWarningsSlot.withValue(true, function() {\n            while(keyFn){\n                var specifierOrId = keyFn((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, object), storeObject), context);\n                if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.isArray)(specifierOrId)) {\n                    keyFn = (0,_key_extractor_js__WEBPACK_IMPORTED_MODULE_6__.keyFieldsFnFromSpecifier)(specifierOrId);\n                } else {\n                    id = specifierOrId;\n                    break;\n                }\n            }\n        });\n        id = id ? String(id) : void 0;\n        return context.keyObject ? [\n            id,\n            context.keyObject\n        ] : [\n            id\n        ];\n    };\n    Policies.prototype.addTypePolicies = function(typePolicies) {\n        var _this = this;\n        Object.keys(typePolicies).forEach(function(typename) {\n            var _a = typePolicies[typename], queryType = _a.queryType, mutationType = _a.mutationType, subscriptionType = _a.subscriptionType, incoming = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__rest)(_a, [\n                \"queryType\",\n                \"mutationType\",\n                \"subscriptionType\"\n            ]);\n            // Though {query,mutation,subscription}Type configurations are rare,\n            // it's important to call setRootTypename as early as possible,\n            // since these configurations should apply consistently for the\n            // entire lifetime of the cache. Also, since only one __typename can\n            // qualify as one of these root types, these three properties cannot\n            // be inherited, unlike the rest of the incoming properties. That\n            // restriction is convenient, because the purpose of this.toBeAdded\n            // is to delay the processing of type/field policies until the first\n            // time they're used, allowing policies to be added in any order as\n            // long as all relevant policies (including policies for supertypes)\n            // have been added by the time a given policy is used for the first\n            // time. In other words, since inheritance doesn't matter for these\n            // properties, there's also no need to delay their processing using\n            // the this.toBeAdded queue.\n            if (queryType) _this.setRootTypename(\"Query\", typename);\n            if (mutationType) _this.setRootTypename(\"Mutation\", typename);\n            if (subscriptionType) _this.setRootTypename(\"Subscription\", typename);\n            if (_helpers_js__WEBPACK_IMPORTED_MODULE_3__.hasOwn.call(_this.toBeAdded, typename)) {\n                _this.toBeAdded[typename].push(incoming);\n            } else {\n                _this.toBeAdded[typename] = [\n                    incoming\n                ];\n            }\n        });\n    };\n    Policies.prototype.updateTypePolicy = function(typename, incoming, existingFieldPolicies) {\n        var existing = this.getTypePolicy(typename);\n        var keyFields = incoming.keyFields, fields = incoming.fields;\n        function setMerge(existing, merge) {\n            existing.merge = typeof merge === \"function\" ? merge : merge === true ? mergeTrueFn : merge === false ? mergeFalseFn : existing.merge;\n        }\n        // Type policies can define merge functions, as an alternative to\n        // using field policies to merge child objects.\n        setMerge(existing, incoming.merge);\n        existing.keyFn = // Pass false to disable normalization for this typename.\n        keyFields === false ? nullKeyFieldsFn : (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.isArray)(keyFields) ? (0,_key_extractor_js__WEBPACK_IMPORTED_MODULE_6__.keyFieldsFnFromSpecifier)(keyFields) : typeof keyFields === \"function\" ? keyFields : existing.keyFn;\n        if (fields) {\n            Object.keys(fields).forEach(function(fieldName) {\n                var existing = existingFieldPolicies[fieldName];\n                // Field policy inheritance is atomic/shallow: you can't inherit a\n                // field policy and then override just its read function, since read\n                // and merge functions often need to cooperate, so changing only one\n                // of them would be a recipe for inconsistency.\n                // So here we avoid merging an inherited field policy with an updated one.\n                if (!existing || (existing === null || existing === void 0 ? void 0 : existing.typename) !== typename) {\n                    existing = existingFieldPolicies[fieldName] = {\n                        typename: typename\n                    };\n                }\n                var incoming = fields[fieldName];\n                if (typeof incoming === \"function\") {\n                    existing.read = incoming;\n                } else {\n                    var keyArgs = incoming.keyArgs, read = incoming.read, merge = incoming.merge;\n                    existing.keyFn = // Pass false to disable argument-based differentiation of\n                    // field identities.\n                    keyArgs === false ? simpleKeyArgsFn : (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.isArray)(keyArgs) ? (0,_key_extractor_js__WEBPACK_IMPORTED_MODULE_6__.keyArgsFnFromSpecifier)(keyArgs) : typeof keyArgs === \"function\" ? keyArgs : existing.keyFn;\n                    if (typeof read === \"function\") {\n                        existing.read = read;\n                    }\n                    setMerge(existing, merge);\n                }\n                if (existing.read && existing.merge) {\n                    // If we have both a read and a merge function, assume\n                    // keyArgs:false, because read and merge together can take\n                    // responsibility for interpreting arguments in and out. This\n                    // default assumption can always be overridden by specifying\n                    // keyArgs explicitly in the FieldPolicy.\n                    existing.keyFn = existing.keyFn || simpleKeyArgsFn;\n                }\n            });\n        }\n    };\n    Policies.prototype.setRootTypename = function(which, typename) {\n        if (typename === void 0) {\n            typename = which;\n        }\n        var rootId = \"ROOT_\" + which.toUpperCase();\n        var old = this.rootTypenamesById[rootId];\n        if (typename !== old) {\n            (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(!old || old === which, 6, which);\n            // First, delete any old __typename associated with this rootId from\n            // rootIdsByTypename.\n            if (old) delete this.rootIdsByTypename[old];\n            // Now make this the only __typename that maps to this rootId.\n            this.rootIdsByTypename[typename] = rootId;\n            // Finally, update the __typename associated with this rootId.\n            this.rootTypenamesById[rootId] = typename;\n        }\n    };\n    Policies.prototype.addPossibleTypes = function(possibleTypes) {\n        var _this = this;\n        this.usingPossibleTypes = true;\n        Object.keys(possibleTypes).forEach(function(supertype) {\n            // Make sure all types have an entry in this.supertypeMap, even if\n            // their supertype set is empty, so we can return false immediately\n            // from policies.fragmentMatches for unknown supertypes.\n            _this.getSupertypeSet(supertype, true);\n            possibleTypes[supertype].forEach(function(subtype) {\n                _this.getSupertypeSet(subtype, true).add(supertype);\n                var match = subtype.match(_helpers_js__WEBPACK_IMPORTED_MODULE_3__.TypeOrFieldNameRegExp);\n                if (!match || match[0] !== subtype) {\n                    // TODO Don't interpret just any invalid typename as a RegExp.\n                    _this.fuzzySubtypes.set(subtype, new RegExp(subtype));\n                }\n            });\n        });\n    };\n    Policies.prototype.getTypePolicy = function(typename) {\n        var _this = this;\n        if (!_helpers_js__WEBPACK_IMPORTED_MODULE_3__.hasOwn.call(this.typePolicies, typename)) {\n            var policy_1 = this.typePolicies[typename] = Object.create(null);\n            policy_1.fields = Object.create(null);\n            // When the TypePolicy for typename is first accessed, instead of\n            // starting with an empty policy object, inherit any properties or\n            // fields from the type policies of the supertypes of typename.\n            //\n            // Any properties or fields defined explicitly within the TypePolicy\n            // for typename will take precedence, and if there are multiple\n            // supertypes, the properties of policies whose types were added\n            // later via addPossibleTypes will take precedence over those of\n            // earlier supertypes. TODO Perhaps we should warn about these\n            // conflicts in development, and recommend defining the property\n            // explicitly in the subtype policy?\n            //\n            // Field policy inheritance is atomic/shallow: you can't inherit a\n            // field policy and then override just its read function, since read\n            // and merge functions often need to cooperate, so changing only one\n            // of them would be a recipe for inconsistency.\n            //\n            // Once the TypePolicy for typename has been accessed, its properties can\n            // still be updated directly using addTypePolicies, but future changes to\n            // inherited supertype policies will not be reflected in this subtype\n            // policy, because this code runs at most once per typename.\n            var supertypes_1 = this.supertypeMap.get(typename);\n            if (!supertypes_1 && this.fuzzySubtypes.size) {\n                // To make the inheritance logic work for unknown typename strings that\n                // may have fuzzy supertypes, we give this typename an empty supertype\n                // set and then populate it with any fuzzy supertypes that match.\n                supertypes_1 = this.getSupertypeSet(typename, true);\n                // This only works for typenames that are directly matched by a fuzzy\n                // supertype. What if there is an intermediate chain of supertypes?\n                // While possible, that situation can only be solved effectively by\n                // specifying the intermediate relationships via possibleTypes, manually\n                // and in a non-fuzzy way.\n                this.fuzzySubtypes.forEach(function(regExp, fuzzy) {\n                    if (regExp.test(typename)) {\n                        // The fuzzy parameter is just the original string version of regExp\n                        // (not a valid __typename string), but we can look up the\n                        // associated supertype(s) in this.supertypeMap.\n                        var fuzzySupertypes = _this.supertypeMap.get(fuzzy);\n                        if (fuzzySupertypes) {\n                            fuzzySupertypes.forEach(function(supertype) {\n                                return supertypes_1.add(supertype);\n                            });\n                        }\n                    }\n                });\n            }\n            if (supertypes_1 && supertypes_1.size) {\n                supertypes_1.forEach(function(supertype) {\n                    var _a = _this.getTypePolicy(supertype), fields = _a.fields, rest = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__rest)(_a, [\n                        \"fields\"\n                    ]);\n                    Object.assign(policy_1, rest);\n                    Object.assign(policy_1.fields, fields);\n                });\n            }\n        }\n        var inbox = this.toBeAdded[typename];\n        if (inbox && inbox.length) {\n            // Merge the pending policies into this.typePolicies, in the order they\n            // were originally passed to addTypePolicy.\n            inbox.splice(0).forEach(function(policy) {\n                _this.updateTypePolicy(typename, policy, _this.typePolicies[typename].fields);\n            });\n        }\n        return this.typePolicies[typename];\n    };\n    Policies.prototype.getFieldPolicy = function(typename, fieldName) {\n        if (typename) {\n            return this.getTypePolicy(typename).fields[fieldName];\n        }\n    };\n    Policies.prototype.getSupertypeSet = function(subtype, createIfMissing) {\n        var supertypeSet = this.supertypeMap.get(subtype);\n        if (!supertypeSet && createIfMissing) {\n            this.supertypeMap.set(subtype, supertypeSet = new Set());\n        }\n        return supertypeSet;\n    };\n    Policies.prototype.fragmentMatches = function(fragment, typename, result, variables) {\n        var _this = this;\n        if (!fragment.typeCondition) return true;\n        // If the fragment has a type condition but the object we're matching\n        // against does not have a __typename, the fragment cannot match.\n        if (!typename) return false;\n        var supertype = fragment.typeCondition.name.value;\n        // Common case: fragment type condition and __typename are the same.\n        if (typename === supertype) return true;\n        if (this.usingPossibleTypes && this.supertypeMap.has(supertype)) {\n            var typenameSupertypeSet = this.getSupertypeSet(typename, true);\n            var workQueue_1 = [\n                typenameSupertypeSet\n            ];\n            var maybeEnqueue_1 = function(subtype) {\n                var supertypeSet = _this.getSupertypeSet(subtype, false);\n                if (supertypeSet && supertypeSet.size && workQueue_1.indexOf(supertypeSet) < 0) {\n                    workQueue_1.push(supertypeSet);\n                }\n            };\n            // We need to check fuzzy subtypes only if we encountered fuzzy\n            // subtype strings in addPossibleTypes, and only while writing to\n            // the cache, since that's when selectionSetMatchesResult gives a\n            // strong signal of fragment matching. The StoreReader class calls\n            // policies.fragmentMatches without passing a result object, so\n            // needToCheckFuzzySubtypes is always false while reading.\n            var needToCheckFuzzySubtypes = !!(result && this.fuzzySubtypes.size);\n            var checkingFuzzySubtypes = false;\n            // It's important to keep evaluating workQueue.length each time through\n            // the loop, because the queue can grow while we're iterating over it.\n            for(var i = 0; i < workQueue_1.length; ++i){\n                var supertypeSet = workQueue_1[i];\n                if (supertypeSet.has(supertype)) {\n                    if (!typenameSupertypeSet.has(supertype)) {\n                        if (checkingFuzzySubtypes) {\n                            globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(7, typename, supertype);\n                        }\n                        // Record positive results for faster future lookup.\n                        // Unfortunately, we cannot safely cache negative results,\n                        // because new possibleTypes data could always be added to the\n                        // Policies class.\n                        typenameSupertypeSet.add(supertype);\n                    }\n                    return true;\n                }\n                supertypeSet.forEach(maybeEnqueue_1);\n                if (needToCheckFuzzySubtypes && // Start checking fuzzy subtypes only after exhausting all\n                // non-fuzzy subtypes (after the final iteration of the loop).\n                i === workQueue_1.length - 1 && // We could wait to compare fragment.selectionSet to result\n                // after we verify the supertype, but this check is often less\n                // expensive than that search, and we will have to do the\n                // comparison anyway whenever we find a potential match.\n                (0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.selectionSetMatchesResult)(fragment.selectionSet, result, variables)) {\n                    // We don't always need to check fuzzy subtypes (if no result\n                    // was provided, or !this.fuzzySubtypes.size), but, when we do,\n                    // we only want to check them once.\n                    needToCheckFuzzySubtypes = false;\n                    checkingFuzzySubtypes = true;\n                    // If we find any fuzzy subtypes that match typename, extend the\n                    // workQueue to search through the supertypes of those fuzzy\n                    // subtypes. Otherwise the for-loop will terminate and we'll\n                    // return false below.\n                    this.fuzzySubtypes.forEach(function(regExp, fuzzyString) {\n                        var match = typename.match(regExp);\n                        if (match && match[0] === typename) {\n                            maybeEnqueue_1(fuzzyString);\n                        }\n                    });\n                }\n            }\n        }\n        return false;\n    };\n    Policies.prototype.hasKeyArgs = function(typename, fieldName) {\n        var policy = this.getFieldPolicy(typename, fieldName);\n        return !!(policy && policy.keyFn);\n    };\n    Policies.prototype.getStoreFieldName = function(fieldSpec) {\n        var typename = fieldSpec.typename, fieldName = fieldSpec.fieldName;\n        var policy = this.getFieldPolicy(typename, fieldName);\n        var storeFieldName;\n        var keyFn = policy && policy.keyFn;\n        if (keyFn && typename) {\n            var context = {\n                typename: typename,\n                fieldName: fieldName,\n                field: fieldSpec.field || null,\n                variables: fieldSpec.variables\n            };\n            var args = argsFromFieldSpecifier(fieldSpec);\n            while(keyFn){\n                var specifierOrString = keyFn(args, context);\n                if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.isArray)(specifierOrString)) {\n                    keyFn = (0,_key_extractor_js__WEBPACK_IMPORTED_MODULE_6__.keyArgsFnFromSpecifier)(specifierOrString);\n                } else {\n                    // If the custom keyFn returns a falsy value, fall back to\n                    // fieldName instead.\n                    storeFieldName = specifierOrString || fieldName;\n                    break;\n                }\n            }\n        }\n        if (storeFieldName === void 0) {\n            storeFieldName = fieldSpec.field ? (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.storeKeyNameFromField)(fieldSpec.field, fieldSpec.variables) : (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.getStoreKeyName)(fieldName, argsFromFieldSpecifier(fieldSpec));\n        }\n        // Returning false from a keyArgs function is like configuring\n        // keyArgs: false, but more dynamic.\n        if (storeFieldName === false) {\n            return fieldName;\n        }\n        // Make sure custom field names start with the actual field.name.value\n        // of the field, so we can always figure out which properties of a\n        // StoreObject correspond to which original field names.\n        return fieldName === (0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.fieldNameFromStoreName)(storeFieldName) ? storeFieldName : fieldName + \":\" + storeFieldName;\n    };\n    Policies.prototype.readField = function(options, context) {\n        var objectOrReference = options.from;\n        if (!objectOrReference) return;\n        var nameOrField = options.field || options.fieldName;\n        if (!nameOrField) return;\n        if (options.typename === void 0) {\n            var typename = context.store.getFieldValue(objectOrReference, \"__typename\");\n            if (typename) options.typename = typename;\n        }\n        var storeFieldName = this.getStoreFieldName(options);\n        var fieldName = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.fieldNameFromStoreName)(storeFieldName);\n        var existing = context.store.getFieldValue(objectOrReference, storeFieldName);\n        var policy = this.getFieldPolicy(options.typename, fieldName);\n        var read = policy && policy.read;\n        if (read) {\n            var readOptions = makeFieldFunctionOptions(this, objectOrReference, options, context, context.store.getStorage((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.isReference)(objectOrReference) ? objectOrReference.__ref : objectOrReference, storeFieldName));\n            // Call read(existing, readOptions) with cacheSlot holding this.cache.\n            return _reactiveVars_js__WEBPACK_IMPORTED_MODULE_7__.cacheSlot.withValue(this.cache, read, [\n                existing,\n                readOptions\n            ]);\n        }\n        return existing;\n    };\n    Policies.prototype.getReadFunction = function(typename, fieldName) {\n        var policy = this.getFieldPolicy(typename, fieldName);\n        return policy && policy.read;\n    };\n    Policies.prototype.getMergeFunction = function(parentTypename, fieldName, childTypename) {\n        var policy = this.getFieldPolicy(parentTypename, fieldName);\n        var merge = policy && policy.merge;\n        if (!merge && childTypename) {\n            policy = this.getTypePolicy(childTypename);\n            merge = policy && policy.merge;\n        }\n        return merge;\n    };\n    Policies.prototype.runMergeFunction = function(existing, incoming, _a, context, storage) {\n        var field = _a.field, typename = _a.typename, merge = _a.merge;\n        if (merge === mergeTrueFn) {\n            // Instead of going to the trouble of creating a full\n            // FieldFunctionOptions object and calling mergeTrueFn, we can\n            // simply call mergeObjects, as mergeTrueFn would.\n            return makeMergeObjectsFunction(context.store)(existing, incoming);\n        }\n        if (merge === mergeFalseFn) {\n            // Likewise for mergeFalseFn, whose implementation is even simpler.\n            return incoming;\n        }\n        // If cache.writeQuery or cache.writeFragment was called with\n        // options.overwrite set to true, we still call merge functions, but\n        // the existing data is always undefined, so the merge function will\n        // not attempt to combine the incoming data with the existing data.\n        if (context.overwrite) {\n            existing = void 0;\n        }\n        return merge(existing, incoming, makeFieldFunctionOptions(this, // Unlike options.readField for read functions, we do not fall\n        // back to the current object if no foreignObjOrRef is provided,\n        // because it's not clear what the current object should be for\n        // merge functions: the (possibly undefined) existing object, or\n        // the incoming object? If you think your merge function needs\n        // to read sibling fields in order to produce a new value for\n        // the current field, you might want to rethink your strategy,\n        // because that's a recipe for making merge behavior sensitive\n        // to the order in which fields are written into the cache.\n        // However, readField(name, ref) is useful for merge functions\n        // that need to deduplicate child objects and references.\n        void 0, {\n            typename: typename,\n            fieldName: field.name.value,\n            field: field,\n            variables: context.variables\n        }, context, storage || Object.create(null)));\n    };\n    return Policies;\n}();\n\nfunction makeFieldFunctionOptions(policies, objectOrReference, fieldSpec, context, storage) {\n    var storeFieldName = policies.getStoreFieldName(fieldSpec);\n    var fieldName = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.fieldNameFromStoreName)(storeFieldName);\n    var variables = fieldSpec.variables || context.variables;\n    var _a = context.store, toReference = _a.toReference, canRead = _a.canRead;\n    return {\n        args: argsFromFieldSpecifier(fieldSpec),\n        field: fieldSpec.field || null,\n        fieldName: fieldName,\n        storeFieldName: storeFieldName,\n        variables: variables,\n        isReference: _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.isReference,\n        toReference: toReference,\n        storage: storage,\n        cache: policies.cache,\n        canRead: canRead,\n        readField: function() {\n            return policies.readField(normalizeReadFieldOptions(arguments, objectOrReference, variables), context);\n        },\n        mergeObjects: makeMergeObjectsFunction(context.store)\n    };\n}\nfunction normalizeReadFieldOptions(readFieldArgs, objectOrReference, variables) {\n    var fieldNameOrOptions = readFieldArgs[0], from = readFieldArgs[1], argc = readFieldArgs.length;\n    var options;\n    if (typeof fieldNameOrOptions === \"string\") {\n        options = {\n            fieldName: fieldNameOrOptions,\n            // Default to objectOrReference only when no second argument was\n            // passed for the from parameter, not when undefined is explicitly\n            // passed as the second argument.\n            from: argc > 1 ? from : objectOrReference\n        };\n    } else {\n        options = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, fieldNameOrOptions);\n        // Default to objectOrReference only when fieldNameOrOptions.from is\n        // actually omitted, rather than just undefined.\n        if (!_helpers_js__WEBPACK_IMPORTED_MODULE_3__.hasOwn.call(options, \"from\")) {\n            options.from = objectOrReference;\n        }\n    }\n    if (globalThis.__DEV__ !== false && options.from === void 0) {\n        globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(8, (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.stringifyForDisplay)(Array.from(readFieldArgs)));\n    }\n    if (void 0 === options.variables) {\n        options.variables = variables;\n    }\n    return options;\n}\nfunction makeMergeObjectsFunction(store) {\n    return function mergeObjects(existing, incoming) {\n        if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.isArray)(existing) || (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.isArray)(incoming)) {\n            throw (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(9);\n        }\n        // These dynamic checks are necessary because the parameters of a\n        // custom merge function can easily have the any type, so the type\n        // system cannot always enforce the StoreObject | Reference parameter\n        // types of options.mergeObjects.\n        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isNonNullObject)(existing) && (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isNonNullObject)(incoming)) {\n            var eType = store.getFieldValue(existing, \"__typename\");\n            var iType = store.getFieldValue(incoming, \"__typename\");\n            var typesDiffer = eType && iType && eType !== iType;\n            if (typesDiffer) {\n                return incoming;\n            }\n            if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.isReference)(existing) && (0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.storeValueIsStoreObject)(incoming)) {\n                // Update the normalized EntityStore for the entity identified by\n                // existing.__ref, preferring/overwriting any fields contributed by the\n                // newer incoming StoreObject.\n                store.merge(existing.__ref, incoming);\n                return existing;\n            }\n            if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.storeValueIsStoreObject)(existing) && (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.isReference)(incoming)) {\n                // Update the normalized EntityStore for the entity identified by\n                // incoming.__ref, taking fields from the older existing object only if\n                // those fields are not already present in the newer StoreObject\n                // identified by incoming.__ref.\n                store.merge(existing, incoming.__ref);\n                return incoming;\n            }\n            if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.storeValueIsStoreObject)(existing) && (0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.storeValueIsStoreObject)(incoming)) {\n                return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, existing), incoming);\n            }\n        }\n        return incoming;\n    };\n} //# sourceMappingURL=policies.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/cache/inmemory/policies.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/cache/inmemory/reactiveVars.js":
/*!********************************************************************!*\
  !*** ./node_modules/@apollo/client/cache/inmemory/reactiveVars.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cacheSlot: () => (/* binding */ cacheSlot),\n/* harmony export */   forgetCache: () => (/* binding */ forgetCache),\n/* harmony export */   makeVar: () => (/* binding */ makeVar),\n/* harmony export */   recallCache: () => (/* binding */ recallCache)\n/* harmony export */ });\n/* harmony import */ var optimism__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! optimism */ \"(ssr)/./node_modules/optimism/lib/index.js\");\n\n// Contextual Slot that acquires its value when custom read functions are\n// called in Policies#readField.\nvar cacheSlot = new optimism__WEBPACK_IMPORTED_MODULE_0__.Slot();\nvar cacheInfoMap = new WeakMap();\nfunction getCacheInfo(cache) {\n    var info = cacheInfoMap.get(cache);\n    if (!info) {\n        cacheInfoMap.set(cache, info = {\n            vars: new Set(),\n            dep: (0,optimism__WEBPACK_IMPORTED_MODULE_0__.dep)()\n        });\n    }\n    return info;\n}\nfunction forgetCache(cache) {\n    getCacheInfo(cache).vars.forEach(function(rv) {\n        return rv.forgetCache(cache);\n    });\n}\n// Calling forgetCache(cache) serves to silence broadcasts and allows the\n// cache to be garbage collected. However, the varsByCache WeakMap\n// preserves the set of reactive variables that were previously associated\n// with this cache, which makes it possible to \"recall\" the cache at a\n// later time, by reattaching it to those variables. If the cache has been\n// garbage collected in the meantime, because it is no longer reachable,\n// you won't be able to call recallCache(cache), and the cache will\n// automatically disappear from the varsByCache WeakMap.\nfunction recallCache(cache) {\n    getCacheInfo(cache).vars.forEach(function(rv) {\n        return rv.attachCache(cache);\n    });\n}\nfunction makeVar(value) {\n    var caches = new Set();\n    var listeners = new Set();\n    var rv = function(newValue) {\n        if (arguments.length > 0) {\n            if (value !== newValue) {\n                value = newValue;\n                caches.forEach(function(cache) {\n                    // Invalidate any fields with custom read functions that\n                    // consumed this variable, so query results involving those\n                    // fields will be recomputed the next time we read them.\n                    getCacheInfo(cache).dep.dirty(rv);\n                    // Broadcast changes to any caches that have previously read\n                    // from this variable.\n                    broadcast(cache);\n                });\n                // Finally, notify any listeners added via rv.onNextChange.\n                var oldListeners = Array.from(listeners);\n                listeners.clear();\n                oldListeners.forEach(function(listener) {\n                    return listener(value);\n                });\n            }\n        } else {\n            // When reading from the variable, obtain the current cache from\n            // context via cacheSlot. This isn't entirely foolproof, but it's\n            // the same system that powers varDep.\n            var cache = cacheSlot.getValue();\n            if (cache) {\n                attach(cache);\n                getCacheInfo(cache).dep(rv);\n            }\n        }\n        return value;\n    };\n    rv.onNextChange = function(listener) {\n        listeners.add(listener);\n        return function() {\n            listeners.delete(listener);\n        };\n    };\n    var attach = rv.attachCache = function(cache) {\n        caches.add(cache);\n        getCacheInfo(cache).vars.add(rv);\n        return rv;\n    };\n    rv.forgetCache = function(cache) {\n        return caches.delete(cache);\n    };\n    return rv;\n}\nfunction broadcast(cache) {\n    if (cache.broadcastWatches) {\n        cache.broadcastWatches();\n    }\n} //# sourceMappingURL=reactiveVars.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvY2FjaGUvaW5tZW1vcnkvcmVhY3RpdmVWYXJzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQXFDO0FBQ3JDLHlFQUF5RTtBQUN6RSxnQ0FBZ0M7QUFDekIsSUFBSUUsWUFBWSxJQUFJRCwwQ0FBSUEsR0FBRztBQUNsQyxJQUFJRSxlQUFlLElBQUlDO0FBQ3ZCLFNBQVNDLGFBQWFDLEtBQUs7SUFDdkIsSUFBSUMsT0FBT0osYUFBYUssR0FBRyxDQUFDRjtJQUM1QixJQUFJLENBQUNDLE1BQU07UUFDUEosYUFBYU0sR0FBRyxDQUFDSCxPQUFRQyxPQUFPO1lBQzVCRyxNQUFNLElBQUlDO1lBQ1ZYLEtBQUtBLDZDQUFHQTtRQUNaO0lBQ0o7SUFDQSxPQUFPTztBQUNYO0FBQ08sU0FBU0ssWUFBWU4sS0FBSztJQUM3QkQsYUFBYUMsT0FBT0ksSUFBSSxDQUFDRyxPQUFPLENBQUMsU0FBVUMsRUFBRTtRQUFJLE9BQU9BLEdBQUdGLFdBQVcsQ0FBQ047SUFBUTtBQUNuRjtBQUNBLHlFQUF5RTtBQUN6RSxrRUFBa0U7QUFDbEUsMEVBQTBFO0FBQzFFLHNFQUFzRTtBQUN0RSwwRUFBMEU7QUFDMUUsd0VBQXdFO0FBQ3hFLG1FQUFtRTtBQUNuRSx3REFBd0Q7QUFDakQsU0FBU1MsWUFBWVQsS0FBSztJQUM3QkQsYUFBYUMsT0FBT0ksSUFBSSxDQUFDRyxPQUFPLENBQUMsU0FBVUMsRUFBRTtRQUFJLE9BQU9BLEdBQUdFLFdBQVcsQ0FBQ1Y7SUFBUTtBQUNuRjtBQUNPLFNBQVNXLFFBQVFDLEtBQUs7SUFDekIsSUFBSUMsU0FBUyxJQUFJUjtJQUNqQixJQUFJUyxZQUFZLElBQUlUO0lBQ3BCLElBQUlHLEtBQUssU0FBVU8sUUFBUTtRQUN2QixJQUFJQyxVQUFVQyxNQUFNLEdBQUcsR0FBRztZQUN0QixJQUFJTCxVQUFVRyxVQUFVO2dCQUNwQkgsUUFBUUc7Z0JBQ1JGLE9BQU9OLE9BQU8sQ0FBQyxTQUFVUCxLQUFLO29CQUMxQix3REFBd0Q7b0JBQ3hELDJEQUEyRDtvQkFDM0Qsd0RBQXdEO29CQUN4REQsYUFBYUMsT0FBT04sR0FBRyxDQUFDd0IsS0FBSyxDQUFDVjtvQkFDOUIsNERBQTREO29CQUM1RCxzQkFBc0I7b0JBQ3RCVyxVQUFVbkI7Z0JBQ2Q7Z0JBQ0EsMkRBQTJEO2dCQUMzRCxJQUFJb0IsZUFBZUMsTUFBTUMsSUFBSSxDQUFDUjtnQkFDOUJBLFVBQVVTLEtBQUs7Z0JBQ2ZILGFBQWFiLE9BQU8sQ0FBQyxTQUFVaUIsUUFBUTtvQkFBSSxPQUFPQSxTQUFTWjtnQkFBUTtZQUN2RTtRQUNKLE9BQ0s7WUFDRCxnRUFBZ0U7WUFDaEUsaUVBQWlFO1lBQ2pFLHNDQUFzQztZQUN0QyxJQUFJWixRQUFRSixVQUFVNkIsUUFBUTtZQUM5QixJQUFJekIsT0FBTztnQkFDUDBCLE9BQU8xQjtnQkFDUEQsYUFBYUMsT0FBT04sR0FBRyxDQUFDYztZQUM1QjtRQUNKO1FBQ0EsT0FBT0k7SUFDWDtJQUNBSixHQUFHbUIsWUFBWSxHQUFHLFNBQVVILFFBQVE7UUFDaENWLFVBQVVjLEdBQUcsQ0FBQ0o7UUFDZCxPQUFPO1lBQ0hWLFVBQVVlLE1BQU0sQ0FBQ0w7UUFDckI7SUFDSjtJQUNBLElBQUlFLFNBQVVsQixHQUFHRSxXQUFXLEdBQUcsU0FBVVYsS0FBSztRQUMxQ2EsT0FBT2UsR0FBRyxDQUFDNUI7UUFDWEQsYUFBYUMsT0FBT0ksSUFBSSxDQUFDd0IsR0FBRyxDQUFDcEI7UUFDN0IsT0FBT0E7SUFDWDtJQUNBQSxHQUFHRixXQUFXLEdBQUcsU0FBVU4sS0FBSztRQUFJLE9BQU9hLE9BQU9nQixNQUFNLENBQUM3QjtJQUFRO0lBQ2pFLE9BQU9RO0FBQ1g7QUFDQSxTQUFTVyxVQUFVbkIsS0FBSztJQUNwQixJQUFJQSxNQUFNOEIsZ0JBQWdCLEVBQUU7UUFDeEI5QixNQUFNOEIsZ0JBQWdCO0lBQzFCO0FBQ0osRUFDQSx3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbGFjay1ncmFwaHFsLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L2NhY2hlL2lubWVtb3J5L3JlYWN0aXZlVmFycy5qcz9kNzNiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlcCwgU2xvdCB9IGZyb20gXCJvcHRpbWlzbVwiO1xuLy8gQ29udGV4dHVhbCBTbG90IHRoYXQgYWNxdWlyZXMgaXRzIHZhbHVlIHdoZW4gY3VzdG9tIHJlYWQgZnVuY3Rpb25zIGFyZVxuLy8gY2FsbGVkIGluIFBvbGljaWVzI3JlYWRGaWVsZC5cbmV4cG9ydCB2YXIgY2FjaGVTbG90ID0gbmV3IFNsb3QoKTtcbnZhciBjYWNoZUluZm9NYXAgPSBuZXcgV2Vha01hcCgpO1xuZnVuY3Rpb24gZ2V0Q2FjaGVJbmZvKGNhY2hlKSB7XG4gICAgdmFyIGluZm8gPSBjYWNoZUluZm9NYXAuZ2V0KGNhY2hlKTtcbiAgICBpZiAoIWluZm8pIHtcbiAgICAgICAgY2FjaGVJbmZvTWFwLnNldChjYWNoZSwgKGluZm8gPSB7XG4gICAgICAgICAgICB2YXJzOiBuZXcgU2V0KCksXG4gICAgICAgICAgICBkZXA6IGRlcCgpLFxuICAgICAgICB9KSk7XG4gICAgfVxuICAgIHJldHVybiBpbmZvO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZvcmdldENhY2hlKGNhY2hlKSB7XG4gICAgZ2V0Q2FjaGVJbmZvKGNhY2hlKS52YXJzLmZvckVhY2goZnVuY3Rpb24gKHJ2KSB7IHJldHVybiBydi5mb3JnZXRDYWNoZShjYWNoZSk7IH0pO1xufVxuLy8gQ2FsbGluZyBmb3JnZXRDYWNoZShjYWNoZSkgc2VydmVzIHRvIHNpbGVuY2UgYnJvYWRjYXN0cyBhbmQgYWxsb3dzIHRoZVxuLy8gY2FjaGUgdG8gYmUgZ2FyYmFnZSBjb2xsZWN0ZWQuIEhvd2V2ZXIsIHRoZSB2YXJzQnlDYWNoZSBXZWFrTWFwXG4vLyBwcmVzZXJ2ZXMgdGhlIHNldCBvZiByZWFjdGl2ZSB2YXJpYWJsZXMgdGhhdCB3ZXJlIHByZXZpb3VzbHkgYXNzb2NpYXRlZFxuLy8gd2l0aCB0aGlzIGNhY2hlLCB3aGljaCBtYWtlcyBpdCBwb3NzaWJsZSB0byBcInJlY2FsbFwiIHRoZSBjYWNoZSBhdCBhXG4vLyBsYXRlciB0aW1lLCBieSByZWF0dGFjaGluZyBpdCB0byB0aG9zZSB2YXJpYWJsZXMuIElmIHRoZSBjYWNoZSBoYXMgYmVlblxuLy8gZ2FyYmFnZSBjb2xsZWN0ZWQgaW4gdGhlIG1lYW50aW1lLCBiZWNhdXNlIGl0IGlzIG5vIGxvbmdlciByZWFjaGFibGUsXG4vLyB5b3Ugd29uJ3QgYmUgYWJsZSB0byBjYWxsIHJlY2FsbENhY2hlKGNhY2hlKSwgYW5kIHRoZSBjYWNoZSB3aWxsXG4vLyBhdXRvbWF0aWNhbGx5IGRpc2FwcGVhciBmcm9tIHRoZSB2YXJzQnlDYWNoZSBXZWFrTWFwLlxuZXhwb3J0IGZ1bmN0aW9uIHJlY2FsbENhY2hlKGNhY2hlKSB7XG4gICAgZ2V0Q2FjaGVJbmZvKGNhY2hlKS52YXJzLmZvckVhY2goZnVuY3Rpb24gKHJ2KSB7IHJldHVybiBydi5hdHRhY2hDYWNoZShjYWNoZSk7IH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VWYXIodmFsdWUpIHtcbiAgICB2YXIgY2FjaGVzID0gbmV3IFNldCgpO1xuICAgIHZhciBsaXN0ZW5lcnMgPSBuZXcgU2V0KCk7XG4gICAgdmFyIHJ2ID0gZnVuY3Rpb24gKG5ld1ZhbHVlKSB7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gbmV3VmFsdWU7XG4gICAgICAgICAgICAgICAgY2FjaGVzLmZvckVhY2goZnVuY3Rpb24gKGNhY2hlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEludmFsaWRhdGUgYW55IGZpZWxkcyB3aXRoIGN1c3RvbSByZWFkIGZ1bmN0aW9ucyB0aGF0XG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnN1bWVkIHRoaXMgdmFyaWFibGUsIHNvIHF1ZXJ5IHJlc3VsdHMgaW52b2x2aW5nIHRob3NlXG4gICAgICAgICAgICAgICAgICAgIC8vIGZpZWxkcyB3aWxsIGJlIHJlY29tcHV0ZWQgdGhlIG5leHQgdGltZSB3ZSByZWFkIHRoZW0uXG4gICAgICAgICAgICAgICAgICAgIGdldENhY2hlSW5mbyhjYWNoZSkuZGVwLmRpcnR5KHJ2KTtcbiAgICAgICAgICAgICAgICAgICAgLy8gQnJvYWRjYXN0IGNoYW5nZXMgdG8gYW55IGNhY2hlcyB0aGF0IGhhdmUgcHJldmlvdXNseSByZWFkXG4gICAgICAgICAgICAgICAgICAgIC8vIGZyb20gdGhpcyB2YXJpYWJsZS5cbiAgICAgICAgICAgICAgICAgICAgYnJvYWRjYXN0KGNhY2hlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAvLyBGaW5hbGx5LCBub3RpZnkgYW55IGxpc3RlbmVycyBhZGRlZCB2aWEgcnYub25OZXh0Q2hhbmdlLlxuICAgICAgICAgICAgICAgIHZhciBvbGRMaXN0ZW5lcnMgPSBBcnJheS5mcm9tKGxpc3RlbmVycyk7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXJzLmNsZWFyKCk7XG4gICAgICAgICAgICAgICAgb2xkTGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7IHJldHVybiBsaXN0ZW5lcih2YWx1ZSk7IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gV2hlbiByZWFkaW5nIGZyb20gdGhlIHZhcmlhYmxlLCBvYnRhaW4gdGhlIGN1cnJlbnQgY2FjaGUgZnJvbVxuICAgICAgICAgICAgLy8gY29udGV4dCB2aWEgY2FjaGVTbG90LiBUaGlzIGlzbid0IGVudGlyZWx5IGZvb2xwcm9vZiwgYnV0IGl0J3NcbiAgICAgICAgICAgIC8vIHRoZSBzYW1lIHN5c3RlbSB0aGF0IHBvd2VycyB2YXJEZXAuXG4gICAgICAgICAgICB2YXIgY2FjaGUgPSBjYWNoZVNsb3QuZ2V0VmFsdWUoKTtcbiAgICAgICAgICAgIGlmIChjYWNoZSkge1xuICAgICAgICAgICAgICAgIGF0dGFjaChjYWNoZSk7XG4gICAgICAgICAgICAgICAgZ2V0Q2FjaGVJbmZvKGNhY2hlKS5kZXAocnYpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuICAgIHJ2Lm9uTmV4dENoYW5nZSA9IGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgICBsaXN0ZW5lcnMuYWRkKGxpc3RlbmVyKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGxpc3RlbmVycy5kZWxldGUobGlzdGVuZXIpO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgdmFyIGF0dGFjaCA9IChydi5hdHRhY2hDYWNoZSA9IGZ1bmN0aW9uIChjYWNoZSkge1xuICAgICAgICBjYWNoZXMuYWRkKGNhY2hlKTtcbiAgICAgICAgZ2V0Q2FjaGVJbmZvKGNhY2hlKS52YXJzLmFkZChydik7XG4gICAgICAgIHJldHVybiBydjtcbiAgICB9KTtcbiAgICBydi5mb3JnZXRDYWNoZSA9IGZ1bmN0aW9uIChjYWNoZSkgeyByZXR1cm4gY2FjaGVzLmRlbGV0ZShjYWNoZSk7IH07XG4gICAgcmV0dXJuIHJ2O1xufVxuZnVuY3Rpb24gYnJvYWRjYXN0KGNhY2hlKSB7XG4gICAgaWYgKGNhY2hlLmJyb2FkY2FzdFdhdGNoZXMpIHtcbiAgICAgICAgY2FjaGUuYnJvYWRjYXN0V2F0Y2hlcygpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlYWN0aXZlVmFycy5qcy5tYXAiXSwibmFtZXMiOlsiZGVwIiwiU2xvdCIsImNhY2hlU2xvdCIsImNhY2hlSW5mb01hcCIsIldlYWtNYXAiLCJnZXRDYWNoZUluZm8iLCJjYWNoZSIsImluZm8iLCJnZXQiLCJzZXQiLCJ2YXJzIiwiU2V0IiwiZm9yZ2V0Q2FjaGUiLCJmb3JFYWNoIiwicnYiLCJyZWNhbGxDYWNoZSIsImF0dGFjaENhY2hlIiwibWFrZVZhciIsInZhbHVlIiwiY2FjaGVzIiwibGlzdGVuZXJzIiwibmV3VmFsdWUiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJkaXJ0eSIsImJyb2FkY2FzdCIsIm9sZExpc3RlbmVycyIsIkFycmF5IiwiZnJvbSIsImNsZWFyIiwibGlzdGVuZXIiLCJnZXRWYWx1ZSIsImF0dGFjaCIsIm9uTmV4dENoYW5nZSIsImFkZCIsImRlbGV0ZSIsImJyb2FkY2FzdFdhdGNoZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/cache/inmemory/reactiveVars.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/cache/inmemory/readFromStore.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@apollo/client/cache/inmemory/readFromStore.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StoreReader: () => (/* binding */ StoreReader)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! graphql */ \"(ssr)/./node_modules/graphql/language/kinds.mjs\");\n/* harmony import */ var optimism__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! optimism */ \"(ssr)/./node_modules/optimism/lib/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/compact.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/sizes.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canonicalStringify.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/mergeDeep.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/directives.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/transform.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/fragments.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/maybeDeepFreeze.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/objects.js\");\n/* harmony import */ var _entityStore_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./entityStore.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/entityStore.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/helpers.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n/* harmony import */ var _core_types_common_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../core/types/common.js */ \"(ssr)/./node_modules/@apollo/client/cache/core/types/common.js\");\n/* harmony import */ var _object_canon_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./object-canon.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/object-canon.js\");\n\n\n\n\n\n\n\n\n\nfunction execSelectionSetKeyArgs(options) {\n    return [\n        options.selectionSet,\n        options.objectOrReference,\n        options.context,\n        // We split out this property so we can pass different values\n        // independently without modifying options.context itself.\n        options.context.canonizeResults\n    ];\n}\nvar StoreReader = /** @class */ function() {\n    function StoreReader(config) {\n        var _this = this;\n        this.knownResults = new (_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.canUseWeakMap ? WeakMap : Map)();\n        this.config = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.compact)(config, {\n            addTypename: config.addTypename !== false,\n            canonizeResults: (0,_helpers_js__WEBPACK_IMPORTED_MODULE_4__.shouldCanonizeResults)(config)\n        });\n        this.canon = config.canon || new _object_canon_js__WEBPACK_IMPORTED_MODULE_5__.ObjectCanon();\n        // memoized functions in this class will be \"garbage-collected\"\n        // by recreating the whole `StoreReader` in\n        // `InMemoryCache.resetResultsCache`\n        // (triggered from `InMemoryCache.gc` with `resetResultCache: true`)\n        this.executeSelectionSet = (0,optimism__WEBPACK_IMPORTED_MODULE_1__.wrap)(function(options) {\n            var _a;\n            var canonizeResults = options.context.canonizeResults;\n            var peekArgs = execSelectionSetKeyArgs(options);\n            // Negate this boolean option so we can find out if we've already read\n            // this result using the other boolean value.\n            peekArgs[3] = !canonizeResults;\n            var other = (_a = _this.executeSelectionSet).peek.apply(_a, peekArgs);\n            if (other) {\n                if (canonizeResults) {\n                    return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, other), {\n                        // If we previously read this result without canonizing it, we can\n                        // reuse that result simply by canonizing it now.\n                        result: _this.canon.admit(other.result)\n                    });\n                }\n                // If we previously read this result with canonization enabled, we can\n                // return that canonized result as-is.\n                return other;\n            }\n            (0,_entityStore_js__WEBPACK_IMPORTED_MODULE_7__.maybeDependOnExistenceOfEntity)(options.context.store, options.enclosingRef.__ref);\n            // Finally, if we didn't find any useful previous results, run the real\n            // execSelectionSetImpl method with the given options.\n            return _this.execSelectionSetImpl(options);\n        }, {\n            max: this.config.resultCacheMaxSize || _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.cacheSizes[\"inMemoryCache.executeSelectionSet\"] || 50000 /* defaultCacheSizes[\"inMemoryCache.executeSelectionSet\"] */ ,\n            keyArgs: execSelectionSetKeyArgs,\n            // Note that the parameters of makeCacheKey are determined by the\n            // array returned by keyArgs.\n            makeCacheKey: function(selectionSet, parent, context, canonizeResults) {\n                if ((0,_entityStore_js__WEBPACK_IMPORTED_MODULE_7__.supportsResultCaching)(context.store)) {\n                    return context.store.makeCacheKey(selectionSet, (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isReference)(parent) ? parent.__ref : parent, context.varString, canonizeResults);\n                }\n            }\n        });\n        this.executeSubSelectedArray = (0,optimism__WEBPACK_IMPORTED_MODULE_1__.wrap)(function(options) {\n            (0,_entityStore_js__WEBPACK_IMPORTED_MODULE_7__.maybeDependOnExistenceOfEntity)(options.context.store, options.enclosingRef.__ref);\n            return _this.execSubSelectedArrayImpl(options);\n        }, {\n            max: this.config.resultCacheMaxSize || _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.cacheSizes[\"inMemoryCache.executeSubSelectedArray\"] || 10000 /* defaultCacheSizes[\"inMemoryCache.executeSubSelectedArray\"] */ ,\n            makeCacheKey: function(_a) {\n                var field = _a.field, array = _a.array, context = _a.context;\n                if ((0,_entityStore_js__WEBPACK_IMPORTED_MODULE_7__.supportsResultCaching)(context.store)) {\n                    return context.store.makeCacheKey(field, array, context.varString);\n                }\n            }\n        });\n    }\n    StoreReader.prototype.resetCanon = function() {\n        this.canon = new _object_canon_js__WEBPACK_IMPORTED_MODULE_5__.ObjectCanon();\n    };\n    /**\n     * Given a store and a query, return as much of the result as possible and\n     * identify if any data was missing from the store.\n     */ StoreReader.prototype.diffQueryAgainstStore = function(_a) {\n        var store = _a.store, query = _a.query, _b = _a.rootId, rootId = _b === void 0 ? \"ROOT_QUERY\" : _b, variables = _a.variables, _c = _a.returnPartialData, returnPartialData = _c === void 0 ? true : _c, _d = _a.canonizeResults, canonizeResults = _d === void 0 ? this.config.canonizeResults : _d;\n        var policies = this.config.cache.policies;\n        variables = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_10__.getDefaultValues)((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_10__.getQueryDefinition)(query))), variables);\n        var rootRef = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.makeReference)(rootId);\n        var execResult = this.executeSelectionSet({\n            selectionSet: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_10__.getMainDefinition)(query).selectionSet,\n            objectOrReference: rootRef,\n            enclosingRef: rootRef,\n            context: (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({\n                store: store,\n                query: query,\n                policies: policies,\n                variables: variables,\n                varString: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_11__.canonicalStringify)(variables),\n                canonizeResults: canonizeResults\n            }, (0,_helpers_js__WEBPACK_IMPORTED_MODULE_4__.extractFragmentContext)(query, this.config.fragments))\n        });\n        var missing;\n        if (execResult.missing) {\n            // For backwards compatibility we still report an array of\n            // MissingFieldError objects, even though there will only ever be at most\n            // one of them, now that all missing field error messages are grouped\n            // together in the execResult.missing tree.\n            missing = [\n                new _core_types_common_js__WEBPACK_IMPORTED_MODULE_12__.MissingFieldError(firstMissing(execResult.missing), execResult.missing, query, variables)\n            ];\n            if (!returnPartialData) {\n                throw missing[0];\n            }\n        }\n        return {\n            result: execResult.result,\n            complete: !missing,\n            missing: missing\n        };\n    };\n    StoreReader.prototype.isFresh = function(result, parent, selectionSet, context) {\n        if ((0,_entityStore_js__WEBPACK_IMPORTED_MODULE_7__.supportsResultCaching)(context.store) && this.knownResults.get(result) === selectionSet) {\n            var latest = this.executeSelectionSet.peek(selectionSet, parent, context, // If result is canonical, then it could only have been previously\n            // cached by the canonizing version of executeSelectionSet, so we can\n            // avoid checking both possibilities here.\n            this.canon.isKnown(result));\n            if (latest && result === latest.result) {\n                return true;\n            }\n        }\n        return false;\n    };\n    // Uncached version of executeSelectionSet.\n    StoreReader.prototype.execSelectionSetImpl = function(_a) {\n        var _this = this;\n        var selectionSet = _a.selectionSet, objectOrReference = _a.objectOrReference, enclosingRef = _a.enclosingRef, context = _a.context;\n        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isReference)(objectOrReference) && !context.policies.rootTypenamesById[objectOrReference.__ref] && !context.store.has(objectOrReference.__ref)) {\n            return {\n                result: this.canon.empty,\n                missing: \"Dangling reference to missing \".concat(objectOrReference.__ref, \" object\")\n            };\n        }\n        var variables = context.variables, policies = context.policies, store = context.store;\n        var typename = store.getFieldValue(objectOrReference, \"__typename\");\n        var objectsToMerge = [];\n        var missing;\n        var missingMerger = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.DeepMerger();\n        if (this.config.addTypename && typeof typename === \"string\" && !policies.rootIdsByTypename[typename]) {\n            // Ensure we always include a default value for the __typename\n            // field, if we have one, and this.config.addTypename is true. Note\n            // that this field can be overridden by other merged objects.\n            objectsToMerge.push({\n                __typename: typename\n            });\n        }\n        function handleMissing(result, resultName) {\n            var _a;\n            if (result.missing) {\n                missing = missingMerger.merge(missing, (_a = {}, _a[resultName] = result.missing, _a));\n            }\n            return result.result;\n        }\n        var workSet = new Set(selectionSet.selections);\n        workSet.forEach(function(selection) {\n            var _a, _b;\n            // Omit fields with directives @skip(if: <truthy value>) or\n            // @include(if: <falsy value>).\n            if (!(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_14__.shouldInclude)(selection, variables)) return;\n            if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isField)(selection)) {\n                var fieldValue = policies.readField({\n                    fieldName: selection.name.value,\n                    field: selection,\n                    variables: context.variables,\n                    from: objectOrReference\n                }, context);\n                var resultName = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.resultKeyNameFromField)(selection);\n                if (fieldValue === void 0) {\n                    if (!_utilities_index_js__WEBPACK_IMPORTED_MODULE_15__.addTypenameToDocument.added(selection)) {\n                        missing = missingMerger.merge(missing, (_a = {}, _a[resultName] = \"Can't find field '\".concat(selection.name.value, \"' on \").concat((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isReference)(objectOrReference) ? objectOrReference.__ref + \" object\" : \"object \" + JSON.stringify(objectOrReference, null, 2)), _a));\n                    }\n                } else if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_16__.isArray)(fieldValue)) {\n                    if (fieldValue.length > 0) {\n                        fieldValue = handleMissing(_this.executeSubSelectedArray({\n                            field: selection,\n                            array: fieldValue,\n                            enclosingRef: enclosingRef,\n                            context: context\n                        }), resultName);\n                    }\n                } else if (!selection.selectionSet) {\n                    // If the field does not have a selection set, then we handle it\n                    // as a scalar value. To keep this.canon from canonicalizing\n                    // this value, we use this.canon.pass to wrap fieldValue in a\n                    // Pass object that this.canon.admit will later unwrap as-is.\n                    if (context.canonizeResults) {\n                        fieldValue = _this.canon.pass(fieldValue);\n                    }\n                } else if (fieldValue != null) {\n                    // In this case, because we know the field has a selection set,\n                    // it must be trying to query a GraphQLObjectType, which is why\n                    // fieldValue must be != null.\n                    fieldValue = handleMissing(_this.executeSelectionSet({\n                        selectionSet: selection.selectionSet,\n                        objectOrReference: fieldValue,\n                        enclosingRef: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isReference)(fieldValue) ? fieldValue : enclosingRef,\n                        context: context\n                    }), resultName);\n                }\n                if (fieldValue !== void 0) {\n                    objectsToMerge.push((_b = {}, _b[resultName] = fieldValue, _b));\n                }\n            } else {\n                var fragment = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_17__.getFragmentFromSelection)(selection, context.lookupFragment);\n                if (!fragment && selection.kind === graphql__WEBPACK_IMPORTED_MODULE_18__.Kind.FRAGMENT_SPREAD) {\n                    throw (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(10, selection.name.value);\n                }\n                if (fragment && policies.fragmentMatches(fragment, typename)) {\n                    fragment.selectionSet.selections.forEach(workSet.add, workSet);\n                }\n            }\n        });\n        var result = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.mergeDeepArray)(objectsToMerge);\n        var finalResult = {\n            result: result,\n            missing: missing\n        };\n        var frozen = context.canonizeResults ? this.canon.admit(finalResult) : (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_19__.maybeDeepFreeze)(finalResult);\n        // Store this result with its selection set so that we can quickly\n        // recognize it again in the StoreReader#isFresh method.\n        if (frozen.result) {\n            this.knownResults.set(frozen.result, selectionSet);\n        }\n        return frozen;\n    };\n    // Uncached version of executeSubSelectedArray.\n    StoreReader.prototype.execSubSelectedArrayImpl = function(_a) {\n        var _this = this;\n        var field = _a.field, array = _a.array, enclosingRef = _a.enclosingRef, context = _a.context;\n        var missing;\n        var missingMerger = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.DeepMerger();\n        function handleMissing(childResult, i) {\n            var _a;\n            if (childResult.missing) {\n                missing = missingMerger.merge(missing, (_a = {}, _a[i] = childResult.missing, _a));\n            }\n            return childResult.result;\n        }\n        if (field.selectionSet) {\n            array = array.filter(context.store.canRead);\n        }\n        array = array.map(function(item, i) {\n            // null value in array\n            if (item === null) {\n                return null;\n            }\n            // This is a nested array, recurse\n            if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_16__.isArray)(item)) {\n                return handleMissing(_this.executeSubSelectedArray({\n                    field: field,\n                    array: item,\n                    enclosingRef: enclosingRef,\n                    context: context\n                }), i);\n            }\n            // This is an object, run the selection set on it\n            if (field.selectionSet) {\n                return handleMissing(_this.executeSelectionSet({\n                    selectionSet: field.selectionSet,\n                    objectOrReference: item,\n                    enclosingRef: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isReference)(item) ? item : enclosingRef,\n                    context: context\n                }), i);\n            }\n            if (globalThis.__DEV__ !== false) {\n                assertSelectionSetForIdValue(context.store, field, item);\n            }\n            return item;\n        });\n        return {\n            result: context.canonizeResults ? this.canon.admit(array) : array,\n            missing: missing\n        };\n    };\n    return StoreReader;\n}();\n\nfunction firstMissing(tree) {\n    try {\n        JSON.stringify(tree, function(_, value) {\n            if (typeof value === \"string\") throw value;\n            return value;\n        });\n    } catch (result) {\n        return result;\n    }\n}\nfunction assertSelectionSetForIdValue(store, field, fieldValue) {\n    if (!field.selectionSet) {\n        var workSet_1 = new Set([\n            fieldValue\n        ]);\n        workSet_1.forEach(function(value) {\n            if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_20__.isNonNullObject)(value)) {\n                (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(!(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isReference)(value), 11, (0,_helpers_js__WEBPACK_IMPORTED_MODULE_4__.getTypenameFromStoreObject)(store, value), field.name.value);\n                Object.values(value).forEach(workSet_1.add, workSet_1);\n            }\n        });\n    }\n} //# sourceMappingURL=readFromStore.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/cache/inmemory/readFromStore.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/cache/inmemory/writeToStore.js":
/*!********************************************************************!*\
  !*** ./node_modules/@apollo/client/cache/inmemory/writeToStore.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StoreWriter: () => (/* binding */ StoreWriter)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @wry/equality */ \"(ssr)/./node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var _wry_trie__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @wry/trie */ \"(ssr)/./node_modules/@wry/trie/lib/index.js\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! graphql */ \"(ssr)/./node_modules/graphql/language/kinds.mjs\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canonicalStringify.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/transform.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/cloneDeep.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/directives.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/fragments.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/helpers.js\");\n/* harmony import */ var _policies_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./policies.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/policies.js\");\n\n\n\n\n\n\n\n\n// Since there are only four possible combinations of context.clientOnly and\n// context.deferred values, we should need at most four \"flavors\" of any given\n// WriteContext. To avoid creating multiple copies of the same context, we cache\n// the contexts in the context.flavors Map (shared by all flavors) according to\n// their clientOnly and deferred values (always in that order).\nfunction getContextFlavor(context, clientOnly, deferred) {\n    var key = \"\".concat(clientOnly).concat(deferred);\n    var flavored = context.flavors.get(key);\n    if (!flavored) {\n        context.flavors.set(key, flavored = context.clientOnly === clientOnly && context.deferred === deferred ? context : (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, context), {\n            clientOnly: clientOnly,\n            deferred: deferred\n        }));\n    }\n    return flavored;\n}\nvar StoreWriter = /** @class */ function() {\n    function StoreWriter(cache, reader, fragments) {\n        this.cache = cache;\n        this.reader = reader;\n        this.fragments = fragments;\n    }\n    StoreWriter.prototype.writeToStore = function(store, _a) {\n        var _this = this;\n        var query = _a.query, result = _a.result, dataId = _a.dataId, variables = _a.variables, overwrite = _a.overwrite;\n        var operationDefinition = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.getOperationDefinition)(query);\n        var merger = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.makeProcessedFieldsMerger)();\n        variables = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.getDefaultValues)(operationDefinition)), variables);\n        var context = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({\n            store: store,\n            written: Object.create(null),\n            merge: function(existing, incoming) {\n                return merger.merge(existing, incoming);\n            },\n            variables: variables,\n            varString: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_6__.canonicalStringify)(variables)\n        }, (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.extractFragmentContext)(query, this.fragments)), {\n            overwrite: !!overwrite,\n            incomingById: new Map(),\n            clientOnly: false,\n            deferred: false,\n            flavors: new Map()\n        });\n        var ref = this.processSelectionSet({\n            result: result || Object.create(null),\n            dataId: dataId,\n            selectionSet: operationDefinition.selectionSet,\n            mergeTree: {\n                map: new Map()\n            },\n            context: context\n        });\n        if (!(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.isReference)(ref)) {\n            throw (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(12, result);\n        }\n        // So far, the store has not been modified, so now it's time to process\n        // context.incomingById and merge those incoming fields into context.store.\n        context.incomingById.forEach(function(_a, dataId) {\n            var storeObject = _a.storeObject, mergeTree = _a.mergeTree, fieldNodeSet = _a.fieldNodeSet;\n            var entityRef = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.makeReference)(dataId);\n            if (mergeTree && mergeTree.map.size) {\n                var applied = _this.applyMerges(mergeTree, entityRef, storeObject, context);\n                if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.isReference)(applied)) {\n                    // Assume References returned by applyMerges have already been merged\n                    // into the store. See makeMergeObjectsFunction in policies.ts for an\n                    // example of how this can happen.\n                    return;\n                }\n                // Otherwise, applyMerges returned a StoreObject, whose fields we should\n                // merge into the store (see store.merge statement below).\n                storeObject = applied;\n            }\n            if (globalThis.__DEV__ !== false && !context.overwrite) {\n                var fieldsWithSelectionSets_1 = Object.create(null);\n                fieldNodeSet.forEach(function(field) {\n                    if (field.selectionSet) {\n                        fieldsWithSelectionSets_1[field.name.value] = true;\n                    }\n                });\n                var hasSelectionSet_1 = function(storeFieldName) {\n                    return fieldsWithSelectionSets_1[(0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.fieldNameFromStoreName)(storeFieldName)] === true;\n                };\n                var hasMergeFunction_1 = function(storeFieldName) {\n                    var childTree = mergeTree && mergeTree.map.get(storeFieldName);\n                    return Boolean(childTree && childTree.info && childTree.info.merge);\n                };\n                Object.keys(storeObject).forEach(function(storeFieldName) {\n                    // If a merge function was defined for this field, trust that it\n                    // did the right thing about (not) clobbering data. If the field\n                    // has no selection set, it's a scalar field, so it doesn't need\n                    // a merge function (even if it's an object, like JSON data).\n                    if (hasSelectionSet_1(storeFieldName) && !hasMergeFunction_1(storeFieldName)) {\n                        warnAboutDataLoss(entityRef, storeObject, storeFieldName, context.store);\n                    }\n                });\n            }\n            store.merge(dataId, storeObject);\n        });\n        // Any IDs written explicitly to the cache will be retained as\n        // reachable root IDs for garbage collection purposes. Although this\n        // logic includes root IDs like ROOT_QUERY and ROOT_MUTATION, their\n        // retainment counts are effectively ignored because cache.gc() always\n        // includes them in its root ID set.\n        store.retain(ref.__ref);\n        return ref;\n    };\n    StoreWriter.prototype.processSelectionSet = function(_a) {\n        var _this = this;\n        var dataId = _a.dataId, result = _a.result, selectionSet = _a.selectionSet, context = _a.context, // This object allows processSelectionSet to report useful information\n        // to its callers without explicitly returning that information.\n        mergeTree = _a.mergeTree;\n        var policies = this.cache.policies;\n        // This variable will be repeatedly updated using context.merge to\n        // accumulate all fields that need to be written into the store.\n        var incoming = Object.create(null);\n        // If typename was not passed in, infer it. Note that typename is\n        // always passed in for tricky-to-infer cases such as \"Query\" for\n        // ROOT_QUERY.\n        var typename = dataId && policies.rootTypenamesById[dataId] || (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.getTypenameFromResult)(result, selectionSet, context.fragmentMap) || dataId && context.store.get(dataId, \"__typename\");\n        if (\"string\" === typeof typename) {\n            incoming.__typename = typename;\n        }\n        // This readField function will be passed as context.readField in the\n        // KeyFieldsContext object created within policies.identify (called below).\n        // In addition to reading from the existing context.store (thanks to the\n        // policies.readField(options, context) line at the very bottom), this\n        // version of readField can read from Reference objects that are currently\n        // pending in context.incomingById, which is important whenever keyFields\n        // need to be extracted from a child object that processSelectionSet has\n        // turned into a Reference.\n        var readField = function() {\n            var options = (0,_policies_js__WEBPACK_IMPORTED_MODULE_8__.normalizeReadFieldOptions)(arguments, incoming, context.variables);\n            if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.isReference)(options.from)) {\n                var info = context.incomingById.get(options.from.__ref);\n                if (info) {\n                    var result_1 = policies.readField((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, options), {\n                        from: info.storeObject\n                    }), context);\n                    if (result_1 !== void 0) {\n                        return result_1;\n                    }\n                }\n            }\n            return policies.readField(options, context);\n        };\n        var fieldNodeSet = new Set();\n        this.flattenFields(selectionSet, result, // This WriteContext will be the default context value for fields returned\n        // by the flattenFields method, but some fields may be assigned a modified\n        // context, depending on the presence of @client and other directives.\n        context, typename).forEach(function(context, field) {\n            var _a;\n            var resultFieldKey = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.resultKeyNameFromField)(field);\n            var value = result[resultFieldKey];\n            fieldNodeSet.add(field);\n            if (value !== void 0) {\n                var storeFieldName = policies.getStoreFieldName({\n                    typename: typename,\n                    fieldName: field.name.value,\n                    field: field,\n                    variables: context.variables\n                });\n                var childTree = getChildMergeTree(mergeTree, storeFieldName);\n                var incomingValue = _this.processFieldValue(value, field, // Reset context.clientOnly and context.deferred to their default\n                // values before processing nested selection sets.\n                field.selectionSet ? getContextFlavor(context, false, false) : context, childTree);\n                // To determine if this field holds a child object with a merge function\n                // defined in its type policy (see PR #7070), we need to figure out the\n                // child object's __typename.\n                var childTypename = void 0;\n                // The field's value can be an object that has a __typename only if the\n                // field has a selection set. Otherwise incomingValue is scalar.\n                if (field.selectionSet && ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.isReference)(incomingValue) || (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.storeValueIsStoreObject)(incomingValue))) {\n                    childTypename = readField(\"__typename\", incomingValue);\n                }\n                var merge = policies.getMergeFunction(typename, field.name.value, childTypename);\n                if (merge) {\n                    childTree.info = {\n                        // TODO Check compatibility against any existing childTree.field?\n                        field: field,\n                        typename: typename,\n                        merge: merge\n                    };\n                } else {\n                    maybeRecycleChildMergeTree(mergeTree, storeFieldName);\n                }\n                incoming = context.merge(incoming, (_a = {}, _a[storeFieldName] = incomingValue, _a));\n            } else if (globalThis.__DEV__ !== false && !context.clientOnly && !context.deferred && !_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.addTypenameToDocument.added(field) && // If the field has a read function, it may be a synthetic field or\n            // provide a default value, so its absence from the written data should\n            // not be cause for alarm.\n            !policies.getReadFunction(typename, field.name.value)) {\n                globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.error(13, (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.resultKeyNameFromField)(field), result);\n            }\n        });\n        // Identify the result object, even if dataId was already provided,\n        // since we always need keyObject below.\n        try {\n            var _b = policies.identify(result, {\n                typename: typename,\n                selectionSet: selectionSet,\n                fragmentMap: context.fragmentMap,\n                storeObject: incoming,\n                readField: readField\n            }), id = _b[0], keyObject = _b[1];\n            // If dataId was not provided, fall back to the id just generated by\n            // policies.identify.\n            dataId = dataId || id;\n            // Write any key fields that were used during identification, even if\n            // they were not mentioned in the original query.\n            if (keyObject) {\n                // TODO Reverse the order of the arguments?\n                incoming = context.merge(incoming, keyObject);\n            }\n        } catch (e) {\n            // If dataId was provided, tolerate failure of policies.identify.\n            if (!dataId) throw e;\n        }\n        if (\"string\" === typeof dataId) {\n            var dataRef = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.makeReference)(dataId);\n            // Avoid processing the same entity object using the same selection\n            // set more than once. We use an array instead of a Set since most\n            // entity IDs will be written using only one selection set, so the\n            // size of this array is likely to be very small, meaning indexOf is\n            // likely to be faster than Set.prototype.has.\n            var sets = context.written[dataId] || (context.written[dataId] = []);\n            if (sets.indexOf(selectionSet) >= 0) return dataRef;\n            sets.push(selectionSet);\n            // If we're about to write a result object into the store, but we\n            // happen to know that the exact same (===) result object would be\n            // returned if we were to reread the result with the same inputs,\n            // then we can skip the rest of the processSelectionSet work for\n            // this object, and immediately return a Reference to it.\n            if (this.reader && this.reader.isFresh(result, dataRef, selectionSet, context)) {\n                return dataRef;\n            }\n            var previous_1 = context.incomingById.get(dataId);\n            if (previous_1) {\n                previous_1.storeObject = context.merge(previous_1.storeObject, incoming);\n                previous_1.mergeTree = mergeMergeTrees(previous_1.mergeTree, mergeTree);\n                fieldNodeSet.forEach(function(field) {\n                    return previous_1.fieldNodeSet.add(field);\n                });\n            } else {\n                context.incomingById.set(dataId, {\n                    storeObject: incoming,\n                    // Save a reference to mergeTree only if it is not empty, because\n                    // empty MergeTrees may be recycled by maybeRecycleChildMergeTree and\n                    // reused for entirely different parts of the result tree.\n                    mergeTree: mergeTreeIsEmpty(mergeTree) ? void 0 : mergeTree,\n                    fieldNodeSet: fieldNodeSet\n                });\n            }\n            return dataRef;\n        }\n        return incoming;\n    };\n    StoreWriter.prototype.processFieldValue = function(value, field, context, mergeTree) {\n        var _this = this;\n        if (!field.selectionSet || value === null) {\n            // In development, we need to clone scalar values so that they can be\n            // safely frozen with maybeDeepFreeze in readFromStore.ts. In production,\n            // it's cheaper to store the scalar values directly in the cache.\n            return globalThis.__DEV__ !== false ? (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_10__.cloneDeep)(value) : value;\n        }\n        if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_11__.isArray)(value)) {\n            return value.map(function(item, i) {\n                var value = _this.processFieldValue(item, field, context, getChildMergeTree(mergeTree, i));\n                maybeRecycleChildMergeTree(mergeTree, i);\n                return value;\n            });\n        }\n        return this.processSelectionSet({\n            result: value,\n            selectionSet: field.selectionSet,\n            context: context,\n            mergeTree: mergeTree\n        });\n    };\n    // Implements https://spec.graphql.org/draft/#sec-Field-Collection, but with\n    // some additions for tracking @client and @defer directives.\n    StoreWriter.prototype.flattenFields = function(selectionSet, result, context, typename) {\n        if (typename === void 0) {\n            typename = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.getTypenameFromResult)(result, selectionSet, context.fragmentMap);\n        }\n        var fieldMap = new Map();\n        var policies = this.cache.policies;\n        var limitingTrie = new _wry_trie__WEBPACK_IMPORTED_MODULE_2__.Trie(false); // No need for WeakMap, since limitingTrie does not escape.\n        (function flatten(selectionSet, inheritedContext) {\n            var visitedNode = limitingTrie.lookup(selectionSet, // Because we take inheritedClientOnly and inheritedDeferred into\n            // consideration here (in addition to selectionSet), it's possible for\n            // the same selection set to be flattened more than once, if it appears\n            // in the query with different @client and/or @directive configurations.\n            inheritedContext.clientOnly, inheritedContext.deferred);\n            if (visitedNode.visited) return;\n            visitedNode.visited = true;\n            selectionSet.selections.forEach(function(selection) {\n                if (!(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_12__.shouldInclude)(selection, context.variables)) return;\n                var clientOnly = inheritedContext.clientOnly, deferred = inheritedContext.deferred;\n                if (// Since the presence of @client or @defer on this field can only\n                // cause clientOnly or deferred to become true, we can skip the\n                // forEach loop if both clientOnly and deferred are already true.\n                !(clientOnly && deferred) && (0,_helpers_js__WEBPACK_IMPORTED_MODULE_11__.isNonEmptyArray)(selection.directives)) {\n                    selection.directives.forEach(function(dir) {\n                        var name = dir.name.value;\n                        if (name === \"client\") clientOnly = true;\n                        if (name === \"defer\") {\n                            var args = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.argumentsObjectFromField)(dir, context.variables);\n                            // The @defer directive takes an optional args.if boolean\n                            // argument, similar to @include(if: boolean). Note that\n                            // @defer(if: false) does not make context.deferred false, but\n                            // instead behaves as if there was no @defer directive.\n                            if (!args || args.if !== false) {\n                                deferred = true;\n                            }\n                        // TODO In the future, we may want to record args.label using\n                        // context.deferred, if a label is specified.\n                        }\n                    });\n                }\n                if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.isField)(selection)) {\n                    var existing = fieldMap.get(selection);\n                    if (existing) {\n                        // If this field has been visited along another recursive path\n                        // before, the final context should have clientOnly or deferred set\n                        // to true only if *all* paths have the directive (hence the &&).\n                        clientOnly = clientOnly && existing.clientOnly;\n                        deferred = deferred && existing.deferred;\n                    }\n                    fieldMap.set(selection, getContextFlavor(context, clientOnly, deferred));\n                } else {\n                    var fragment = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.getFragmentFromSelection)(selection, context.lookupFragment);\n                    if (!fragment && selection.kind === graphql__WEBPACK_IMPORTED_MODULE_14__.Kind.FRAGMENT_SPREAD) {\n                        throw (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(14, selection.name.value);\n                    }\n                    if (fragment && policies.fragmentMatches(fragment, typename, result, context.variables)) {\n                        flatten(fragment.selectionSet, getContextFlavor(context, clientOnly, deferred));\n                    }\n                }\n            });\n        })(selectionSet, context);\n        return fieldMap;\n    };\n    StoreWriter.prototype.applyMerges = function(mergeTree, existing, incoming, context, getStorageArgs) {\n        var _a;\n        var _this = this;\n        if (mergeTree.map.size && !(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.isReference)(incoming)) {\n            var e_1 = // Items in the same position in different arrays are not\n            // necessarily related to each other, so when incoming is an array\n            // we process its elements as if there was no existing data.\n            !(0,_helpers_js__WEBPACK_IMPORTED_MODULE_11__.isArray)(incoming) && // Likewise, existing must be either a Reference or a StoreObject\n            // in order for its fields to be safe to merge with the fields of\n            // the incoming object.\n            ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.isReference)(existing) || (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.storeValueIsStoreObject)(existing)) ? existing : void 0;\n            // This narrowing is implied by mergeTree.map.size > 0 and\n            // !isReference(incoming), though TypeScript understandably cannot\n            // hope to infer this type.\n            var i_1 = incoming;\n            // The options.storage objects provided to read and merge functions\n            // are derived from the identity of the parent object plus a\n            // sequence of storeFieldName strings/numbers identifying the nested\n            // field name path of each field value to be merged.\n            if (e_1 && !getStorageArgs) {\n                getStorageArgs = [\n                    (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.isReference)(e_1) ? e_1.__ref : e_1\n                ];\n            }\n            // It's possible that applying merge functions to this subtree will\n            // not change the incoming data, so this variable tracks the fields\n            // that did change, so we can create a new incoming object when (and\n            // only when) at least one incoming field has changed. We use a Map\n            // to preserve the type of numeric keys.\n            var changedFields_1;\n            var getValue_1 = function(from, name) {\n                return (0,_helpers_js__WEBPACK_IMPORTED_MODULE_11__.isArray)(from) ? typeof name === \"number\" ? from[name] : void 0 : context.store.getFieldValue(from, String(name));\n            };\n            mergeTree.map.forEach(function(childTree, storeFieldName) {\n                var eVal = getValue_1(e_1, storeFieldName);\n                var iVal = getValue_1(i_1, storeFieldName);\n                // If we have no incoming data, leave any existing data untouched.\n                if (void 0 === iVal) return;\n                if (getStorageArgs) {\n                    getStorageArgs.push(storeFieldName);\n                }\n                var aVal = _this.applyMerges(childTree, eVal, iVal, context, getStorageArgs);\n                if (aVal !== iVal) {\n                    changedFields_1 = changedFields_1 || new Map();\n                    changedFields_1.set(storeFieldName, aVal);\n                }\n                if (getStorageArgs) {\n                    (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(getStorageArgs.pop() === storeFieldName);\n                }\n            });\n            if (changedFields_1) {\n                // Shallow clone i so we can add changed fields to it.\n                incoming = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_11__.isArray)(i_1) ? i_1.slice(0) : (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, i_1);\n                changedFields_1.forEach(function(value, name) {\n                    incoming[name] = value;\n                });\n            }\n        }\n        if (mergeTree.info) {\n            return this.cache.policies.runMergeFunction(existing, incoming, mergeTree.info, context, getStorageArgs && (_a = context.store).getStorage.apply(_a, getStorageArgs));\n        }\n        return incoming;\n    };\n    return StoreWriter;\n}();\n\nvar emptyMergeTreePool = [];\nfunction getChildMergeTree(_a, name) {\n    var map = _a.map;\n    if (!map.has(name)) {\n        map.set(name, emptyMergeTreePool.pop() || {\n            map: new Map()\n        });\n    }\n    return map.get(name);\n}\nfunction mergeMergeTrees(left, right) {\n    if (left === right || !right || mergeTreeIsEmpty(right)) return left;\n    if (!left || mergeTreeIsEmpty(left)) return right;\n    var info = left.info && right.info ? (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, left.info), right.info) : left.info || right.info;\n    var needToMergeMaps = left.map.size && right.map.size;\n    var map = needToMergeMaps ? new Map() : left.map.size ? left.map : right.map;\n    var merged = {\n        info: info,\n        map: map\n    };\n    if (needToMergeMaps) {\n        var remainingRightKeys_1 = new Set(right.map.keys());\n        left.map.forEach(function(leftTree, key) {\n            merged.map.set(key, mergeMergeTrees(leftTree, right.map.get(key)));\n            remainingRightKeys_1.delete(key);\n        });\n        remainingRightKeys_1.forEach(function(key) {\n            merged.map.set(key, mergeMergeTrees(right.map.get(key), left.map.get(key)));\n        });\n    }\n    return merged;\n}\nfunction mergeTreeIsEmpty(tree) {\n    return !tree || !(tree.info || tree.map.size);\n}\nfunction maybeRecycleChildMergeTree(_a, name) {\n    var map = _a.map;\n    var childTree = map.get(name);\n    if (childTree && mergeTreeIsEmpty(childTree)) {\n        emptyMergeTreePool.push(childTree);\n        map.delete(name);\n    }\n}\nvar warnings = new Set();\n// Note that this function is unused in production, and thus should be\n// pruned by any well-configured minifier.\nfunction warnAboutDataLoss(existingRef, incomingObj, storeFieldName, store) {\n    var getChild = function(objOrRef) {\n        var child = store.getFieldValue(objOrRef, storeFieldName);\n        return typeof child === \"object\" && child;\n    };\n    var existing = getChild(existingRef);\n    if (!existing) return;\n    var incoming = getChild(incomingObj);\n    if (!incoming) return;\n    // It's always safe to replace a reference, since it refers to data\n    // safely stored elsewhere.\n    if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.isReference)(existing)) return;\n    // If the values are structurally equivalent, we do not need to worry\n    // about incoming replacing existing.\n    if ((0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(existing, incoming)) return;\n    // If we're replacing every key of the existing object, then the\n    // existing data would be overwritten even if the objects were\n    // normalized, so warning would not be helpful here.\n    if (Object.keys(existing).every(function(key) {\n        return store.getFieldValue(incoming, key) !== void 0;\n    })) {\n        return;\n    }\n    var parentType = store.getFieldValue(existingRef, \"__typename\") || store.getFieldValue(incomingObj, \"__typename\");\n    var fieldName = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.fieldNameFromStoreName)(storeFieldName);\n    var typeDotName = \"\".concat(parentType, \".\").concat(fieldName);\n    // Avoid warning more than once for the same type and field name.\n    if (warnings.has(typeDotName)) return;\n    warnings.add(typeDotName);\n    var childTypenames = [];\n    // Arrays do not have __typename fields, and always need a custom merge\n    // function, even if their elements are normalized entities.\n    if (!(0,_helpers_js__WEBPACK_IMPORTED_MODULE_11__.isArray)(existing) && !(0,_helpers_js__WEBPACK_IMPORTED_MODULE_11__.isArray)(incoming)) {\n        [\n            existing,\n            incoming\n        ].forEach(function(child) {\n            var typename = store.getFieldValue(child, \"__typename\");\n            if (typeof typename === \"string\" && !childTypenames.includes(typename)) {\n                childTypenames.push(typename);\n            }\n        });\n    }\n    globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(15, fieldName, parentType, childTypenames.length ? \"either ensure all objects of type \" + childTypenames.join(\" and \") + \" have an ID or a custom merge function, or \" : \"\", typeDotName, (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, existing), (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, incoming));\n} //# sourceMappingURL=writeToStore.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/cache/inmemory/writeToStore.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/core/ApolloClient.js":
/*!**********************************************************!*\
  !*** ./node_modules/@apollo/client/core/ApolloClient.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApolloClient: () => (/* binding */ ApolloClient),\n/* harmony export */   mergeOptions: () => (/* reexport safe */ _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.mergeOptions)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _link_core_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../link/core/index.js */ \"(ssr)/./node_modules/@apollo/client/link/core/ApolloLink.js\");\n/* harmony import */ var _link_core_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../link/core/index.js */ \"(ssr)/./node_modules/@apollo/client/link/core/execute.js\");\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../version.js */ \"(ssr)/./node_modules/@apollo/client/version.js\");\n/* harmony import */ var _link_http_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../link/http/index.js */ \"(ssr)/./node_modules/@apollo/client/link/http/HttpLink.js\");\n/* harmony import */ var _QueryManager_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./QueryManager.js */ \"(ssr)/./node_modules/@apollo/client/core/QueryManager.js\");\n/* harmony import */ var _LocalState_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./LocalState.js */ \"(ssr)/./node_modules/@apollo/client/core/LocalState.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/mergeOptions.js\");\n/* harmony import */ var _utilities_caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utilities/caching/getMemoryInternals.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/getMemoryInternals.js\");\n/* harmony import */ var _utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utilities/deprecation/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/deprecation/index.js\");\n\n\n\n\n\n\n\nvar hasSuggestedDevtools = false;\n// Though mergeOptions now resides in @apollo/client/utilities, it was\n// previously declared and exported from this module, and then reexported from\n// @apollo/client/core. Since we need to preserve that API anyway, the easiest\n// solution is to reexport mergeOptions where it was previously declared (here).\n\n\n\n\n/**\n * This is the primary Apollo Client class. It is used to send GraphQL documents (i.e. queries\n * and mutations) to a GraphQL spec-compliant server over an `ApolloLink` instance,\n * receive results from the server and cache the results in a store. It also delivers updates\n * to GraphQL queries through `Observable` instances.\n */ var ApolloClient = /** @class */ function() {\n    /**\n     * Constructs an instance of `ApolloClient`.\n     *\n     * @example\n     * ```js\n     * import { ApolloClient, InMemoryCache } from '@apollo/client';\n     *\n     * const cache = new InMemoryCache();\n     *\n     * const client = new ApolloClient({\n     *   // Provide required constructor fields\n     *   cache: cache,\n     *   uri: 'http://localhost:4000/',\n     *\n     *   // Provide some optional constructor fields\n     *   name: 'react-web-client',\n     *   version: '1.3',\n     *   queryDeduplication: false,\n     *   defaultOptions: {\n     *     watchQuery: {\n     *       fetchPolicy: 'cache-and-network',\n     *     },\n     *   },\n     * });\n     * ```\n     */ function ApolloClient(options) {\n        var _this = this;\n        var _a, _b, _c;\n        this.resetStoreCallbacks = [];\n        this.clearStoreCallbacks = [];\n        if (!options.cache) {\n            throw (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(16);\n        }\n        var uri = options.uri, credentials = options.credentials, headers = options.headers, cache = options.cache, documentTransform = options.documentTransform, _d = options.ssrMode, ssrMode = _d === void 0 ? false : _d, _e = options.ssrForceFetchDelay, ssrForceFetchDelay = _e === void 0 ? 0 : _e, // Expose the client instance as window.__APOLLO_CLIENT__ and call\n        // onBroadcast in queryManager.broadcastQueries to enable browser\n        // devtools, but disable them by default in production.\n        connectToDevTools = options.connectToDevTools, _f = options.queryDeduplication, queryDeduplication = _f === void 0 ? true : _f, defaultOptions = options.defaultOptions, defaultContext = options.defaultContext, _g = options.assumeImmutableResults, assumeImmutableResults = _g === void 0 ? cache.assumeImmutableResults : _g, resolvers = options.resolvers, typeDefs = options.typeDefs, fragmentMatcher = options.fragmentMatcher, clientAwareness = options.clientAwareness, clientAwarenessName = options.name, clientAwarenessVersion = options.version, devtools = options.devtools, dataMasking = options.dataMasking;\n        if (globalThis.__DEV__ !== false) {\n            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_2__.warnRemovedOption)(options, \"connectToDevTools\", \"ApolloClient\", \"Please use `devtools.enabled` instead.\");\n            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_2__.warnRemovedOption)(options, \"uri\", \"ApolloClient\", \"Please initialize an instance of `HttpLink` with `uri` instead.\");\n            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_2__.warnRemovedOption)(options, \"credentials\", \"ApolloClient\", \"Please initialize an instance of `HttpLink` with `credentials` instead.\");\n            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_2__.warnRemovedOption)(options, \"headers\", \"ApolloClient\", \"Please initialize an instance of `HttpLink` with `headers` instead.\");\n            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_2__.warnRemovedOption)(options, \"name\", \"ApolloClient\", \"Please use the `clientAwareness.name` option instead.\");\n            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_2__.warnRemovedOption)(options, \"version\", \"ApolloClient\", \"Please use the `clientAwareness.version` option instead.\");\n            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_2__.warnRemovedOption)(options, \"typeDefs\", \"ApolloClient\");\n            if (!options.link) {\n                globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(17);\n            }\n        }\n        var link = options.link;\n        if (!link) {\n            link = uri ? new _link_http_index_js__WEBPACK_IMPORTED_MODULE_3__.HttpLink({\n                uri: uri,\n                credentials: credentials,\n                headers: headers\n            }) : _link_core_index_js__WEBPACK_IMPORTED_MODULE_4__.ApolloLink.empty();\n        }\n        this.link = link;\n        this.cache = cache;\n        this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;\n        this.queryDeduplication = queryDeduplication;\n        this.defaultOptions = defaultOptions || Object.create(null);\n        this.typeDefs = typeDefs;\n        this.devtoolsConfig = (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_5__.__assign)({}, devtools), {\n            enabled: (_a = devtools === null || devtools === void 0 ? void 0 : devtools.enabled) !== null && _a !== void 0 ? _a : connectToDevTools\n        });\n        if (this.devtoolsConfig.enabled === undefined) {\n            this.devtoolsConfig.enabled = globalThis.__DEV__ !== false;\n        }\n        if (ssrForceFetchDelay) {\n            setTimeout(function() {\n                return _this.disableNetworkFetches = false;\n            }, ssrForceFetchDelay);\n        }\n        this.watchQuery = this.watchQuery.bind(this);\n        this.query = this.query.bind(this);\n        this.mutate = this.mutate.bind(this);\n        this.watchFragment = this.watchFragment.bind(this);\n        this.resetStore = this.resetStore.bind(this);\n        this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this);\n        this.version = _version_js__WEBPACK_IMPORTED_MODULE_6__.version;\n        this.localState = new _LocalState_js__WEBPACK_IMPORTED_MODULE_7__.LocalState({\n            cache: cache,\n            client: this,\n            resolvers: resolvers,\n            fragmentMatcher: fragmentMatcher\n        });\n        this.queryManager = new _QueryManager_js__WEBPACK_IMPORTED_MODULE_8__.QueryManager({\n            cache: this.cache,\n            link: this.link,\n            defaultOptions: this.defaultOptions,\n            defaultContext: defaultContext,\n            documentTransform: documentTransform,\n            queryDeduplication: queryDeduplication,\n            ssrMode: ssrMode,\n            dataMasking: !!dataMasking,\n            clientAwareness: {\n                name: (_b = clientAwareness === null || clientAwareness === void 0 ? void 0 : clientAwareness.name) !== null && _b !== void 0 ? _b : clientAwarenessName,\n                version: (_c = clientAwareness === null || clientAwareness === void 0 ? void 0 : clientAwareness.version) !== null && _c !== void 0 ? _c : clientAwarenessVersion\n            },\n            localState: this.localState,\n            assumeImmutableResults: assumeImmutableResults,\n            onBroadcast: this.devtoolsConfig.enabled ? function() {\n                if (_this.devToolsHookCb) {\n                    _this.devToolsHookCb({\n                        action: {},\n                        state: {\n                            queries: _this.queryManager.getQueryStore(),\n                            mutations: _this.queryManager.mutationStore || {}\n                        },\n                        dataWithOptimisticResults: _this.cache.extract(true)\n                    });\n                }\n            } : void 0\n        });\n        if (this.devtoolsConfig.enabled) this.connectToDevTools();\n    }\n    Object.defineProperty(ApolloClient.prototype, \"prioritizeCacheValues\", {\n        /**\n         * Whether to prioritize cache values over network results when `query` or `watchQuery` is called.\n         * This will essentially turn a `\"network-only\"` or `\"cache-and-network\"` fetchPolicy into a `\"cache-first\"` fetchPolicy,\n         * but without influencing the `fetchPolicy` of the created `ObservableQuery` long-term.\n         *\n         * This can e.g. be used to prioritize the cache during the first render after SSR.\n         */ get: function() {\n            return this.disableNetworkFetches;\n        },\n        set: function(value) {\n            this.disableNetworkFetches = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    ApolloClient.prototype.connectToDevTools = function() {\n        if (true) {\n            return;\n        }\n        var windowWithDevTools = window;\n        var devtoolsSymbol = Symbol.for(\"apollo.devtools\");\n        (windowWithDevTools[devtoolsSymbol] = windowWithDevTools[devtoolsSymbol] || []).push(this);\n        windowWithDevTools.__APOLLO_CLIENT__ = this;\n        /**\n         * Suggest installing the devtools for developers who don't have them\n         */ if (!hasSuggestedDevtools && globalThis.__DEV__ !== false) {\n            hasSuggestedDevtools = true;\n            if (window.document && window.top === window.self && /^(https?|file):$/.test(window.location.protocol)) {\n                setTimeout(function() {\n                    if (!window.__APOLLO_DEVTOOLS_GLOBAL_HOOK__) {\n                        var nav = window.navigator;\n                        var ua = nav && nav.userAgent;\n                        var url = void 0;\n                        if (typeof ua === \"string\") {\n                            if (ua.indexOf(\"Chrome/\") > -1) {\n                                url = \"https://chrome.google.com/webstore/detail/\" + \"apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm\";\n                            } else if (ua.indexOf(\"Firefox/\") > -1) {\n                                url = \"https://addons.mozilla.org/en-US/firefox/addon/apollo-developer-tools/\";\n                            }\n                        }\n                        if (url) {\n                            globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.log(\"Download the Apollo DevTools for a better development \" + \"experience: %s\", url);\n                        }\n                    }\n                }, 10000);\n            }\n        }\n    };\n    Object.defineProperty(ApolloClient.prototype, \"documentTransform\", {\n        /**\n         * The `DocumentTransform` used to modify GraphQL documents before a request\n         * is made. If a custom `DocumentTransform` is not provided, this will be the\n         * default document transform.\n         */ get: function() {\n            return this.queryManager.documentTransform;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Call this method to terminate any active client processes, making it safe\n     * to dispose of this `ApolloClient` instance.\n     */ ApolloClient.prototype.stop = function() {\n        this.queryManager.stop();\n    };\n    /**\n     * This watches the cache store of the query according to the options specified and\n     * returns an `ObservableQuery`. We can subscribe to this `ObservableQuery` and\n     * receive updated results through an observer when the cache store changes.\n     *\n     * Note that this method is not an implementation of GraphQL subscriptions. Rather,\n     * it uses Apollo's store in order to reactively deliver updates to your query results.\n     *\n     * For example, suppose you call watchQuery on a GraphQL query that fetches a person's\n     * first and last name and this person has a particular object identifier, provided by\n     * dataIdFromObject. Later, a different query fetches that same person's\n     * first and last name and the first name has now changed. Then, any observers associated\n     * with the results of the first query will be updated with a new result object.\n     *\n     * Note that if the cache does not change, the subscriber will *not* be notified.\n     *\n     * See [here](https://medium.com/apollo-stack/the-concepts-of-graphql-bc68bd819be3#.3mb0cbcmc) for\n     * a description of store reactivity.\n     */ ApolloClient.prototype.watchQuery = function(options) {\n        if (this.defaultOptions.watchQuery) {\n            options = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.mergeOptions)(this.defaultOptions.watchQuery, options);\n        }\n        // XXX Overwriting options is probably not the best way to do this long term...\n        if (this.disableNetworkFetches && (options.fetchPolicy === \"network-only\" || options.fetchPolicy === \"cache-and-network\")) {\n            options = (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_5__.__assign)({}, options), {\n                fetchPolicy: \"cache-first\"\n            });\n        }\n        if (globalThis.__DEV__ !== false) {\n            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_2__.warnRemovedOption)(options, \"canonizeResults\", \"client.watchQuery\");\n            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_2__.warnRemovedOption)(options, \"partialRefetch\", \"client.watchQuery\");\n        }\n        return this.queryManager.watchQuery(options);\n    };\n    /**\n     * This resolves a single query according to the options specified and\n     * returns a `Promise` which is either resolved with the resulting data\n     * or rejected with an error.\n     *\n     * @param options - An object of type `QueryOptions` that allows us to\n     * describe how this query should be treated e.g. whether it should hit the\n     * server at all or just resolve from the cache, etc.\n     */ ApolloClient.prototype.query = function(options) {\n        if (this.defaultOptions.query) {\n            options = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.mergeOptions)(this.defaultOptions.query, options);\n        }\n        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(options.fetchPolicy !== \"cache-and-network\", 18);\n        if (this.disableNetworkFetches && options.fetchPolicy === \"network-only\") {\n            options = (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_5__.__assign)({}, options), {\n                fetchPolicy: \"cache-first\"\n            });\n        }\n        if (globalThis.__DEV__ !== false) {\n            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_2__.warnRemovedOption)(options, \"canonizeResults\", \"client.query\");\n            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_2__.warnRemovedOption)(options, \"notifyOnNetworkStatusChange\", \"client.query\", \"This option does not affect `client.query` and can be safely removed.\");\n            if (options.fetchPolicy === \"standby\") {\n                globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(19);\n            }\n        }\n        return this.queryManager.query(options);\n    };\n    /**\n     * This resolves a single mutation according to the options specified and returns a\n     * Promise which is either resolved with the resulting data or rejected with an\n     * error. In some cases both `data` and `errors` might be undefined, for example\n     * when `errorPolicy` is set to `'ignore'`.\n     *\n     * It takes options as an object with the following keys and values:\n     */ ApolloClient.prototype.mutate = function(options) {\n        if (this.defaultOptions.mutate) {\n            options = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.mergeOptions)(this.defaultOptions.mutate, options);\n        }\n        return this.queryManager.mutate(options);\n    };\n    /**\n     * This subscribes to a graphql subscription according to the options specified and returns an\n     * `Observable` which either emits received data or an error.\n     */ ApolloClient.prototype.subscribe = function(options) {\n        var _this = this;\n        var id = this.queryManager.generateQueryId();\n        return this.queryManager.startGraphQLSubscription(options).map(function(result) {\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_5__.__assign)({}, result), {\n                data: _this.queryManager.maskOperation({\n                    document: options.query,\n                    data: result.data,\n                    fetchPolicy: options.fetchPolicy,\n                    id: id\n                })\n            });\n        });\n    };\n    /**\n     * Tries to read some data from the store in the shape of the provided\n     * GraphQL query without making a network request. This method will start at\n     * the root query. To start at a specific id returned by `dataIdFromObject`\n     * use `readFragment`.\n     *\n     * @param optimistic - Set to `true` to allow `readQuery` to return\n     * optimistic results. Is `false` by default.\n     */ ApolloClient.prototype.readQuery = function(options, optimistic) {\n        if (optimistic === void 0) {\n            optimistic = false;\n        }\n        return this.cache.readQuery(options, optimistic);\n    };\n    /**\n     * Watches the cache store of the fragment according to the options specified\n     * and returns an `Observable`. We can subscribe to this\n     * `Observable` and receive updated results through an\n     * observer when the cache store changes.\n     *\n     * You must pass in a GraphQL document with a single fragment or a document\n     * with multiple fragments that represent what you are reading. If you pass\n     * in a document with multiple fragments then you must also specify a\n     * `fragmentName`.\n     *\n     * @since 3.10.0\n     * @param options - An object of type `WatchFragmentOptions` that allows\n     * the cache to identify the fragment and optionally specify whether to react\n     * to optimistic updates.\n     */ ApolloClient.prototype.watchFragment = function(options) {\n        var _a;\n        return this.cache.watchFragment((0,tslib__WEBPACK_IMPORTED_MODULE_5__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_5__.__assign)({}, options), (_a = {}, _a[Symbol.for(\"apollo.dataMasking\")] = this.queryManager.dataMasking, _a)));\n    };\n    /**\n     * Tries to read some data from the store in the shape of the provided\n     * GraphQL fragment without making a network request. This method will read a\n     * GraphQL fragment from any arbitrary id that is currently cached, unlike\n     * `readQuery` which will only read from the root query.\n     *\n     * You must pass in a GraphQL document with a single fragment or a document\n     * with multiple fragments that represent what you are reading. If you pass\n     * in a document with multiple fragments then you must also specify a\n     * `fragmentName`.\n     *\n     * @param optimistic - Set to `true` to allow `readFragment` to return\n     * optimistic results. Is `false` by default.\n     */ ApolloClient.prototype.readFragment = function(options, optimistic) {\n        if (optimistic === void 0) {\n            optimistic = false;\n        }\n        return this.cache.readFragment(options, optimistic);\n    };\n    /**\n     * Writes some data in the shape of the provided GraphQL query directly to\n     * the store. This method will start at the root query. To start at a\n     * specific id returned by `dataIdFromObject` then use `writeFragment`.\n     */ ApolloClient.prototype.writeQuery = function(options) {\n        var ref = this.cache.writeQuery(options);\n        if (options.broadcast !== false) {\n            this.queryManager.broadcastQueries();\n        }\n        return ref;\n    };\n    /**\n     * Writes some data in the shape of the provided GraphQL fragment directly to\n     * the store. This method will write to a GraphQL fragment from any arbitrary\n     * id that is currently cached, unlike `writeQuery` which will only write\n     * from the root query.\n     *\n     * You must pass in a GraphQL document with a single fragment or a document\n     * with multiple fragments that represent what you are writing. If you pass\n     * in a document with multiple fragments then you must also specify a\n     * `fragmentName`.\n     */ ApolloClient.prototype.writeFragment = function(options) {\n        var ref = this.cache.writeFragment(options);\n        if (options.broadcast !== false) {\n            this.queryManager.broadcastQueries();\n        }\n        return ref;\n    };\n    ApolloClient.prototype.__actionHookForDevTools = function(cb) {\n        this.devToolsHookCb = cb;\n    };\n    ApolloClient.prototype.__requestRaw = function(payload) {\n        return (0,_link_core_index_js__WEBPACK_IMPORTED_MODULE_9__.execute)(this.link, payload);\n    };\n    /**\n     * Resets your entire store by clearing out your cache and then re-executing\n     * all of your active queries. This makes it so that you may guarantee that\n     * there is no data left in your store from a time before you called this\n     * method.\n     *\n     * `resetStore()` is useful when your user just logged out. You’ve removed the\n     * user session, and you now want to make sure that any references to data you\n     * might have fetched while the user session was active is gone.\n     *\n     * It is important to remember that `resetStore()` *will* refetch any active\n     * queries. This means that any components that might be mounted will execute\n     * their queries again using your network interface. If you do not want to\n     * re-execute any queries then you should make sure to stop watching any\n     * active queries.\n     */ ApolloClient.prototype.resetStore = function() {\n        var _this = this;\n        return Promise.resolve().then(function() {\n            return _this.queryManager.clearStore({\n                discardWatches: false\n            });\n        }).then(function() {\n            return Promise.all(_this.resetStoreCallbacks.map(function(fn) {\n                return fn();\n            }));\n        }).then(function() {\n            return _this.reFetchObservableQueries();\n        });\n    };\n    /**\n     * Remove all data from the store. Unlike `resetStore`, `clearStore` will\n     * not refetch any active queries.\n     */ ApolloClient.prototype.clearStore = function() {\n        var _this = this;\n        return Promise.resolve().then(function() {\n            return _this.queryManager.clearStore({\n                discardWatches: true\n            });\n        }).then(function() {\n            return Promise.all(_this.clearStoreCallbacks.map(function(fn) {\n                return fn();\n            }));\n        });\n    };\n    /**\n     * Allows callbacks to be registered that are executed when the store is\n     * reset. `onResetStore` returns an unsubscribe function that can be used\n     * to remove registered callbacks.\n     */ ApolloClient.prototype.onResetStore = function(cb) {\n        var _this = this;\n        this.resetStoreCallbacks.push(cb);\n        return function() {\n            _this.resetStoreCallbacks = _this.resetStoreCallbacks.filter(function(c) {\n                return c !== cb;\n            });\n        };\n    };\n    /**\n     * Allows callbacks to be registered that are executed when the store is\n     * cleared. `onClearStore` returns an unsubscribe function that can be used\n     * to remove registered callbacks.\n     */ ApolloClient.prototype.onClearStore = function(cb) {\n        var _this = this;\n        this.clearStoreCallbacks.push(cb);\n        return function() {\n            _this.clearStoreCallbacks = _this.clearStoreCallbacks.filter(function(c) {\n                return c !== cb;\n            });\n        };\n    };\n    /**\n     * Refetches all of your active queries.\n     *\n     * `reFetchObservableQueries()` is useful if you want to bring the client back to proper state in case of a network outage\n     *\n     * It is important to remember that `reFetchObservableQueries()` *will* refetch any active\n     * queries. This means that any components that might be mounted will execute\n     * their queries again using your network interface. If you do not want to\n     * re-execute any queries then you should make sure to stop watching any\n     * active queries.\n     * Takes optional parameter `includeStandby` which will include queries in standby-mode when refetching.\n     */ ApolloClient.prototype.reFetchObservableQueries = function(includeStandby) {\n        return this.queryManager.reFetchObservableQueries(includeStandby);\n    };\n    /**\n     * Refetches specified active queries. Similar to \"reFetchObservableQueries()\" but with a specific list of queries.\n     *\n     * `refetchQueries()` is useful for use cases to imperatively refresh a selection of queries.\n     *\n     * It is important to remember that `refetchQueries()` *will* refetch specified active\n     * queries. This means that any components that might be mounted will execute\n     * their queries again using your network interface. If you do not want to\n     * re-execute any queries then you should make sure to stop watching any\n     * active queries.\n     */ ApolloClient.prototype.refetchQueries = function(options) {\n        var map = this.queryManager.refetchQueries(options);\n        var queries = [];\n        var results = [];\n        map.forEach(function(result, obsQuery) {\n            queries.push(obsQuery);\n            results.push(result);\n        });\n        var result = Promise.all(results);\n        // In case you need the raw results immediately, without awaiting\n        // Promise.all(results):\n        result.queries = queries;\n        result.results = results;\n        // If you decide to ignore the result Promise because you're using\n        // result.queries and result.results instead, you shouldn't have to worry\n        // about preventing uncaught rejections for the Promise.all result.\n        result.catch(function(error) {\n            globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.debug(20, error);\n        });\n        return result;\n    };\n    /**\n     * Get all currently active `ObservableQuery` objects, in a `Map` keyed by\n     * query ID strings.\n     *\n     * An \"active\" query is one that has observers and a `fetchPolicy` other than\n     * \"standby\" or \"cache-only\".\n     *\n     * You can include all `ObservableQuery` objects (including the inactive ones)\n     * by passing \"all\" instead of \"active\", or you can include just a subset of\n     * active queries by passing an array of query names or DocumentNode objects.\n     */ ApolloClient.prototype.getObservableQueries = function(include) {\n        if (include === void 0) {\n            include = \"active\";\n        }\n        return this.queryManager.getObservableQueries(include);\n    };\n    /**\n     * Exposes the cache's complete state, in a serializable format for later restoration.\n     */ ApolloClient.prototype.extract = function(optimistic) {\n        return this.cache.extract(optimistic);\n    };\n    /**\n     * Replaces existing state in the cache (if any) with the values expressed by\n     * `serializedState`.\n     *\n     * Called when hydrating a cache (server side rendering, or offline storage),\n     * and also (potentially) during hot reloads.\n     */ ApolloClient.prototype.restore = function(serializedState) {\n        return this.cache.restore(serializedState);\n    };\n    /**\n     * Add additional local resolvers.\n     *\n     * @deprecated `addResolvers` will been removed in Apollo Client 4.0. It is\n     * safe to continue using this method in Apollo Client 3.x.\n     *\n     * **Recommended now**\n     *\n     * No action needed\n     *\n     * **When upgrading**\n     *\n     * Use `client.localState.addResolvers(resolvers)`. Alternatively, store\n     * the `LocalState` instance in a separate variable and call `addResolvers` on\n     * that.\n     */ ApolloClient.prototype.addResolvers = function(resolvers) {\n        this.localState.addResolvers(resolvers);\n    };\n    /**\n     * Set (override existing) local resolvers.\n     *\n     * @deprecated `setResolvers` will been removed in Apollo Client 4.0. It is\n     * safe to continue using this method in Apollo Client 3.x.\n     *\n     * **Recommended now**\n     *\n     * If possible, stop using the `setResolvers` method.\n     *\n     * **When upgrading**\n     *\n     * Remove the use of `setResolvers`.\n     */ ApolloClient.prototype.setResolvers = function(resolvers) {\n        this.localState.setResolvers(resolvers);\n    };\n    /**\n     * Get all registered local resolvers.\n     *\n     * @deprecated `getResolvers` will be removed in Apollo Client 4.0. It is\n     * safe to continue using this method in Apollo Client 3.x.\n     *\n     * **Recommended now**\n     *\n     * If possible, stop using the `getResolvers` method.\n     *\n     * **When upgrading**\n     *\n     * Remove the use of `getResolvers`.\n     */ ApolloClient.prototype.getResolvers = function() {\n        return this.localState.getResolvers();\n    };\n    /**\n     * Set a custom local state fragment matcher.\n     *\n     * @deprecated Custom fragment matchers will no longer be supported in Apollo\n     * Client 4.0 and has been replaced by `cache.fragmentMatches`. It is safe to\n     * continue using `setLocalStateFragmentMatcher` in Apollo Client 3.x.\n     *\n     * **Recommended now**\n     *\n     * No action needed\n     *\n     * **When upgrading**\n     *\n     * Leverage `possibleTypes` with `InMemoryCache` to ensure fragments match\n     * correctly. Ensure `possibleTypes` include local types if needed. If working\n     * with a 3rd party cache implementation, ensure the 3rd party cache implements\n     * the `cache.fragmentMatches` method. This function should no longer be used.\n     */ ApolloClient.prototype.setLocalStateFragmentMatcher = function(fragmentMatcher) {\n        this.localState.setFragmentMatcher(fragmentMatcher);\n    };\n    /**\n     * Define a new ApolloLink (or link chain) that Apollo Client will use.\n     */ ApolloClient.prototype.setLink = function(newLink) {\n        this.link = this.queryManager.link = newLink;\n    };\n    Object.defineProperty(ApolloClient.prototype, \"defaultContext\", {\n        get: function() {\n            return this.queryManager.defaultContext;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return ApolloClient;\n}();\n\nif (globalThis.__DEV__ !== false) {\n    ApolloClient.prototype.getMemoryInternals = _utilities_caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_10__.getApolloClientMemoryInternals;\n} //# sourceMappingURL=ApolloClient.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/core/ApolloClient.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/core/LocalState.js":
/*!********************************************************!*\
  !*** ./node_modules/@apollo/client/core/LocalState.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LocalState: () => (/* binding */ LocalState)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! graphql */ \"(ssr)/./node_modules/graphql/language/visitor.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! graphql */ \"(ssr)/./node_modules/graphql/language/predicates.mjs\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/mergeDeep.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/directives.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/transform.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/fragments.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _cache_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../cache/index.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/reactiveVars.js\");\n\n\n\n\n\nvar LocalState = /** @class */ function() {\n    function LocalState(_a) {\n        var cache = _a.cache, client = _a.client, resolvers = _a.resolvers, fragmentMatcher = _a.fragmentMatcher;\n        this.selectionsToResolveCache = new WeakMap();\n        this.cache = cache;\n        if (client) {\n            this.client = client;\n        }\n        if (resolvers) {\n            this.addResolvers(resolvers);\n        }\n        if (fragmentMatcher) {\n            this.setFragmentMatcher(fragmentMatcher);\n        }\n    }\n    LocalState.prototype.addResolvers = function(resolvers) {\n        var _this = this;\n        this.resolvers = this.resolvers || {};\n        if (Array.isArray(resolvers)) {\n            resolvers.forEach(function(resolverGroup) {\n                _this.resolvers = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.mergeDeep)(_this.resolvers, resolverGroup);\n            });\n        } else {\n            this.resolvers = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.mergeDeep)(this.resolvers, resolvers);\n        }\n    };\n    LocalState.prototype.setResolvers = function(resolvers) {\n        this.resolvers = {};\n        this.addResolvers(resolvers);\n    };\n    LocalState.prototype.getResolvers = function() {\n        return this.resolvers || {};\n    };\n    // Run local client resolvers against the incoming query and remote data.\n    // Locally resolved field values are merged with the incoming remote data,\n    // and returned. Note that locally resolved fields will overwrite\n    // remote data using the same field name.\n    LocalState.prototype.runResolvers = function(_a) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, arguments, void 0, function(_b) {\n            var document = _b.document, remoteResult = _b.remoteResult, context = _b.context, variables = _b.variables, _c = _b.onlyRunForcedResolvers, onlyRunForcedResolvers = _c === void 0 ? false : _c;\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function(_d) {\n                if (document) {\n                    return [\n                        2 /*return*/ ,\n                        this.resolveDocument(document, remoteResult.data, context, variables, this.fragmentMatcher, onlyRunForcedResolvers).then(function(localResult) {\n                            return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, remoteResult), {\n                                data: localResult.result\n                            });\n                        })\n                    ];\n                }\n                return [\n                    2 /*return*/ ,\n                    remoteResult\n                ];\n            });\n        });\n    };\n    LocalState.prototype.setFragmentMatcher = function(fragmentMatcher) {\n        this.fragmentMatcher = fragmentMatcher;\n    };\n    LocalState.prototype.getFragmentMatcher = function() {\n        return this.fragmentMatcher;\n    };\n    // Client queries contain everything in the incoming document (if a @client\n    // directive is found).\n    LocalState.prototype.clientQuery = function(document) {\n        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.hasDirectives)([\n            \"client\"\n        ], document)) {\n            if (this.resolvers) {\n                return document;\n            }\n        }\n        return null;\n    };\n    // Server queries are stripped of all @client based selection sets.\n    LocalState.prototype.serverQuery = function(document) {\n        return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.removeClientSetsFromDocument)(document);\n    };\n    LocalState.prototype.prepareContext = function(context) {\n        var cache = this.cache;\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, context), {\n            cache: cache,\n            // Getting an entry's cache key is useful for local state resolvers.\n            getCacheKey: function(obj) {\n                return cache.identify(obj);\n            }\n        });\n    };\n    // To support `@client @export(as: \"someVar\")` syntax, we'll first resolve\n    // @client @export fields locally, then pass the resolved values back to be\n    // used alongside the original operation variables.\n    LocalState.prototype.addExportedVariables = function(document_1) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, arguments, void 0, function(document, variables, context) {\n            if (variables === void 0) {\n                variables = {};\n            }\n            if (context === void 0) {\n                context = {};\n            }\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function(_a) {\n                if (document) {\n                    return [\n                        2 /*return*/ ,\n                        this.resolveDocument(document, this.buildRootValueFromCache(document, variables) || {}, this.prepareContext(context), variables).then(function(data) {\n                            return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, variables), data.exportedVariables);\n                        })\n                    ];\n                }\n                return [\n                    2 /*return*/ ,\n                    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, variables)\n                ];\n            });\n        });\n    };\n    LocalState.prototype.shouldForceResolvers = function(document) {\n        var forceResolvers = false;\n        (0,graphql__WEBPACK_IMPORTED_MODULE_5__.visit)(document, {\n            Directive: {\n                enter: function(node) {\n                    if (node.name.value === \"client\" && node.arguments) {\n                        forceResolvers = node.arguments.some(function(arg) {\n                            return arg.name.value === \"always\" && arg.value.kind === \"BooleanValue\" && arg.value.value === true;\n                        });\n                        if (forceResolvers) {\n                            return graphql__WEBPACK_IMPORTED_MODULE_5__.BREAK;\n                        }\n                    }\n                }\n            }\n        });\n        return forceResolvers;\n    };\n    // Query the cache and return matching data.\n    LocalState.prototype.buildRootValueFromCache = function(document, variables) {\n        return this.cache.diff({\n            query: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.buildQueryFromSelectionSet)(document),\n            variables: variables,\n            returnPartialData: true,\n            optimistic: false\n        }).result;\n    };\n    LocalState.prototype.resolveDocument = function(document_1, rootValue_1) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, arguments, void 0, function(document, rootValue, context, variables, fragmentMatcher, onlyRunForcedResolvers) {\n            var mainDefinition, fragments, fragmentMap, selectionsToResolve, definitionOperation, defaultOperationType, _a, cache, client, execContext, isClientFieldDescendant;\n            if (context === void 0) {\n                context = {};\n            }\n            if (variables === void 0) {\n                variables = {};\n            }\n            if (fragmentMatcher === void 0) {\n                fragmentMatcher = function() {\n                    return true;\n                };\n            }\n            if (onlyRunForcedResolvers === void 0) {\n                onlyRunForcedResolvers = false;\n            }\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function(_b) {\n                mainDefinition = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_6__.getMainDefinition)(document);\n                fragments = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_6__.getFragmentDefinitions)(document);\n                fragmentMap = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.createFragmentMap)(fragments);\n                selectionsToResolve = this.collectSelectionsToResolve(mainDefinition, fragmentMap);\n                definitionOperation = mainDefinition.operation;\n                defaultOperationType = definitionOperation ? definitionOperation.charAt(0).toUpperCase() + definitionOperation.slice(1) : \"Query\";\n                _a = this, cache = _a.cache, client = _a.client;\n                execContext = {\n                    fragmentMap: fragmentMap,\n                    context: (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, context), {\n                        cache: cache,\n                        client: client\n                    }),\n                    variables: variables,\n                    fragmentMatcher: fragmentMatcher,\n                    defaultOperationType: defaultOperationType,\n                    exportedVariables: {},\n                    selectionsToResolve: selectionsToResolve,\n                    onlyRunForcedResolvers: onlyRunForcedResolvers\n                };\n                isClientFieldDescendant = false;\n                return [\n                    2 /*return*/ ,\n                    this.resolveSelectionSet(mainDefinition.selectionSet, isClientFieldDescendant, rootValue, execContext).then(function(result) {\n                        return {\n                            result: result,\n                            exportedVariables: execContext.exportedVariables\n                        };\n                    })\n                ];\n            });\n        });\n    };\n    LocalState.prototype.resolveSelectionSet = function(selectionSet, isClientFieldDescendant, rootValue, execContext) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function() {\n            var fragmentMap, context, variables, resultsToMerge, execute;\n            var _this = this;\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function(_a) {\n                fragmentMap = execContext.fragmentMap, context = execContext.context, variables = execContext.variables;\n                resultsToMerge = [\n                    rootValue\n                ];\n                execute = function(selection) {\n                    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(_this, void 0, void 0, function() {\n                        var fragment, typeCondition;\n                        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function(_a) {\n                            if (!isClientFieldDescendant && !execContext.selectionsToResolve.has(selection)) {\n                                // Skip selections without @client directives\n                                // (still processing if one of the ancestors or one of the child fields has @client directive)\n                                return [\n                                    2 /*return*/ \n                                ];\n                            }\n                            if (!(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.shouldInclude)(selection, variables)) {\n                                // Skip this entirely.\n                                return [\n                                    2 /*return*/ \n                                ];\n                            }\n                            if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.isField)(selection)) {\n                                return [\n                                    2 /*return*/ ,\n                                    this.resolveField(selection, isClientFieldDescendant, rootValue, execContext).then(function(fieldResult) {\n                                        var _a;\n                                        if (typeof fieldResult !== \"undefined\") {\n                                            resultsToMerge.push((_a = {}, _a[(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.resultKeyNameFromField)(selection)] = fieldResult, _a));\n                                        }\n                                    })\n                                ];\n                            }\n                            if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.isInlineFragment)(selection)) {\n                                fragment = selection;\n                            } else {\n                                // This is a named fragment.\n                                fragment = fragmentMap[selection.name.value];\n                                (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(fragment, 21, selection.name.value);\n                            }\n                            if (fragment && fragment.typeCondition) {\n                                typeCondition = fragment.typeCondition.name.value;\n                                if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {\n                                    return [\n                                        2 /*return*/ ,\n                                        this.resolveSelectionSet(fragment.selectionSet, isClientFieldDescendant, rootValue, execContext).then(function(fragmentResult) {\n                                            resultsToMerge.push(fragmentResult);\n                                        })\n                                    ];\n                                }\n                            }\n                            return [\n                                2 /*return*/ \n                            ];\n                        });\n                    });\n                };\n                return [\n                    2 /*return*/ ,\n                    Promise.all(selectionSet.selections.map(execute)).then(function() {\n                        return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.mergeDeepArray)(resultsToMerge);\n                    })\n                ];\n            });\n        });\n    };\n    LocalState.prototype.resolveField = function(field, isClientFieldDescendant, rootValue, execContext) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function() {\n            var variables, fieldName, aliasedFieldName, aliasUsed, defaultResult, resultPromise, resolverType, resolverMap, resolve;\n            var _this = this;\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function(_a) {\n                if (!rootValue) {\n                    return [\n                        2 /*return*/ ,\n                        null\n                    ];\n                }\n                variables = execContext.variables;\n                fieldName = field.name.value;\n                aliasedFieldName = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.resultKeyNameFromField)(field);\n                aliasUsed = fieldName !== aliasedFieldName;\n                defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];\n                resultPromise = Promise.resolve(defaultResult);\n                // Usually all local resolvers are run when passing through here, but\n                // if we've specifically identified that we only want to run forced\n                // resolvers (that is, resolvers for fields marked with\n                // `@client(always: true)`), then we'll skip running non-forced resolvers.\n                if (!execContext.onlyRunForcedResolvers || this.shouldForceResolvers(field)) {\n                    resolverType = rootValue.__typename || execContext.defaultOperationType;\n                    resolverMap = this.resolvers && this.resolvers[resolverType];\n                    if (resolverMap) {\n                        resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];\n                        if (resolve) {\n                            resultPromise = Promise.resolve(// In case the resolve function accesses reactive variables,\n                            // set cacheSlot to the current cache instance.\n                            _cache_index_js__WEBPACK_IMPORTED_MODULE_9__.cacheSlot.withValue(this.cache, resolve, [\n                                rootValue,\n                                (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.argumentsObjectFromField)(field, variables),\n                                execContext.context,\n                                {\n                                    field: field,\n                                    fragmentMap: execContext.fragmentMap\n                                }\n                            ]));\n                        }\n                    }\n                }\n                return [\n                    2 /*return*/ ,\n                    resultPromise.then(function(result) {\n                        var _a, _b;\n                        if (result === void 0) {\n                            result = defaultResult;\n                        }\n                        // If an @export directive is associated with the current field, store\n                        // the `as` export variable name and current result for later use.\n                        if (field.directives) {\n                            field.directives.forEach(function(directive) {\n                                if (directive.name.value === \"export\" && directive.arguments) {\n                                    directive.arguments.forEach(function(arg) {\n                                        if (arg.name.value === \"as\" && arg.value.kind === \"StringValue\") {\n                                            execContext.exportedVariables[arg.value.value] = result;\n                                        }\n                                    });\n                                }\n                            });\n                        }\n                        // Handle all scalar types here.\n                        if (!field.selectionSet) {\n                            return result;\n                        }\n                        // From here down, the field has a selection set, which means it's trying\n                        // to query a GraphQLObjectType.\n                        if (result == null) {\n                            // Basically any field in a GraphQL response can be null, or missing\n                            return result;\n                        }\n                        var isClientField = (_b = (_a = field.directives) === null || _a === void 0 ? void 0 : _a.some(function(d) {\n                            return d.name.value === \"client\";\n                        })) !== null && _b !== void 0 ? _b : false;\n                        if (Array.isArray(result)) {\n                            return _this.resolveSubSelectedArray(field, isClientFieldDescendant || isClientField, result, execContext);\n                        }\n                        // Returned value is an object, and the query has a sub-selection. Recurse.\n                        if (field.selectionSet) {\n                            return _this.resolveSelectionSet(field.selectionSet, isClientFieldDescendant || isClientField, result, execContext);\n                        }\n                    })\n                ];\n            });\n        });\n    };\n    LocalState.prototype.resolveSubSelectedArray = function(field, isClientFieldDescendant, result, execContext) {\n        var _this = this;\n        return Promise.all(result.map(function(item) {\n            if (item === null) {\n                return null;\n            }\n            // This is a nested array, recurse.\n            if (Array.isArray(item)) {\n                return _this.resolveSubSelectedArray(field, isClientFieldDescendant, item, execContext);\n            }\n            // This is an object, run the selection set on it.\n            if (field.selectionSet) {\n                return _this.resolveSelectionSet(field.selectionSet, isClientFieldDescendant, item, execContext);\n            }\n        }));\n    };\n    // Collect selection nodes on paths from document root down to all @client directives.\n    // This function takes into account transitive fragment spreads.\n    // Complexity equals to a single `visit` over the full document.\n    LocalState.prototype.collectSelectionsToResolve = function(mainDefinition, fragmentMap) {\n        var isSingleASTNode = function(node) {\n            return !Array.isArray(node);\n        };\n        var selectionsToResolveCache = this.selectionsToResolveCache;\n        function collectByDefinition(definitionNode) {\n            if (!selectionsToResolveCache.has(definitionNode)) {\n                var matches_1 = new Set();\n                selectionsToResolveCache.set(definitionNode, matches_1);\n                (0,graphql__WEBPACK_IMPORTED_MODULE_5__.visit)(definitionNode, {\n                    Directive: function(node, _, __, ___, ancestors) {\n                        if (node.name.value === \"client\") {\n                            ancestors.forEach(function(node) {\n                                if (isSingleASTNode(node) && (0,graphql__WEBPACK_IMPORTED_MODULE_10__.isSelectionNode)(node)) {\n                                    matches_1.add(node);\n                                }\n                            });\n                        }\n                    },\n                    FragmentSpread: function(spread, _, __, ___, ancestors) {\n                        var fragment = fragmentMap[spread.name.value];\n                        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(fragment, 22, spread.name.value);\n                        var fragmentSelections = collectByDefinition(fragment);\n                        if (fragmentSelections.size > 0) {\n                            // Fragment for this spread contains @client directive (either directly or transitively)\n                            // Collect selection nodes on paths from the root down to fields with the @client directive\n                            ancestors.forEach(function(node) {\n                                if (isSingleASTNode(node) && (0,graphql__WEBPACK_IMPORTED_MODULE_10__.isSelectionNode)(node)) {\n                                    matches_1.add(node);\n                                }\n                            });\n                            matches_1.add(spread);\n                            fragmentSelections.forEach(function(selection) {\n                                matches_1.add(selection);\n                            });\n                        }\n                    }\n                });\n            }\n            return selectionsToResolveCache.get(definitionNode);\n        }\n        return collectByDefinition(mainDefinition);\n    };\n    return LocalState;\n}();\n //# sourceMappingURL=LocalState.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/core/LocalState.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/core/ObservableQuery.js":
/*!*************************************************************!*\
  !*** ./node_modules/@apollo/client/core/ObservableQuery.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ObservableQuery: () => (/* binding */ ObservableQuery),\n/* harmony export */   logMissingFieldErrors: () => (/* binding */ logMissingFieldErrors)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @wry/equality */ \"(ssr)/./node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var _networkStatus_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./networkStatus.js */ \"(ssr)/./node_modules/@apollo/client/core/networkStatus.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/compact.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/cloneDeep.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/promises/preventUnhandledRejection.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/observables/iteration.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/zen-observable-ts/module.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/observables/subclassing.js\");\n/* harmony import */ var _errors_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../errors/index.js */ \"(ssr)/./node_modules/@apollo/client/errors/index.js\");\n/* harmony import */ var _equalByQuery_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./equalByQuery.js */ \"(ssr)/./node_modules/@apollo/client/core/equalByQuery.js\");\n/* harmony import */ var optimism__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! optimism */ \"(ssr)/./node_modules/optimism/lib/index.js\");\n/* harmony import */ var _utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utilities/deprecation/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/deprecation/index.js\");\n\n\n\n\n\n\n\n\n\nvar assign = Object.assign, hasOwnProperty = Object.hasOwnProperty;\nvar ObservableQuery = /** @class */ function(_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(ObservableQuery, _super);\n    function ObservableQuery(_a) {\n        var queryManager = _a.queryManager, queryInfo = _a.queryInfo, options = _a.options;\n        var _this = this;\n        var startedInactive = ObservableQuery.inactiveOnCreation.getValue();\n        _this = _super.call(this, function(observer) {\n            _this._getOrCreateQuery();\n            // Zen Observable has its own error function, so in order to log correctly\n            // we need to provide a custom error callback.\n            try {\n                var subObserver = observer._subscription._observer;\n                if (subObserver && !subObserver.error) {\n                    subObserver.error = defaultSubscriptionObserverErrorCallback;\n                }\n            } catch (_a) {}\n            var first = !_this.observers.size;\n            _this.observers.add(observer);\n            // Deliver most recent error or result.\n            var last = _this.last;\n            if (last && last.error) {\n                observer.error && observer.error(last.error);\n            } else if (last && last.result) {\n                observer.next && observer.next(_this.maskResult(last.result));\n            }\n            // Initiate observation of this query if it hasn't been reported to\n            // the QueryManager yet.\n            if (first) {\n                // Blindly catching here prevents unhandled promise rejections,\n                // and is safe because the ObservableQuery handles this error with\n                // this.observer.error, so we're not just swallowing the error by\n                // ignoring it here.\n                _this.reobserve().catch(function() {});\n            }\n            return function() {\n                if (_this.observers.delete(observer) && !_this.observers.size) {\n                    _this.tearDownQuery();\n                }\n            };\n        }) || this;\n        _this.observers = new Set();\n        _this.subscriptions = new Set();\n        _this.dirty = false;\n        _this._getOrCreateQuery = function() {\n            if (startedInactive) {\n                queryManager[\"queries\"].set(_this.queryId, queryInfo);\n                startedInactive = false;\n            }\n            return _this.queryManager.getOrCreateQuery(_this.queryId);\n        };\n        // related classes\n        _this.queryInfo = queryInfo;\n        _this.queryManager = queryManager;\n        // active state\n        _this.waitForOwnResult = skipCacheDataFor(options.fetchPolicy);\n        _this.isTornDown = false;\n        _this.subscribeToMore = _this.subscribeToMore.bind(_this);\n        _this.maskResult = _this.maskResult.bind(_this);\n        var _b = queryManager.defaultOptions.watchQuery, _c = _b === void 0 ? {} : _b, _d = _c.fetchPolicy, defaultFetchPolicy = _d === void 0 ? \"cache-first\" : _d;\n        var _e = options.fetchPolicy, fetchPolicy = _e === void 0 ? defaultFetchPolicy : _e, // Make sure we don't store \"standby\" as the initialFetchPolicy.\n        _f = options.initialFetchPolicy, // Make sure we don't store \"standby\" as the initialFetchPolicy.\n        initialFetchPolicy = _f === void 0 ? fetchPolicy === \"standby\" ? defaultFetchPolicy : fetchPolicy : _f;\n        _this.options = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, options), {\n            // Remember the initial options.fetchPolicy so we can revert back to this\n            // policy when variables change. This information can also be specified\n            // (or overridden) by providing options.initialFetchPolicy explicitly.\n            initialFetchPolicy: initialFetchPolicy,\n            // This ensures this.options.fetchPolicy always has a string value, in\n            // case options.fetchPolicy was not provided.\n            fetchPolicy: fetchPolicy\n        });\n        _this.queryId = queryInfo.queryId || queryManager.generateQueryId();\n        var opDef = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.getOperationDefinition)(_this.query);\n        _this.queryName = opDef && opDef.name && opDef.name.value;\n        return _this;\n    }\n    Object.defineProperty(ObservableQuery.prototype, \"query\", {\n        // The `query` computed property will always reflect the document transformed\n        // by the last run query. `this.options.query` will always reflect the raw\n        // untransformed query to ensure document transforms with runtime conditionals\n        // are run on the original document.\n        get: function() {\n            return this.lastQuery || this.options.query;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ObservableQuery.prototype, \"variables\", {\n        // Computed shorthand for this.options.variables, preserved for\n        // backwards compatibility.\n        /**\n         * An object containing the variables that were provided for the query.\n         */ get: function() {\n            return this.options.variables;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * @deprecated `result` will be removed in Apollo Client 4.0.\n     *\n     * **Recommended now**\n     *\n     * If you continue to need this functionality, subscribe to `ObservableQuery`\n     * to get the first value emitted from the observable, then immediately unsubscribe.\n     *\n     * **When upgrading**\n     *\n     * Use RxJS's [`firstResultFrom`](https://rxjs.dev/api/index/function/firstValueFrom) function to mimic this functionality.\n     *\n     * ```ts\n     * const result = await firstValueFrom(from(observableQuery));\n     * ```\n     */ ObservableQuery.prototype.result = function() {\n        var _this = this;\n        if (globalThis.__DEV__ !== false) {\n            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_5__.warnDeprecated)(\"observableQuery.result\", function() {\n                globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(23);\n            });\n        }\n        return new Promise(function(resolve, reject) {\n            // TODO: this code doesn’t actually make sense insofar as the observer\n            // will never exist in this.observers due how zen-observable wraps observables.\n            // https://github.com/zenparsing/zen-observable/blob/master/src/Observable.js#L169\n            var observer = {\n                next: function(result) {\n                    resolve(result);\n                    // Stop the query within the QueryManager if we can before\n                    // this function returns.\n                    //\n                    // We do this in order to prevent observers piling up within\n                    // the QueryManager. Notice that we only fully unsubscribe\n                    // from the subscription in a setTimeout(..., 0)  call. This call can\n                    // actually be handled by the browser at a much later time. If queries\n                    // are fired in the meantime, observers that should have been removed\n                    // from the QueryManager will continue to fire, causing an unnecessary\n                    // performance hit.\n                    _this.observers.delete(observer);\n                    if (!_this.observers.size) {\n                        _this.queryManager.removeQuery(_this.queryId);\n                    }\n                    setTimeout(function() {\n                        subscription.unsubscribe();\n                    }, 0);\n                },\n                error: reject\n            };\n            var subscription = _this.subscribe(observer);\n        });\n    };\n    /** @internal */ ObservableQuery.prototype.resetDiff = function() {\n        this.queryInfo.resetDiff();\n    };\n    ObservableQuery.prototype.getCurrentFullResult = function(saveAsLastResult) {\n        var _this = this;\n        if (saveAsLastResult === void 0) {\n            saveAsLastResult = true;\n        }\n        // Use the last result as long as the variables match this.variables.\n        var lastResult = (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_5__.muteDeprecations)(\"getLastResult\", function() {\n            return _this.getLastResult(true);\n        });\n        var networkStatus = this.queryInfo.networkStatus || lastResult && lastResult.networkStatus || _networkStatus_js__WEBPACK_IMPORTED_MODULE_6__.NetworkStatus.ready;\n        var result = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, lastResult), {\n            loading: (0,_networkStatus_js__WEBPACK_IMPORTED_MODULE_6__.isNetworkRequestInFlight)(networkStatus),\n            networkStatus: networkStatus\n        });\n        var _a = this.options.fetchPolicy, fetchPolicy = _a === void 0 ? \"cache-first\" : _a;\n        if (// These fetch policies should never deliver data from the cache, unless\n        // redelivering a previously delivered result.\n        skipCacheDataFor(fetchPolicy) || // If this.options.query has @client(always: true) fields, we cannot\n        // trust diff.result, since it was read from the cache without running\n        // local resolvers (and it's too late to run resolvers now, since we must\n        // return a result synchronously).\n        this.queryManager.getDocumentInfo(this.query).hasForcedResolvers) {\n        // Fall through.\n        } else if (this.waitForOwnResult) {\n            // This would usually be a part of `QueryInfo.getDiff()`.\n            // which we skip in the waitForOwnResult case since we are not\n            // interested in the diff.\n            this.queryInfo[\"updateWatch\"]();\n        } else {\n            var diff = this.queryInfo.getDiff();\n            if (diff.complete || this.options.returnPartialData) {\n                result.data = diff.result;\n            }\n            if ((0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(result.data, {})) {\n                result.data = void 0;\n            }\n            if (diff.complete) {\n                // Similar to setting result.partial to false, but taking advantage of the\n                // falsiness of missing fields.\n                delete result.partial;\n                // If the diff is complete, and we're using a FetchPolicy that\n                // terminates after a complete cache read, we can assume the next result\n                // we receive will have NetworkStatus.ready and !loading.\n                if (diff.complete && result.networkStatus === _networkStatus_js__WEBPACK_IMPORTED_MODULE_6__.NetworkStatus.loading && (fetchPolicy === \"cache-first\" || fetchPolicy === \"cache-only\")) {\n                    result.networkStatus = _networkStatus_js__WEBPACK_IMPORTED_MODULE_6__.NetworkStatus.ready;\n                    result.loading = false;\n                }\n            } else {\n                result.partial = true;\n            }\n            // We need to check for both both `error` and `errors` field because there\n            // are cases where sometimes `error` is set, but not `errors` and\n            // vice-versa. This will be updated in the next major version when\n            // `errors` is deprecated in favor of `error`.\n            if (result.networkStatus === _networkStatus_js__WEBPACK_IMPORTED_MODULE_6__.NetworkStatus.ready && (result.error || result.errors)) {\n                result.networkStatus = _networkStatus_js__WEBPACK_IMPORTED_MODULE_6__.NetworkStatus.error;\n            }\n            if (globalThis.__DEV__ !== false && !diff.complete && !this.options.partialRefetch && !result.loading && !result.data && !result.error) {\n                logMissingFieldErrors(diff.missing);\n            }\n        }\n        if (saveAsLastResult) {\n            this.updateLastResult(result);\n        }\n        return result;\n    };\n    ObservableQuery.prototype.getCurrentResult = function(saveAsLastResult) {\n        if (saveAsLastResult === void 0) {\n            saveAsLastResult = true;\n        }\n        return this.maskResult(this.getCurrentFullResult(saveAsLastResult));\n    };\n    // Compares newResult to the snapshot we took of this.lastResult when it was\n    // first received.\n    ObservableQuery.prototype.isDifferentFromLastResult = function(newResult, variables) {\n        if (!this.last) {\n            return true;\n        }\n        var documentInfo = this.queryManager.getDocumentInfo(this.query);\n        var dataMasking = this.queryManager.dataMasking;\n        var query = dataMasking ? documentInfo.nonReactiveQuery : this.query;\n        var resultIsDifferent = dataMasking || documentInfo.hasNonreactiveDirective ? !(0,_equalByQuery_js__WEBPACK_IMPORTED_MODULE_7__.equalByQuery)(query, this.last.result, newResult, this.variables) : !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(this.last.result, newResult);\n        return resultIsDifferent || variables && !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(this.last.variables, variables);\n    };\n    ObservableQuery.prototype.getLast = function(key, variablesMustMatch) {\n        var last = this.last;\n        if (last && last[key] && (!variablesMustMatch || (0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(last.variables, this.variables))) {\n            return last[key];\n        }\n    };\n    /**\n     * @deprecated `getLastResult` will be removed in Apollo Client 4.0. Please\n     * discontinue using this method.\n     */ ObservableQuery.prototype.getLastResult = function(variablesMustMatch) {\n        if (globalThis.__DEV__ !== false) {\n            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_5__.warnDeprecated)(\"getLastResult\", function() {\n                globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(24);\n            });\n        }\n        return this.getLast(\"result\", variablesMustMatch);\n    };\n    /**\n     * @deprecated `getLastError` will be removed in Apollo Client 4.0. Please\n     * discontinue using this method.\n     */ ObservableQuery.prototype.getLastError = function(variablesMustMatch) {\n        if (globalThis.__DEV__ !== false) {\n            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_5__.warnDeprecated)(\"getLastError\", function() {\n                globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(25);\n            });\n        }\n        return this.getLast(\"error\", variablesMustMatch);\n    };\n    /**\n     * @deprecated `resetLastResults` will be removed in Apollo Client 4.0. Please\n     * discontinue using this method.\n     */ ObservableQuery.prototype.resetLastResults = function() {\n        if (globalThis.__DEV__ !== false) {\n            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_5__.warnDeprecated)(\"resetLastResults\", function() {\n                globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(26);\n            });\n        }\n        delete this.last;\n        this.isTornDown = false;\n    };\n    /**\n     * @deprecated `resetQueryStoreErrors` will be removed in Apollo Client 4.0.\n     * Please discontinue using this method.\n     */ ObservableQuery.prototype.resetQueryStoreErrors = function() {\n        if (globalThis.__DEV__ !== false) {\n            globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(27);\n        }\n        this.queryManager.resetErrors(this.queryId);\n    };\n    /**\n     * Update the variables of this observable query, and fetch the new results.\n     * This method should be preferred over `setVariables` in most use cases.\n     *\n     * @param variables - The new set of variables. If there are missing variables,\n     * the previous values of those variables will be used.\n     */ ObservableQuery.prototype.refetch = function(variables) {\n        var _a;\n        var reobserveOptions = {\n            // Always disable polling for refetches.\n            pollInterval: 0\n        };\n        // Unless the provided fetchPolicy always consults the network\n        // (no-cache, network-only, or cache-and-network), override it with\n        // network-only to force the refetch for this fetchQuery call.\n        var fetchPolicy = this.options.fetchPolicy;\n        if (fetchPolicy === \"no-cache\") {\n            reobserveOptions.fetchPolicy = \"no-cache\";\n        } else {\n            reobserveOptions.fetchPolicy = \"network-only\";\n        }\n        if (globalThis.__DEV__ !== false && variables && hasOwnProperty.call(variables, \"variables\")) {\n            var queryDef = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.getQueryDefinition)(this.query);\n            var vars = queryDef.variableDefinitions;\n            if (!vars || !vars.some(function(v) {\n                return v.variable.name.value === \"variables\";\n            })) {\n                globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(28, variables, ((_a = queryDef.name) === null || _a === void 0 ? void 0 : _a.value) || queryDef);\n            }\n        }\n        if (variables && !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(this.options.variables, variables)) {\n            // Update the existing options with new variables\n            reobserveOptions.variables = this.options.variables = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, this.options.variables), variables);\n        }\n        this.queryInfo.resetLastWrite();\n        return this.reobserve(reobserveOptions, _networkStatus_js__WEBPACK_IMPORTED_MODULE_6__.NetworkStatus.refetch);\n    };\n    /**\n     * A function that helps you fetch the next set of results for a [paginated list field](https://www.apollographql.com/docs/react/pagination/core-api/).\n     */ ObservableQuery.prototype.fetchMore = function(fetchMoreOptions) {\n        var _this = this;\n        var combinedOptions = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, fetchMoreOptions.query ? fetchMoreOptions : (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, this.options), {\n            query: this.options.query\n        }), fetchMoreOptions), {\n            variables: (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, this.options.variables), fetchMoreOptions.variables)\n        })), {\n            // The fetchMore request goes immediately to the network and does\n            // not automatically write its result to the cache (hence no-cache\n            // instead of network-only), because we allow the caller of\n            // fetchMore to provide an updateQuery callback that determines how\n            // the data gets written to the cache.\n            fetchPolicy: \"no-cache\"\n        });\n        combinedOptions.query = this.transformDocument(combinedOptions.query);\n        var qid = this.queryManager.generateQueryId();\n        // If a temporary query is passed to `fetchMore`, we don't want to store\n        // it as the last query result since it may be an optimized query for\n        // pagination. We will however run the transforms on the original document\n        // as well as the document passed in `fetchMoreOptions` to ensure the cache\n        // uses the most up-to-date document which may rely on runtime conditionals.\n        this.lastQuery = fetchMoreOptions.query ? this.transformDocument(this.options.query) : combinedOptions.query;\n        // Simulate a loading result for the original query with\n        // result.networkStatus === NetworkStatus.fetchMore.\n        var queryInfo = this.queryInfo;\n        var originalNetworkStatus = queryInfo.networkStatus;\n        queryInfo.networkStatus = _networkStatus_js__WEBPACK_IMPORTED_MODULE_6__.NetworkStatus.fetchMore;\n        if (combinedOptions.notifyOnNetworkStatusChange) {\n            this.observe();\n        }\n        var updatedQuerySet = new Set();\n        var updateQuery = fetchMoreOptions === null || fetchMoreOptions === void 0 ? void 0 : fetchMoreOptions.updateQuery;\n        var isCached = this.options.fetchPolicy !== \"no-cache\";\n        if (!isCached) {\n            (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(updateQuery, 29);\n        }\n        return this.queryManager.fetchQuery(qid, combinedOptions, _networkStatus_js__WEBPACK_IMPORTED_MODULE_6__.NetworkStatus.fetchMore).then(function(fetchMoreResult) {\n            _this.queryManager.removeQuery(qid);\n            if (queryInfo.networkStatus === _networkStatus_js__WEBPACK_IMPORTED_MODULE_6__.NetworkStatus.fetchMore) {\n                queryInfo.networkStatus = originalNetworkStatus;\n            }\n            if (isCached) {\n                // Performing this cache update inside a cache.batch transaction ensures\n                // any affected cache.watch watchers are notified at most once about any\n                // updates. Most watchers will be using the QueryInfo class, which\n                // responds to notifications by calling reobserveCacheFirst to deliver\n                // fetchMore cache results back to this ObservableQuery.\n                _this.queryManager.cache.batch({\n                    update: function(cache) {\n                        var updateQuery = fetchMoreOptions.updateQuery;\n                        if (updateQuery) {\n                            cache.updateQuery({\n                                query: _this.query,\n                                variables: _this.variables,\n                                returnPartialData: true,\n                                optimistic: false\n                            }, function(previous) {\n                                return updateQuery(previous, {\n                                    fetchMoreResult: fetchMoreResult.data,\n                                    variables: combinedOptions.variables\n                                });\n                            });\n                        } else {\n                            // If we're using a field policy instead of updateQuery, the only\n                            // thing we need to do is write the new data to the cache using\n                            // combinedOptions.variables (instead of this.variables, which is\n                            // what this.updateQuery uses, because it works by abusing the\n                            // original field value, keyed by the original variables).\n                            cache.writeQuery({\n                                query: combinedOptions.query,\n                                variables: combinedOptions.variables,\n                                data: fetchMoreResult.data\n                            });\n                        }\n                    },\n                    onWatchUpdated: function(watch) {\n                        // Record the DocumentNode associated with any watched query whose\n                        // data were updated by the cache writes above.\n                        updatedQuerySet.add(watch.query);\n                    }\n                });\n            } else {\n                // There is a possibility `lastResult` may not be set when\n                // `fetchMore` is called which would cause this to crash. This should\n                // only happen if we haven't previously reported a result. We don't\n                // quite know what the right behavior should be here since this block\n                // of code runs after the fetch result has executed on the network.\n                // We plan to let it crash in the meantime.\n                //\n                // If we get bug reports due to the `data` property access on\n                // undefined, this should give us a real-world scenario that we can\n                // use to test against and determine the right behavior. If we do end\n                // up changing this behavior, this may require, for example, an\n                // adjustment to the types on `updateQuery` since that function\n                // expects that the first argument always contains previous result\n                // data, but not `undefined`.\n                var lastResult = _this.getLast(\"result\");\n                var data = updateQuery(lastResult.data, {\n                    fetchMoreResult: fetchMoreResult.data,\n                    variables: combinedOptions.variables\n                });\n                _this.reportResult((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, lastResult), {\n                    networkStatus: originalNetworkStatus,\n                    loading: (0,_networkStatus_js__WEBPACK_IMPORTED_MODULE_6__.isNetworkRequestInFlight)(originalNetworkStatus),\n                    data: data\n                }), _this.variables);\n            }\n            return _this.maskResult(fetchMoreResult);\n        }).finally(function() {\n            // In case the cache writes above did not generate a broadcast\n            // notification (which would have been intercepted by onWatchUpdated),\n            // likely because the written data were the same as what was already in\n            // the cache, we still want fetchMore to deliver its final loading:false\n            // result with the unchanged data.\n            if (isCached && !updatedQuerySet.has(_this.query)) {\n                _this.reobserveCacheFirst();\n            }\n        });\n    };\n    // XXX the subscription variables are separate from the query variables.\n    // if you want to update subscription variables, right now you have to do that separately,\n    // and you can only do it by stopping the subscription and then subscribing again with new variables.\n    /**\n     * A function that enables you to execute a [subscription](https://www.apollographql.com/docs/react/data/subscriptions/), usually to subscribe to specific fields that were included in the query.\n     *\n     * This function returns _another_ function that you can call to terminate the subscription.\n     */ ObservableQuery.prototype.subscribeToMore = function(options) {\n        var _this = this;\n        var subscription = this.queryManager.startGraphQLSubscription({\n            query: options.document,\n            variables: options.variables,\n            context: options.context\n        }).subscribe({\n            next: function(subscriptionData) {\n                var updateQuery = options.updateQuery;\n                if (updateQuery) {\n                    _this.updateQuery(function(previous, updateOptions) {\n                        return updateQuery(previous, (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({\n                            subscriptionData: subscriptionData\n                        }, updateOptions));\n                    });\n                }\n            },\n            error: function(err) {\n                if (options.onError) {\n                    options.onError(err);\n                    return;\n                }\n                globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.error(30, err);\n            }\n        });\n        this.subscriptions.add(subscription);\n        return function() {\n            if (_this.subscriptions.delete(subscription)) {\n                subscription.unsubscribe();\n            }\n        };\n    };\n    /**\n     * @deprecated `setOptions` will be removed in Apollo Client 4.0. Please use\n     * `observableQuery.reobserve(newOptions)` instead.\n     */ ObservableQuery.prototype.setOptions = function(newOptions) {\n        if (globalThis.__DEV__ !== false) {\n            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_5__.warnRemovedOption)(newOptions, \"canonizeResults\", \"setOptions\");\n            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_5__.warnDeprecated)(\"setOptions\", function() {\n                globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(31);\n            });\n        }\n        return this.reobserve(newOptions);\n    };\n    ObservableQuery.prototype.silentSetOptions = function(newOptions) {\n        var mergedOptions = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.compact)(this.options, newOptions || {});\n        assign(this.options, mergedOptions);\n    };\n    /**\n     * Update the variables of this observable query, and fetch the new results\n     * if they've changed. Most users should prefer `refetch` instead of\n     * `setVariables` in order to to be properly notified of results even when\n     * they come from the cache.\n     *\n     * Note: the `next` callback will *not* fire if the variables have not changed\n     * or if the result is coming from cache.\n     *\n     * Note: the promise will return the old results immediately if the variables\n     * have not changed.\n     *\n     * Note: the promise will return null immediately if the query is not active\n     * (there are no subscribers).\n     *\n     * @param variables - The new set of variables. If there are missing variables,\n     * the previous values of those variables will be used.\n     */ ObservableQuery.prototype.setVariables = function(variables) {\n        var _this = this;\n        if ((0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(this.variables, variables)) {\n            // If we have no observers, then we don't actually want to make a network\n            // request. As soon as someone observes the query, the request will kick\n            // off. For now, we just store any changes. (See #1077)\n            return this.observers.size ? (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_5__.muteDeprecations)(\"observableQuery.result\", function() {\n                return _this.result();\n            }) : Promise.resolve();\n        }\n        this.options.variables = variables;\n        // See comment above\n        if (!this.observers.size) {\n            return Promise.resolve();\n        }\n        return this.reobserve({\n            // Reset options.fetchPolicy to its original value.\n            fetchPolicy: this.options.initialFetchPolicy,\n            variables: variables\n        }, _networkStatus_js__WEBPACK_IMPORTED_MODULE_6__.NetworkStatus.setVariables);\n    };\n    /**\n     * A function that enables you to update the query's cached result without executing a followup GraphQL operation.\n     *\n     * See [using updateQuery and updateFragment](https://www.apollographql.com/docs/react/caching/cache-interaction/#using-updatequery-and-updatefragment) for additional information.\n     */ ObservableQuery.prototype.updateQuery = function(mapFn) {\n        var queryManager = this.queryManager;\n        var _a = queryManager.cache.diff({\n            query: this.options.query,\n            variables: this.variables,\n            returnPartialData: true,\n            optimistic: false\n        }), result = _a.result, complete = _a.complete;\n        var newResult = mapFn(result, {\n            variables: this.variables,\n            complete: !!complete,\n            previousData: result\n        });\n        if (newResult) {\n            queryManager.cache.writeQuery({\n                query: this.options.query,\n                data: newResult,\n                variables: this.variables\n            });\n            queryManager.broadcastQueries();\n        }\n    };\n    /**\n     * A function that instructs the query to begin re-executing at a specified interval (in milliseconds).\n     */ ObservableQuery.prototype.startPolling = function(pollInterval) {\n        this.options.pollInterval = pollInterval;\n        this.updatePolling();\n    };\n    /**\n     * A function that instructs the query to stop polling after a previous call to `startPolling`.\n     */ ObservableQuery.prototype.stopPolling = function() {\n        this.options.pollInterval = 0;\n        this.updatePolling();\n    };\n    // Update options.fetchPolicy according to options.nextFetchPolicy.\n    ObservableQuery.prototype.applyNextFetchPolicy = function(reason, // It's possible to use this method to apply options.nextFetchPolicy to\n    // options.fetchPolicy even if options !== this.options, though that happens\n    // most often when the options are temporary, used for only one request and\n    // then thrown away, so nextFetchPolicy may not end up mattering.\n    options) {\n        if (options.nextFetchPolicy) {\n            var _a = options.fetchPolicy, fetchPolicy = _a === void 0 ? \"cache-first\" : _a, _b = options.initialFetchPolicy, initialFetchPolicy = _b === void 0 ? fetchPolicy : _b;\n            if (fetchPolicy === \"standby\") {\n            // Do nothing, leaving options.fetchPolicy unchanged.\n            } else if (typeof options.nextFetchPolicy === \"function\") {\n                // When someone chooses \"cache-and-network\" or \"network-only\" as their\n                // initial FetchPolicy, they often do not want future cache updates to\n                // trigger unconditional network requests, which is what repeatedly\n                // applying the \"cache-and-network\" or \"network-only\" policies would\n                // seem to imply. Instead, when the cache reports an update after the\n                // initial network request, it may be desirable for subsequent network\n                // requests to be triggered only if the cache result is incomplete. To\n                // that end, the options.nextFetchPolicy option provides an easy way to\n                // update options.fetchPolicy after the initial network request, without\n                // having to call observableQuery.setOptions.\n                options.fetchPolicy = options.nextFetchPolicy(fetchPolicy, {\n                    reason: reason,\n                    options: options,\n                    observable: this,\n                    initialFetchPolicy: initialFetchPolicy\n                });\n            } else if (reason === \"variables-changed\") {\n                options.fetchPolicy = initialFetchPolicy;\n            } else {\n                options.fetchPolicy = options.nextFetchPolicy;\n            }\n        }\n        return options.fetchPolicy;\n    };\n    ObservableQuery.prototype.fetch = function(options, newNetworkStatus, query) {\n        // TODO Make sure we update the networkStatus (and infer fetchVariables)\n        // before actually committing to the fetch.\n        var queryInfo = this._getOrCreateQuery();\n        queryInfo.setObservableQuery(this);\n        return this.queryManager[\"fetchConcastWithInfo\"](queryInfo, options, newNetworkStatus, query);\n    };\n    // Turns polling on or off based on this.options.pollInterval.\n    ObservableQuery.prototype.updatePolling = function() {\n        var _this = this;\n        // Avoid polling in SSR mode\n        if (this.queryManager.ssrMode) {\n            return;\n        }\n        var _a = this, pollingInfo = _a.pollingInfo, pollInterval = _a.options.pollInterval;\n        if (!pollInterval || !this.hasObservers()) {\n            if (pollingInfo) {\n                clearTimeout(pollingInfo.timeout);\n                delete this.pollingInfo;\n            }\n            return;\n        }\n        if (pollingInfo && pollingInfo.interval === pollInterval) {\n            return;\n        }\n        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(pollInterval, 32);\n        var info = pollingInfo || (this.pollingInfo = {});\n        info.interval = pollInterval;\n        var maybeFetch = function() {\n            var _a, _b;\n            if (_this.pollingInfo) {\n                if (!(0,_networkStatus_js__WEBPACK_IMPORTED_MODULE_6__.isNetworkRequestInFlight)(_this.queryInfo.networkStatus) && !((_b = (_a = _this.options).skipPollAttempt) === null || _b === void 0 ? void 0 : _b.call(_a))) {\n                    _this.reobserve({\n                        // Most fetchPolicy options don't make sense to use in a polling context, as\n                        // users wouldn't want to be polling the cache directly. However, network-only and\n                        // no-cache are both useful for when the user wants to control whether or not the\n                        // polled results are written to the cache.\n                        fetchPolicy: _this.options.initialFetchPolicy === \"no-cache\" ? \"no-cache\" : \"network-only\"\n                    }, _networkStatus_js__WEBPACK_IMPORTED_MODULE_6__.NetworkStatus.poll).then(poll, poll);\n                } else {\n                    poll();\n                }\n            }\n        };\n        var poll = function() {\n            var info = _this.pollingInfo;\n            if (info) {\n                clearTimeout(info.timeout);\n                info.timeout = setTimeout(maybeFetch, info.interval);\n            }\n        };\n        poll();\n    };\n    ObservableQuery.prototype.updateLastResult = function(newResult, variables) {\n        var _this = this;\n        if (variables === void 0) {\n            variables = this.variables;\n        }\n        var error = (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_5__.muteDeprecations)(\"getLastError\", function() {\n            return _this.getLastError();\n        });\n        // Preserve this.last.error unless the variables have changed.\n        if (error && this.last && !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(variables, this.last.variables)) {\n            error = void 0;\n        }\n        return this.last = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({\n            result: this.queryManager.assumeImmutableResults ? newResult : (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.cloneDeep)(newResult),\n            variables: variables\n        }, error ? {\n            error: error\n        } : null);\n    };\n    ObservableQuery.prototype.reobserveAsConcast = function(newOptions, newNetworkStatus) {\n        var _this = this;\n        this.isTornDown = false;\n        var useDisposableConcast = // Refetching uses a disposable Concast to allow refetches using different\n        // options/variables, without permanently altering the options of the\n        // original ObservableQuery.\n        newNetworkStatus === _networkStatus_js__WEBPACK_IMPORTED_MODULE_6__.NetworkStatus.refetch || // The fetchMore method does not actually call the reobserve method, but,\n        // if it did, it would definitely use a disposable Concast.\n        newNetworkStatus === _networkStatus_js__WEBPACK_IMPORTED_MODULE_6__.NetworkStatus.fetchMore || // Polling uses a disposable Concast so the polling options (which force\n        // fetchPolicy to be \"network-only\" or \"no-cache\") won't override the original options.\n        newNetworkStatus === _networkStatus_js__WEBPACK_IMPORTED_MODULE_6__.NetworkStatus.poll;\n        // Save the old variables, since Object.assign may modify them below.\n        var oldVariables = this.options.variables;\n        var oldFetchPolicy = this.options.fetchPolicy;\n        var mergedOptions = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.compact)(this.options, newOptions || {});\n        var options = useDisposableConcast ? // Disposable Concast fetches receive a shallow copy of this.options\n        // (merged with newOptions), leaving this.options unmodified.\n        mergedOptions : assign(this.options, mergedOptions);\n        // Don't update options.query with the transformed query to avoid\n        // overwriting this.options.query when we aren't using a disposable concast.\n        // We want to ensure we can re-run the custom document transforms the next\n        // time a request is made against the original query.\n        var query = this.transformDocument(options.query);\n        this.lastQuery = query;\n        if (!useDisposableConcast) {\n            // We can skip calling updatePolling if we're not changing this.options.\n            this.updatePolling();\n            // Reset options.fetchPolicy to its original value when variables change,\n            // unless a new fetchPolicy was provided by newOptions.\n            if (newOptions && newOptions.variables && !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(newOptions.variables, oldVariables) && // Don't mess with the fetchPolicy if it's currently \"standby\".\n            options.fetchPolicy !== \"standby\" && // If we're changing the fetchPolicy anyway, don't try to change it here\n            // using applyNextFetchPolicy. The explicit options.fetchPolicy wins.\n            (options.fetchPolicy === oldFetchPolicy || // A `nextFetchPolicy` function has even higher priority, though,\n            // so in that case `applyNextFetchPolicy` must be called.\n            typeof options.nextFetchPolicy === \"function\")) {\n                this.applyNextFetchPolicy(\"variables-changed\", options);\n                if (newNetworkStatus === void 0) {\n                    newNetworkStatus = _networkStatus_js__WEBPACK_IMPORTED_MODULE_6__.NetworkStatus.setVariables;\n                }\n            }\n        }\n        this.waitForOwnResult && (this.waitForOwnResult = skipCacheDataFor(options.fetchPolicy));\n        var finishWaitingForOwnResult = function() {\n            if (_this.concast === concast) {\n                _this.waitForOwnResult = false;\n            }\n        };\n        var variables = options.variables && (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, options.variables);\n        var _a = this.fetch(options, newNetworkStatus, query), concast = _a.concast, fromLink = _a.fromLink;\n        var observer = {\n            next: function(result) {\n                if ((0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(_this.variables, variables)) {\n                    finishWaitingForOwnResult();\n                    _this.reportResult(result, variables);\n                }\n            },\n            error: function(error) {\n                if ((0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(_this.variables, variables)) {\n                    // Coming from `getResultsFromLink`, `error` here should always be an `ApolloError`.\n                    // However, calling `concast.cancel` can inject another type of error, so we have to\n                    // wrap it again here.\n                    if (!(0,_errors_index_js__WEBPACK_IMPORTED_MODULE_10__.isApolloError)(error)) {\n                        error = new _errors_index_js__WEBPACK_IMPORTED_MODULE_10__.ApolloError({\n                            networkError: error\n                        });\n                    }\n                    finishWaitingForOwnResult();\n                    _this.reportError(error, variables);\n                }\n            }\n        };\n        if (!useDisposableConcast && (fromLink || !this.concast)) {\n            // We use the {add,remove}Observer methods directly to avoid wrapping\n            // observer with an unnecessary SubscriptionObserver object.\n            if (this.concast && this.observer) {\n                this.concast.removeObserver(this.observer);\n            }\n            this.concast = concast;\n            this.observer = observer;\n        }\n        concast.addObserver(observer);\n        return concast;\n    };\n    ObservableQuery.prototype.reobserve = function(newOptions, newNetworkStatus) {\n        return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_11__.preventUnhandledRejection)(this.reobserveAsConcast(newOptions, newNetworkStatus).promise.then(this.maskResult));\n    };\n    ObservableQuery.prototype.resubscribeAfterError = function() {\n        var _this = this;\n        var args = [];\n        for(var _i = 0; _i < arguments.length; _i++){\n            args[_i] = arguments[_i];\n        }\n        // If `lastError` is set in the current when the subscription is re-created,\n        // the subscription will immediately receive the error, which will\n        // cause it to terminate again. To avoid this, we first clear\n        // the last error/result from the `observableQuery` before re-starting\n        // the subscription, and restore the last value afterwards so that the\n        // subscription has a chance to stay open.\n        var last = this.last;\n        (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_5__.muteDeprecations)(\"resetLastResults\", function() {\n            return _this.resetLastResults();\n        });\n        var subscription = this.subscribe.apply(this, args);\n        this.last = last;\n        return subscription;\n    };\n    // (Re)deliver the current result to this.observers without applying fetch\n    // policies or making network requests.\n    ObservableQuery.prototype.observe = function() {\n        this.reportResult(// Passing false is important so that this.getCurrentResult doesn't\n        // save the fetchMore result as this.lastResult, causing it to be\n        // ignored due to the this.isDifferentFromLastResult check in\n        // this.reportResult.\n        this.getCurrentFullResult(false), this.variables);\n    };\n    ObservableQuery.prototype.reportResult = function(result, variables) {\n        var _this = this;\n        var lastError = (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_5__.muteDeprecations)(\"getLastError\", function() {\n            return _this.getLastError();\n        });\n        var isDifferent = this.isDifferentFromLastResult(result, variables);\n        // Update the last result even when isDifferentFromLastResult returns false,\n        // because the query may be using the @nonreactive directive, and we want to\n        // save the the latest version of any nonreactive subtrees (in case\n        // getCurrentResult is called), even though we skip broadcasting changes.\n        if (lastError || !result.partial || this.options.returnPartialData) {\n            this.updateLastResult(result, variables);\n        }\n        if (lastError || isDifferent) {\n            (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_12__.iterateObserversSafely)(this.observers, \"next\", this.maskResult(result));\n        }\n    };\n    ObservableQuery.prototype.reportError = function(error, variables) {\n        var _this = this;\n        // Since we don't get the current result on errors, only the error, we\n        // must mirror the updates that occur in QueryStore.markQueryError here\n        var errorResult = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_5__.muteDeprecations)(\"getLastResult\", function() {\n            return _this.getLastResult();\n        })), {\n            error: error,\n            errors: error.graphQLErrors,\n            networkStatus: _networkStatus_js__WEBPACK_IMPORTED_MODULE_6__.NetworkStatus.error,\n            loading: false\n        });\n        this.updateLastResult(errorResult, variables);\n        (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_12__.iterateObserversSafely)(this.observers, \"error\", this.last.error = error);\n    };\n    ObservableQuery.prototype.hasObservers = function() {\n        return this.observers.size > 0;\n    };\n    ObservableQuery.prototype.tearDownQuery = function() {\n        if (this.isTornDown) return;\n        if (this.concast && this.observer) {\n            this.concast.removeObserver(this.observer);\n            delete this.concast;\n            delete this.observer;\n        }\n        this.stopPolling();\n        // stop all active GraphQL subscriptions\n        this.subscriptions.forEach(function(sub) {\n            return sub.unsubscribe();\n        });\n        this.subscriptions.clear();\n        this.queryManager.stopQuery(this.queryId);\n        this.observers.clear();\n        this.isTornDown = true;\n    };\n    ObservableQuery.prototype.transformDocument = function(document) {\n        return this.queryManager.transform(document);\n    };\n    ObservableQuery.prototype.maskResult = function(result) {\n        return result && \"data\" in result ? (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, result), {\n            data: this.queryManager.maskOperation({\n                document: this.query,\n                data: result.data,\n                fetchPolicy: this.options.fetchPolicy,\n                id: this.queryId\n            })\n        }) : result;\n    };\n    /** @internal */ ObservableQuery.prototype.resetNotifications = function() {\n        this.cancelNotifyTimeout();\n        this.dirty = false;\n    };\n    ObservableQuery.prototype.cancelNotifyTimeout = function() {\n        if (this.notifyTimeout) {\n            clearTimeout(this.notifyTimeout);\n            this.notifyTimeout = void 0;\n        }\n    };\n    /** @internal */ ObservableQuery.prototype.scheduleNotify = function() {\n        var _this = this;\n        if (this.dirty) return;\n        this.dirty = true;\n        if (!this.notifyTimeout) {\n            this.notifyTimeout = setTimeout(function() {\n                return _this.notify();\n            }, 0);\n        }\n    };\n    /** @internal */ ObservableQuery.prototype.notify = function() {\n        this.cancelNotifyTimeout();\n        if (this.dirty) {\n            if (this.options.fetchPolicy == \"cache-only\" || this.options.fetchPolicy == \"cache-and-network\" || !(0,_networkStatus_js__WEBPACK_IMPORTED_MODULE_6__.isNetworkRequestInFlight)(this.queryInfo.networkStatus)) {\n                var diff = this.queryInfo.getDiff();\n                if (diff.fromOptimisticTransaction) {\n                    // If this diff came from an optimistic transaction, deliver the\n                    // current cache data to the ObservableQuery, but don't perform a\n                    // reobservation, since oq.reobserveCacheFirst might make a network\n                    // request, and we never want to trigger network requests in the\n                    // middle of optimistic updates.\n                    this.observe();\n                } else {\n                    // Otherwise, make the ObservableQuery \"reobserve\" the latest data\n                    // using a temporary fetch policy of \"cache-first\", so complete cache\n                    // results have a chance to be delivered without triggering additional\n                    // network requests, even when options.fetchPolicy is \"network-only\"\n                    // or \"cache-and-network\". All other fetch policies are preserved by\n                    // this method, and are handled by calling oq.reobserve(). If this\n                    // reobservation is spurious, isDifferentFromLastResult still has a\n                    // chance to catch it before delivery to ObservableQuery subscribers.\n                    this.reobserveCacheFirst();\n                }\n            }\n        }\n        this.dirty = false;\n    };\n    // Reobserve with fetchPolicy effectively set to \"cache-first\", triggering\n    // delivery of any new data from the cache, possibly falling back to the network\n    // if any cache data are missing. This allows _complete_ cache results to be\n    // delivered without also kicking off unnecessary network requests when\n    // this.options.fetchPolicy is \"cache-and-network\" or \"network-only\". When\n    // this.options.fetchPolicy is any other policy (\"cache-first\", \"cache-only\",\n    // \"standby\", or \"no-cache\"), we call this.reobserve() as usual.\n    ObservableQuery.prototype.reobserveCacheFirst = function() {\n        var _a = this.options, fetchPolicy = _a.fetchPolicy, nextFetchPolicy = _a.nextFetchPolicy;\n        if (fetchPolicy === \"cache-and-network\" || fetchPolicy === \"network-only\") {\n            return this.reobserve({\n                fetchPolicy: \"cache-first\",\n                // Use a temporary nextFetchPolicy function that replaces itself with the\n                // previous nextFetchPolicy value and returns the original fetchPolicy.\n                nextFetchPolicy: function(currentFetchPolicy, context) {\n                    // Replace this nextFetchPolicy function in the options object with the\n                    // original this.options.nextFetchPolicy value.\n                    this.nextFetchPolicy = nextFetchPolicy;\n                    // If the original nextFetchPolicy value was a function, give it a\n                    // chance to decide what happens here.\n                    if (typeof this.nextFetchPolicy === \"function\") {\n                        return this.nextFetchPolicy(currentFetchPolicy, context);\n                    }\n                    // Otherwise go back to the original this.options.fetchPolicy.\n                    return fetchPolicy;\n                }\n            });\n        }\n        return this.reobserve();\n    };\n    /**\n     * @internal\n     * A slot used by the `useQuery` hook to indicate that `client.watchQuery`\n     * should not register the query immediately, but instead wait for the query to\n     * be started registered with the `QueryManager` when `useSyncExternalStore`\n     * actively subscribes to it.\n     */ ObservableQuery.inactiveOnCreation = new optimism__WEBPACK_IMPORTED_MODULE_2__.Slot();\n    return ObservableQuery;\n}(_utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.Observable);\n\n// Necessary because the ObservableQuery constructor has a different\n// signature than the Observable constructor.\n(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_14__.fixObservableSubclass)(ObservableQuery);\nfunction defaultSubscriptionObserverErrorCallback(error) {\n    globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.error(33, error.message, error.stack);\n}\nfunction logMissingFieldErrors(missing) {\n    if (globalThis.__DEV__ !== false && missing) {\n        globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.debug(34, missing);\n    }\n}\nfunction skipCacheDataFor(fetchPolicy /* `undefined` would mean `\"cache-first\"` */ ) {\n    return fetchPolicy === \"network-only\" || fetchPolicy === \"no-cache\" || fetchPolicy === \"standby\";\n} //# sourceMappingURL=ObservableQuery.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/core/ObservableQuery.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/core/QueryInfo.js":
/*!*******************************************************!*\
  !*** ./node_modules/@apollo/client/core/QueryInfo.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QueryInfo: () => (/* binding */ QueryInfo),\n/* harmony export */   shouldWriteResult: () => (/* binding */ shouldWriteResult)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wry/equality */ \"(ssr)/./node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/mergeDeep.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/incrementalResult.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/errorHandling.js\");\n/* harmony import */ var _networkStatus_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./networkStatus.js */ \"(ssr)/./node_modules/@apollo/client/core/networkStatus.js\");\n/* harmony import */ var _utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utilities/deprecation/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/deprecation/index.js\");\n\n\n\n\n\n\n\nvar destructiveMethodCounts = new (_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.canUseWeakMap ? WeakMap : Map)();\nfunction wrapDestructiveCacheMethod(cache, methodName) {\n    var original = cache[methodName];\n    if (typeof original === \"function\") {\n        // @ts-expect-error this is just too generic to be typed correctly\n        cache[methodName] = function() {\n            destructiveMethodCounts.set(cache, // The %1e15 allows the count to wrap around to 0 safely every\n            // quadrillion evictions, so there's no risk of overflow. To be\n            // clear, this is more of a pedantic principle than something\n            // that matters in any conceivable practical scenario.\n            (destructiveMethodCounts.get(cache) + 1) % 1e15);\n            // @ts-expect-error this is just too generic to be typed correctly\n            return original.apply(this, arguments);\n        };\n    }\n}\n// A QueryInfo object represents a single query managed by the\n// QueryManager, which tracks all QueryInfo objects by queryId in its\n// this.queries Map. QueryInfo objects store the latest results and errors\n// for the given query, and are responsible for reporting those results to\n// the corresponding ObservableQuery, via the QueryInfo.notify method.\n// Results are reported asynchronously whenever setDiff marks the\n// QueryInfo object as dirty, though a call to the QueryManager's\n// broadcastQueries method may trigger the notification before it happens\n// automatically. This class used to be a simple interface type without\n// any field privacy or meaningful methods, which is why it still has so\n// many public fields. The effort to lock down and simplify the QueryInfo\n// interface is ongoing, and further improvements are welcome.\nvar QueryInfo = /** @class */ function() {\n    function QueryInfo(queryManager, queryId) {\n        if (queryId === void 0) {\n            queryId = queryManager.generateQueryId();\n        }\n        this.queryId = queryId;\n        this.document = null;\n        this.lastRequestId = 1;\n        this.stopped = false;\n        this.observableQuery = null;\n        var cache = this.cache = queryManager.cache;\n        // Track how often cache.evict is called, since we want eviction to\n        // override the feud-stopping logic in the markResult method, by\n        // causing shouldWrite to return true. Wrapping the cache.evict method\n        // is a bit of a hack, but it saves us from having to make eviction\n        // counting an official part of the ApolloCache API.\n        if (!destructiveMethodCounts.has(cache)) {\n            destructiveMethodCounts.set(cache, 0);\n            wrapDestructiveCacheMethod(cache, \"evict\");\n            wrapDestructiveCacheMethod(cache, \"modify\");\n            wrapDestructiveCacheMethod(cache, \"reset\");\n        }\n    }\n    QueryInfo.prototype.init = function(query) {\n        var networkStatus = query.networkStatus || _networkStatus_js__WEBPACK_IMPORTED_MODULE_2__.NetworkStatus.loading;\n        if (this.variables && this.networkStatus !== _networkStatus_js__WEBPACK_IMPORTED_MODULE_2__.NetworkStatus.loading && !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(this.variables, query.variables)) {\n            networkStatus = _networkStatus_js__WEBPACK_IMPORTED_MODULE_2__.NetworkStatus.setVariables;\n        }\n        if (!(0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(query.variables, this.variables)) {\n            this.lastDiff = void 0;\n            // Ensure we don't continue to receive cache updates for old variables\n            this.cancel();\n        }\n        Object.assign(this, {\n            document: query.document,\n            variables: query.variables,\n            networkError: null,\n            graphQLErrors: this.graphQLErrors || [],\n            networkStatus: networkStatus\n        });\n        if (query.observableQuery) {\n            this.setObservableQuery(query.observableQuery);\n        }\n        if (query.lastRequestId) {\n            this.lastRequestId = query.lastRequestId;\n        }\n        return this;\n    };\n    QueryInfo.prototype.resetDiff = function() {\n        this.lastDiff = void 0;\n    };\n    QueryInfo.prototype.getDiff = function() {\n        var _this = this;\n        var options = this.getDiffOptions();\n        if (this.lastDiff && (0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(options, this.lastDiff.options)) {\n            return this.lastDiff.diff;\n        }\n        this.updateWatch(this.variables);\n        var oq = this.observableQuery;\n        if (oq && oq.options.fetchPolicy === \"no-cache\") {\n            return {\n                complete: false\n            };\n        }\n        var diff = (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_3__.muteDeprecations)(\"canonizeResults\", function() {\n            return _this.cache.diff(options);\n        });\n        this.updateLastDiff(diff, options);\n        return diff;\n    };\n    QueryInfo.prototype.updateLastDiff = function(diff, options) {\n        this.lastDiff = diff ? {\n            diff: diff,\n            options: options || this.getDiffOptions()\n        } : void 0;\n    };\n    QueryInfo.prototype.getDiffOptions = function(variables) {\n        var _a;\n        if (variables === void 0) {\n            variables = this.variables;\n        }\n        return {\n            query: this.document,\n            variables: variables,\n            returnPartialData: true,\n            optimistic: true,\n            canonizeResults: (_a = this.observableQuery) === null || _a === void 0 ? void 0 : _a.options.canonizeResults\n        };\n    };\n    QueryInfo.prototype.setDiff = function(diff) {\n        var _this = this;\n        var _a;\n        var oldDiff = this.lastDiff && this.lastDiff.diff;\n        // If we are trying to deliver an incomplete cache result, we avoid\n        // reporting it if the query has errored, otherwise we let the broadcast try\n        // and repair the partial result by refetching the query. This check avoids\n        // a situation where a query that errors and another succeeds with\n        // overlapping data does not report the partial data result to the errored\n        // query.\n        //\n        // See https://github.com/apollographql/apollo-client/issues/11400 for more\n        // information on this issue.\n        if (diff && !diff.complete && (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_3__.muteDeprecations)(\"getLastError\", function() {\n            var _a;\n            return (_a = _this.observableQuery) === null || _a === void 0 ? void 0 : _a.getLastError();\n        })) {\n            return;\n        }\n        this.updateLastDiff(diff);\n        if (!(0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(oldDiff && oldDiff.result, diff && diff.result)) {\n            (_a = this.observableQuery) === null || _a === void 0 ? void 0 : _a[\"scheduleNotify\"]();\n        }\n    };\n    QueryInfo.prototype.setObservableQuery = function(oq) {\n        if (oq === this.observableQuery) return;\n        this.observableQuery = oq;\n        if (oq) {\n            oq[\"queryInfo\"] = this;\n        }\n    };\n    QueryInfo.prototype.stop = function() {\n        var _a;\n        if (!this.stopped) {\n            this.stopped = true;\n            // Cancel the pending notify timeout\n            (_a = this.observableQuery) === null || _a === void 0 ? void 0 : _a[\"resetNotifications\"]();\n            this.cancel();\n            var oq = this.observableQuery;\n            if (oq) oq.stopPolling();\n        }\n    };\n    QueryInfo.prototype.cancel = function() {\n        var _a;\n        (_a = this.cancelWatch) === null || _a === void 0 ? void 0 : _a.call(this);\n        this.cancelWatch = void 0;\n    };\n    QueryInfo.prototype.updateWatch = function(variables) {\n        var _this = this;\n        if (variables === void 0) {\n            variables = this.variables;\n        }\n        var oq = this.observableQuery;\n        if (oq && oq.options.fetchPolicy === \"no-cache\") {\n            return;\n        }\n        var watchOptions = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, this.getDiffOptions(variables)), {\n            watcher: this,\n            callback: function(diff) {\n                return _this.setDiff(diff);\n            }\n        });\n        if (!this.lastWatch || !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(watchOptions, this.lastWatch)) {\n            this.cancel();\n            this.cancelWatch = this.cache.watch(this.lastWatch = watchOptions);\n        }\n    };\n    QueryInfo.prototype.resetLastWrite = function() {\n        this.lastWrite = void 0;\n    };\n    QueryInfo.prototype.shouldWrite = function(result, variables) {\n        var lastWrite = this.lastWrite;\n        return !(lastWrite && // If cache.evict has been called since the last time we wrote this\n        // data into the cache, there's a chance writing this result into\n        // the cache will repair what was evicted.\n        lastWrite.dmCount === destructiveMethodCounts.get(this.cache) && (0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(variables, lastWrite.variables) && (0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(result.data, lastWrite.result.data));\n    };\n    QueryInfo.prototype.markResult = function(result, document, options, cacheWriteBehavior) {\n        var _this = this;\n        var _a;\n        var merger = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.DeepMerger();\n        var graphQLErrors = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_6__.isNonEmptyArray)(result.errors) ? result.errors.slice(0) : [];\n        // Cancel the pending notify timeout (if it exists) to prevent extraneous network\n        // requests. To allow future notify timeouts, diff and dirty are reset as well.\n        (_a = this.observableQuery) === null || _a === void 0 ? void 0 : _a[\"resetNotifications\"]();\n        if (\"incremental\" in result && (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_6__.isNonEmptyArray)(result.incremental)) {\n            var mergedData = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.mergeIncrementalData)(this.getDiff().result, result);\n            result.data = mergedData;\n        // Detect the first chunk of a deferred query and merge it with existing\n        // cache data. This ensures a `cache-first` fetch policy that returns\n        // partial cache data or a `cache-and-network` fetch policy that already\n        // has full data in the cache does not complain when trying to merge the\n        // initial deferred server data with existing cache data.\n        } else if (\"hasNext\" in result && result.hasNext) {\n            var diff = this.getDiff();\n            result.data = merger.merge(diff.result, result.data);\n        }\n        this.graphQLErrors = graphQLErrors;\n        if (options.fetchPolicy === \"no-cache\") {\n            this.updateLastDiff({\n                result: result.data,\n                complete: true\n            }, this.getDiffOptions(options.variables));\n        } else if (cacheWriteBehavior !== 0 /* CacheWriteBehavior.FORBID */ ) {\n            if (shouldWriteResult(result, options.errorPolicy)) {\n                // Using a transaction here so we have a chance to read the result\n                // back from the cache before the watch callback fires as a result\n                // of writeQuery, so we can store the new diff quietly and ignore\n                // it when we receive it redundantly from the watch callback.\n                this.cache.performTransaction(function(cache) {\n                    if (_this.shouldWrite(result, options.variables)) {\n                        cache.writeQuery({\n                            query: document,\n                            data: result.data,\n                            variables: options.variables,\n                            overwrite: cacheWriteBehavior === 1 /* CacheWriteBehavior.OVERWRITE */ \n                        });\n                        _this.lastWrite = {\n                            result: result,\n                            variables: options.variables,\n                            dmCount: destructiveMethodCounts.get(_this.cache)\n                        };\n                    } else {\n                        // If result is the same as the last result we received from\n                        // the network (and the variables match too), avoid writing\n                        // result into the cache again. The wisdom of skipping this\n                        // cache write is far from obvious, since any cache write\n                        // could be the one that puts the cache back into a desired\n                        // state, fixing corruption or missing data. However, if we\n                        // always write every network result into the cache, we enable\n                        // feuds between queries competing to update the same data in\n                        // incompatible ways, which can lead to an endless cycle of\n                        // cache broadcasts and useless network requests. As with any\n                        // feud, eventually one side must step back from the brink,\n                        // letting the other side(s) have the last word(s). There may\n                        // be other points where we could break this cycle, such as\n                        // silencing the broadcast for cache.writeQuery (not a good\n                        // idea, since it just delays the feud a bit) or somehow\n                        // avoiding the network request that just happened (also bad,\n                        // because the server could return useful new data). All\n                        // options considered, skipping this cache write seems to be\n                        // the least damaging place to break the cycle, because it\n                        // reflects the intuition that we recently wrote this exact\n                        // result into the cache, so the cache *should* already/still\n                        // contain this data. If some other query has clobbered that\n                        // data in the meantime, that's too bad, but there will be no\n                        // winners if every query blindly reverts to its own version\n                        // of the data. This approach also gives the network a chance\n                        // to return new data, which will be written into the cache as\n                        // usual, notifying only those queries that are directly\n                        // affected by the cache updates, as usual. In the future, an\n                        // even more sophisticated cache could perhaps prevent or\n                        // mitigate the clobbering somehow, but that would make this\n                        // particular cache write even less important, and thus\n                        // skipping it would be even safer than it is today.\n                        if (_this.lastDiff && _this.lastDiff.diff.complete) {\n                            // Reuse data from the last good (complete) diff that we\n                            // received, when possible.\n                            result.data = _this.lastDiff.diff.result;\n                            return;\n                        }\n                    // If the previous this.diff was incomplete, fall through to\n                    // re-reading the latest data with cache.diff, below.\n                    }\n                    var diffOptions = _this.getDiffOptions(options.variables);\n                    var diff = (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_3__.muteDeprecations)(\"canonizeResults\", function() {\n                        return cache.diff(diffOptions);\n                    });\n                    // In case the QueryManager stops this QueryInfo before its\n                    // results are delivered, it's important to avoid restarting the\n                    // cache watch when markResult is called. We also avoid updating\n                    // the watch if we are writing a result that doesn't match the current\n                    // variables to avoid race conditions from broadcasting the wrong\n                    // result.\n                    if (!_this.stopped && (0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(_this.variables, options.variables)) {\n                        // Any time we're about to update this.diff, we need to make\n                        // sure we've started watching the cache.\n                        _this.updateWatch(options.variables);\n                    }\n                    // If we're allowed to write to the cache, and we can read a\n                    // complete result from the cache, update result.data to be the\n                    // result from the cache, rather than the raw network result.\n                    // Set without setDiff to avoid triggering a notify call, since\n                    // we have other ways of notifying for this result.\n                    _this.updateLastDiff(diff, diffOptions);\n                    if (diff.complete) {\n                        result.data = diff.result;\n                    }\n                });\n            } else {\n                this.lastWrite = void 0;\n            }\n        }\n    };\n    QueryInfo.prototype.markReady = function() {\n        this.networkError = null;\n        return this.networkStatus = _networkStatus_js__WEBPACK_IMPORTED_MODULE_2__.NetworkStatus.ready;\n    };\n    QueryInfo.prototype.markError = function(error) {\n        var _a;\n        this.networkStatus = _networkStatus_js__WEBPACK_IMPORTED_MODULE_2__.NetworkStatus.error;\n        this.lastWrite = void 0;\n        (_a = this.observableQuery) === null || _a === void 0 ? void 0 : _a[\"resetNotifications\"]();\n        if (error.graphQLErrors) {\n            this.graphQLErrors = error.graphQLErrors;\n        }\n        if (error.networkError) {\n            this.networkError = error.networkError;\n        }\n        return error;\n    };\n    return QueryInfo;\n}();\n\nfunction shouldWriteResult(result, errorPolicy) {\n    if (errorPolicy === void 0) {\n        errorPolicy = \"none\";\n    }\n    var ignoreErrors = errorPolicy === \"ignore\" || errorPolicy === \"all\";\n    var writeWithErrors = !(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.graphQLResultHasError)(result);\n    if (!writeWithErrors && ignoreErrors && result.data) {\n        writeWithErrors = true;\n    }\n    return writeWithErrors;\n} //# sourceMappingURL=QueryInfo.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/core/QueryInfo.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/core/QueryManager.js":
/*!**********************************************************!*\
  !*** ./node_modules/@apollo/client/core/QueryManager.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QueryManager: () => (/* binding */ QueryManager)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @wry/equality */ \"(ssr)/./node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var _link_core_index_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../link/core/index.js */ \"(ssr)/./node_modules/@apollo/client/link/core/execute.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../utilities/common/incrementalResult.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/incrementalResult.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/directives.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/transform.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/fragments.js\");\n/* harmony import */ var _cache_index_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../cache/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canonicalStringify.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/DocumentTransform.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/observables/asyncMap.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/errorHandling.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/objects.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/makeUniqueId.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/zen-observable-ts/module.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/observables/Concast.js\");\n/* harmony import */ var _errors_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../errors/index.js */ \"(ssr)/./node_modules/@apollo/client/errors/index.js\");\n/* harmony import */ var _ObservableQuery_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./ObservableQuery.js */ \"(ssr)/./node_modules/@apollo/client/core/ObservableQuery.js\");\n/* harmony import */ var _networkStatus_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./networkStatus.js */ \"(ssr)/./node_modules/@apollo/client/core/networkStatus.js\");\n/* harmony import */ var _QueryInfo_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./QueryInfo.js */ \"(ssr)/./node_modules/@apollo/client/core/QueryInfo.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/print.js\");\n/* harmony import */ var _wry_trie__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @wry/trie */ \"(ssr)/./node_modules/@wry/trie/lib/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/caches.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/sizes.js\");\n/* harmony import */ var _masking_index_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ../masking/index.js */ \"(ssr)/./node_modules/@apollo/client/masking/maskOperation.js\");\n/* harmony import */ var _masking_index_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ../masking/index.js */ \"(ssr)/./node_modules/@apollo/client/masking/maskFragment.js\");\n/* harmony import */ var _utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../utilities/deprecation/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/deprecation/index.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar IGNORE = Object.create(null);\n\n\n\n\nvar QueryManager = /** @class */ function() {\n    function QueryManager(options) {\n        var _this = this;\n        this.clientAwareness = {};\n        // All the queries that the QueryManager is currently managing (not\n        // including mutations and subscriptions).\n        this.queries = new Map();\n        // Maps from queryId strings to Promise rejection functions for\n        // currently active queries and fetches.\n        // Use protected instead of private field so\n        // @apollo/experimental-nextjs-app-support can access type info.\n        this.fetchCancelFns = new Map();\n        this.transformCache = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.AutoCleanedWeakCache(_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.cacheSizes[\"queryManager.getDocumentInfo\"] || 2000 /* defaultCacheSizes[\"queryManager.getDocumentInfo\"] */ );\n        this.queryIdCounter = 1;\n        this.requestIdCounter = 1;\n        this.mutationIdCounter = 1;\n        // Use protected instead of private field so\n        // @apollo/experimental-nextjs-app-support can access type info.\n        this.inFlightLinkObservables = new _wry_trie__WEBPACK_IMPORTED_MODULE_2__.Trie(false);\n        this.noCacheWarningsByQueryId = new Set();\n        var defaultDocumentTransform = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.DocumentTransform(function(document) {\n            return _this.cache.transformDocument(document);\n        }, // Allow the apollo cache to manage its own transform caches\n        {\n            cache: false\n        });\n        this.cache = options.cache;\n        this.link = options.link;\n        this.defaultOptions = options.defaultOptions;\n        this.queryDeduplication = options.queryDeduplication;\n        this.clientAwareness = options.clientAwareness;\n        this.localState = options.localState;\n        this.ssrMode = options.ssrMode;\n        this.assumeImmutableResults = options.assumeImmutableResults;\n        this.dataMasking = options.dataMasking;\n        var documentTransform = options.documentTransform;\n        this.documentTransform = documentTransform ? defaultDocumentTransform.concat(documentTransform)// The custom document transform may add new fragment spreads or new\n        // field selections, so we want to give the cache a chance to run\n        // again. For example, the InMemoryCache adds __typename to field\n        // selections and fragments from the fragment registry.\n        .concat(defaultDocumentTransform) : defaultDocumentTransform;\n        this.defaultContext = options.defaultContext || Object.create(null);\n        if (this.onBroadcast = options.onBroadcast) {\n            this.mutationStore = Object.create(null);\n        }\n    }\n    /**\n     * Call this method to terminate any active query processes, making it safe\n     * to dispose of this QueryManager instance.\n     */ QueryManager.prototype.stop = function() {\n        var _this = this;\n        this.queries.forEach(function(_info, queryId) {\n            _this.stopQueryNoBroadcast(queryId);\n        });\n        this.cancelPendingFetches((0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(35));\n    };\n    QueryManager.prototype.cancelPendingFetches = function(error) {\n        this.fetchCancelFns.forEach(function(cancel) {\n            return cancel(error);\n        });\n        this.fetchCancelFns.clear();\n    };\n    QueryManager.prototype.mutate = function(_a) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__awaiter)(this, arguments, void 0, function(_b) {\n            var mutationId, hasClientExports, mutationStoreValue, isOptimistic, self;\n            var _c, _d;\n            var mutation = _b.mutation, variables = _b.variables, optimisticResponse = _b.optimisticResponse, updateQueries = _b.updateQueries, _e = _b.refetchQueries, refetchQueries = _e === void 0 ? [] : _e, _f = _b.awaitRefetchQueries, awaitRefetchQueries = _f === void 0 ? false : _f, updateWithProxyFn = _b.update, onQueryUpdated = _b.onQueryUpdated, _g = _b.fetchPolicy, fetchPolicy = _g === void 0 ? ((_c = this.defaultOptions.mutate) === null || _c === void 0 ? void 0 : _c.fetchPolicy) || \"network-only\" : _g, _h = _b.errorPolicy, errorPolicy = _h === void 0 ? ((_d = this.defaultOptions.mutate) === null || _d === void 0 ? void 0 : _d.errorPolicy) || \"none\" : _h, keepRootFields = _b.keepRootFields, context = _b.context;\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__generator)(this, function(_j) {\n                switch(_j.label){\n                    case 0:\n                        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(mutation, 36);\n                        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(fetchPolicy === \"network-only\" || fetchPolicy === \"no-cache\", 37);\n                        mutationId = this.generateMutationId();\n                        mutation = this.cache.transformForLink(this.transform(mutation));\n                        hasClientExports = this.getDocumentInfo(mutation).hasClientExports;\n                        variables = this.getVariables(mutation, variables);\n                        if (!hasClientExports) return [\n                            3 /*break*/ ,\n                            2\n                        ];\n                        return [\n                            4 /*yield*/ ,\n                            this.localState.addExportedVariables(mutation, variables, context)\n                        ];\n                    case 1:\n                        variables = _j.sent();\n                        _j.label = 2;\n                    case 2:\n                        mutationStoreValue = this.mutationStore && (this.mutationStore[mutationId] = {\n                            mutation: mutation,\n                            variables: variables,\n                            loading: true,\n                            error: null\n                        });\n                        isOptimistic = optimisticResponse && this.markMutationOptimistic(optimisticResponse, {\n                            mutationId: mutationId,\n                            document: mutation,\n                            variables: variables,\n                            fetchPolicy: fetchPolicy,\n                            errorPolicy: errorPolicy,\n                            context: context,\n                            updateQueries: updateQueries,\n                            update: updateWithProxyFn,\n                            keepRootFields: keepRootFields\n                        });\n                        this.broadcastQueries();\n                        self = this;\n                        return [\n                            2 /*return*/ ,\n                            new Promise(function(resolve, reject) {\n                                return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.asyncMap)(self.getObservableFromLink(mutation, (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, context), {\n                                    optimisticResponse: isOptimistic ? optimisticResponse : void 0\n                                }), variables, {}, false), function(result) {\n                                    if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.graphQLResultHasError)(result) && errorPolicy === \"none\") {\n                                        throw new _errors_index_js__WEBPACK_IMPORTED_MODULE_9__.ApolloError({\n                                            graphQLErrors: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.getGraphQLErrorsFromResult)(result)\n                                        });\n                                    }\n                                    if (mutationStoreValue) {\n                                        mutationStoreValue.loading = false;\n                                        mutationStoreValue.error = null;\n                                    }\n                                    var storeResult = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, result);\n                                    if (typeof refetchQueries === \"function\") {\n                                        refetchQueries = refetchQueries(storeResult);\n                                    }\n                                    if (errorPolicy === \"ignore\" && (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.graphQLResultHasError)(storeResult)) {\n                                        delete storeResult.errors;\n                                    }\n                                    return self.markMutationResult({\n                                        mutationId: mutationId,\n                                        result: storeResult,\n                                        document: mutation,\n                                        variables: variables,\n                                        fetchPolicy: fetchPolicy,\n                                        errorPolicy: errorPolicy,\n                                        context: context,\n                                        update: updateWithProxyFn,\n                                        updateQueries: updateQueries,\n                                        awaitRefetchQueries: awaitRefetchQueries,\n                                        refetchQueries: refetchQueries,\n                                        removeOptimistic: isOptimistic ? mutationId : void 0,\n                                        onQueryUpdated: onQueryUpdated,\n                                        keepRootFields: keepRootFields\n                                    });\n                                }).subscribe({\n                                    next: function(storeResult) {\n                                        self.broadcastQueries();\n                                        // Since mutations might receive multiple payloads from the\n                                        // ApolloLink chain (e.g. when used with @defer),\n                                        // we resolve with a SingleExecutionResult or after the final\n                                        // ExecutionPatchResult has arrived and we have assembled the\n                                        // multipart response into a single result.\n                                        if (!(\"hasNext\" in storeResult) || storeResult.hasNext === false) {\n                                            resolve((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, storeResult), {\n                                                data: self.maskOperation({\n                                                    document: mutation,\n                                                    data: storeResult.data,\n                                                    fetchPolicy: fetchPolicy,\n                                                    id: mutationId\n                                                })\n                                            }));\n                                        }\n                                    },\n                                    error: function(err) {\n                                        if (mutationStoreValue) {\n                                            mutationStoreValue.loading = false;\n                                            mutationStoreValue.error = err;\n                                        }\n                                        if (isOptimistic) {\n                                            self.cache.removeOptimistic(mutationId);\n                                        }\n                                        self.broadcastQueries();\n                                        reject(err instanceof _errors_index_js__WEBPACK_IMPORTED_MODULE_9__.ApolloError ? err : new _errors_index_js__WEBPACK_IMPORTED_MODULE_9__.ApolloError({\n                                            networkError: err\n                                        }));\n                                    }\n                                });\n                            })\n                        ];\n                }\n            });\n        });\n    };\n    QueryManager.prototype.markMutationResult = function(mutation, cache) {\n        var _this = this;\n        if (cache === void 0) {\n            cache = this.cache;\n        }\n        var result = mutation.result;\n        var cacheWrites = [];\n        var skipCache = mutation.fetchPolicy === \"no-cache\";\n        if (!skipCache && (0,_QueryInfo_js__WEBPACK_IMPORTED_MODULE_10__.shouldWriteResult)(result, mutation.errorPolicy)) {\n            if (!(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_11__.isExecutionPatchIncrementalResult)(result)) {\n                cacheWrites.push({\n                    result: result.data,\n                    dataId: \"ROOT_MUTATION\",\n                    query: mutation.document,\n                    variables: mutation.variables\n                });\n            }\n            if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_11__.isExecutionPatchIncrementalResult)(result) && (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_12__.isNonEmptyArray)(result.incremental)) {\n                var diff = cache.diff({\n                    id: \"ROOT_MUTATION\",\n                    // The cache complains if passed a mutation where it expects a\n                    // query, so we transform mutations and subscriptions to queries\n                    // (only once, thanks to this.transformCache).\n                    query: this.getDocumentInfo(mutation.document).asQuery,\n                    variables: mutation.variables,\n                    optimistic: false,\n                    returnPartialData: true\n                });\n                var mergedData = void 0;\n                if (diff.result) {\n                    mergedData = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_11__.mergeIncrementalData)(diff.result, result);\n                }\n                if (typeof mergedData !== \"undefined\") {\n                    // cast the ExecutionPatchResult to FetchResult here since\n                    // ExecutionPatchResult never has `data` when returned from the server\n                    result.data = mergedData;\n                    cacheWrites.push({\n                        result: mergedData,\n                        dataId: \"ROOT_MUTATION\",\n                        query: mutation.document,\n                        variables: mutation.variables\n                    });\n                }\n            }\n            var updateQueries_1 = mutation.updateQueries;\n            if (updateQueries_1) {\n                this.queries.forEach(function(_a, queryId) {\n                    var observableQuery = _a.observableQuery;\n                    var queryName = observableQuery && observableQuery.queryName;\n                    if (!queryName || !hasOwnProperty.call(updateQueries_1, queryName)) {\n                        return;\n                    }\n                    var updater = updateQueries_1[queryName];\n                    var _b = _this.queries.get(queryId), document = _b.document, variables = _b.variables;\n                    // Read the current query result from the store.\n                    var _c = cache.diff({\n                        query: document,\n                        variables: variables,\n                        returnPartialData: true,\n                        optimistic: false\n                    }), currentQueryResult = _c.result, complete = _c.complete;\n                    if (complete && currentQueryResult) {\n                        // Run our reducer using the current query result and the mutation result.\n                        var nextQueryResult = updater(currentQueryResult, {\n                            mutationResult: result,\n                            queryName: document && (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.getOperationName)(document) || void 0,\n                            queryVariables: variables\n                        });\n                        // Write the modified result back into the store if we got a new result.\n                        if (nextQueryResult) {\n                            cacheWrites.push({\n                                result: nextQueryResult,\n                                dataId: \"ROOT_QUERY\",\n                                query: document,\n                                variables: variables\n                            });\n                        }\n                    }\n                });\n            }\n        }\n        if (cacheWrites.length > 0 || (mutation.refetchQueries || \"\").length > 0 || mutation.update || mutation.onQueryUpdated || mutation.removeOptimistic) {\n            var results_1 = [];\n            this.refetchQueries({\n                updateCache: function(cache) {\n                    if (!skipCache) {\n                        cacheWrites.forEach(function(write) {\n                            return cache.write(write);\n                        });\n                    }\n                    // If the mutation has some writes associated with it then we need to\n                    // apply those writes to the store by running this reducer again with\n                    // a write action.\n                    var update = mutation.update;\n                    // Determine whether result is a SingleExecutionResult,\n                    // or the final ExecutionPatchResult.\n                    var isFinalResult = !(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_11__.isExecutionPatchResult)(result) || (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_11__.isExecutionPatchIncrementalResult)(result) && !result.hasNext;\n                    if (update) {\n                        if (!skipCache) {\n                            // Re-read the ROOT_MUTATION data we just wrote into the cache\n                            // (the first cache.write call in the cacheWrites.forEach loop\n                            // above), so field read functions have a chance to run for\n                            // fields within mutation result objects.\n                            var diff = cache.diff({\n                                id: \"ROOT_MUTATION\",\n                                // The cache complains if passed a mutation where it expects a\n                                // query, so we transform mutations and subscriptions to queries\n                                // (only once, thanks to this.transformCache).\n                                query: _this.getDocumentInfo(mutation.document).asQuery,\n                                variables: mutation.variables,\n                                optimistic: false,\n                                returnPartialData: true\n                            });\n                            if (diff.complete) {\n                                result = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, result), {\n                                    data: diff.result\n                                });\n                                if (\"incremental\" in result) {\n                                    delete result.incremental;\n                                }\n                                if (\"hasNext\" in result) {\n                                    delete result.hasNext;\n                                }\n                            }\n                        }\n                        // If we've received the whole response,\n                        // either a SingleExecutionResult or the final ExecutionPatchResult,\n                        // call the update function.\n                        if (isFinalResult) {\n                            update(cache, result, {\n                                context: mutation.context,\n                                variables: mutation.variables\n                            });\n                        }\n                    }\n                    // TODO Do this with cache.evict({ id: 'ROOT_MUTATION' }) but make it\n                    // shallow to allow rolling back optimistic evictions.\n                    if (!skipCache && !mutation.keepRootFields && isFinalResult) {\n                        cache.modify({\n                            id: \"ROOT_MUTATION\",\n                            fields: function(value, _a) {\n                                var fieldName = _a.fieldName, DELETE = _a.DELETE;\n                                return fieldName === \"__typename\" ? value : DELETE;\n                            }\n                        });\n                    }\n                },\n                include: mutation.refetchQueries,\n                // Write the final mutation.result to the root layer of the cache.\n                optimistic: false,\n                // Remove the corresponding optimistic layer at the same time as we\n                // write the final non-optimistic result.\n                removeOptimistic: mutation.removeOptimistic,\n                // Let the caller of client.mutate optionally determine the refetching\n                // behavior for watched queries after the mutation.update function runs.\n                // If no onQueryUpdated function was provided for this mutation, pass\n                // null instead of undefined to disable the default refetching behavior.\n                onQueryUpdated: mutation.onQueryUpdated || null\n            }).forEach(function(result) {\n                return results_1.push(result);\n            });\n            if (mutation.awaitRefetchQueries || mutation.onQueryUpdated) {\n                // Returning a promise here makes the mutation await that promise, so we\n                // include results in that promise's work if awaitRefetchQueries or an\n                // onQueryUpdated function was specified.\n                return Promise.all(results_1).then(function() {\n                    return result;\n                });\n            }\n        }\n        return Promise.resolve(result);\n    };\n    QueryManager.prototype.markMutationOptimistic = function(optimisticResponse, mutation) {\n        var _this = this;\n        var data = typeof optimisticResponse === \"function\" ? optimisticResponse(mutation.variables, {\n            IGNORE: IGNORE\n        }) : optimisticResponse;\n        if (data === IGNORE) {\n            return false;\n        }\n        this.cache.recordOptimisticTransaction(function(cache) {\n            try {\n                _this.markMutationResult((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, mutation), {\n                    result: {\n                        data: data\n                    }\n                }), cache);\n            } catch (error) {\n                globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.error(error);\n            }\n        }, mutation.mutationId);\n        return true;\n    };\n    QueryManager.prototype.fetchQuery = function(queryId, options, networkStatus) {\n        return this.fetchConcastWithInfo(this.getOrCreateQuery(queryId), options, networkStatus).concast.promise;\n    };\n    QueryManager.prototype.getQueryStore = function() {\n        var store = Object.create(null);\n        this.queries.forEach(function(info, queryId) {\n            store[queryId] = {\n                variables: info.variables,\n                networkStatus: info.networkStatus,\n                networkError: info.networkError,\n                graphQLErrors: info.graphQLErrors\n            };\n        });\n        return store;\n    };\n    QueryManager.prototype.resetErrors = function(queryId) {\n        var queryInfo = this.queries.get(queryId);\n        if (queryInfo) {\n            queryInfo.networkError = undefined;\n            queryInfo.graphQLErrors = [];\n        }\n    };\n    QueryManager.prototype.transform = function(document) {\n        return this.documentTransform.transformDocument(document);\n    };\n    QueryManager.prototype.getDocumentInfo = function(document) {\n        var transformCache = this.transformCache;\n        if (!transformCache.has(document)) {\n            var cacheEntry = {\n                // TODO These three calls (hasClientExports, shouldForceResolvers, and\n                // usesNonreactiveDirective) are performing independent full traversals\n                // of the transformed document. We should consider merging these\n                // traversals into a single pass in the future, though the work is\n                // cached after the first time.\n                hasClientExports: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_14__.hasClientExports)(document),\n                hasForcedResolvers: this.localState.shouldForceResolvers(document),\n                hasNonreactiveDirective: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_14__.hasDirectives)([\n                    \"nonreactive\"\n                ], document),\n                nonReactiveQuery: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_15__.addNonReactiveToNamedFragments)(document),\n                clientQuery: this.localState.clientQuery(document),\n                serverQuery: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_15__.removeDirectivesFromDocument)([\n                    {\n                        name: \"client\",\n                        remove: true\n                    },\n                    {\n                        name: \"connection\"\n                    },\n                    {\n                        name: \"nonreactive\"\n                    },\n                    {\n                        name: \"unmask\"\n                    }\n                ], document),\n                defaultVars: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.getDefaultValues)((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.getOperationDefinition)(document)),\n                // Transform any mutation or subscription operations to query operations\n                // so we can read/write them from/to the cache.\n                asQuery: (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, document), {\n                    definitions: document.definitions.map(function(def) {\n                        if (def.kind === \"OperationDefinition\" && def.operation !== \"query\") {\n                            return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, def), {\n                                operation: \"query\"\n                            });\n                        }\n                        return def;\n                    })\n                })\n            };\n            transformCache.set(document, cacheEntry);\n        }\n        return transformCache.get(document);\n    };\n    QueryManager.prototype.getVariables = function(document, variables) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, this.getDocumentInfo(document).defaultVars), variables);\n    };\n    QueryManager.prototype.watchQuery = function(options) {\n        var query = this.transform(options.query);\n        // assign variable default values if supplied\n        // NOTE: We don't modify options.query here with the transformed query to\n        // ensure observable.options.query is set to the raw untransformed query.\n        options = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, options), {\n            variables: this.getVariables(query, options.variables)\n        });\n        if (typeof options.notifyOnNetworkStatusChange === \"undefined\") {\n            options.notifyOnNetworkStatusChange = false;\n        }\n        var queryInfo = new _QueryInfo_js__WEBPACK_IMPORTED_MODULE_10__.QueryInfo(this);\n        var observable = new _ObservableQuery_js__WEBPACK_IMPORTED_MODULE_16__.ObservableQuery({\n            queryManager: this,\n            queryInfo: queryInfo,\n            options: options\n        });\n        observable[\"lastQuery\"] = query;\n        if (!_ObservableQuery_js__WEBPACK_IMPORTED_MODULE_16__.ObservableQuery[\"inactiveOnCreation\"].getValue()) {\n            this.queries.set(observable.queryId, queryInfo);\n        }\n        // We give queryInfo the transformed query to ensure the first cache diff\n        // uses the transformed query instead of the raw query\n        queryInfo.init({\n            document: query,\n            observableQuery: observable,\n            variables: observable.variables\n        });\n        return observable;\n    };\n    QueryManager.prototype.query = function(options, queryId) {\n        var _this = this;\n        if (queryId === void 0) {\n            queryId = this.generateQueryId();\n        }\n        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(options.query, 38);\n        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(options.query.kind === \"Document\", 39);\n        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(!options.returnPartialData, 40);\n        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(!options.pollInterval, 41);\n        var query = this.transform(options.query);\n        return this.fetchQuery(queryId, (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, options), {\n            query: query\n        })).then(function(result) {\n            return result && (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, result), {\n                data: _this.maskOperation({\n                    document: query,\n                    data: result.data,\n                    fetchPolicy: options.fetchPolicy,\n                    id: queryId\n                })\n            });\n        }).finally(function() {\n            return _this.stopQuery(queryId);\n        });\n    };\n    QueryManager.prototype.generateQueryId = function() {\n        return String(this.queryIdCounter++);\n    };\n    QueryManager.prototype.generateRequestId = function() {\n        return this.requestIdCounter++;\n    };\n    QueryManager.prototype.generateMutationId = function() {\n        return String(this.mutationIdCounter++);\n    };\n    QueryManager.prototype.stopQueryInStore = function(queryId) {\n        this.stopQueryInStoreNoBroadcast(queryId);\n        this.broadcastQueries();\n    };\n    QueryManager.prototype.stopQueryInStoreNoBroadcast = function(queryId) {\n        var queryInfo = this.queries.get(queryId);\n        if (queryInfo) queryInfo.stop();\n    };\n    QueryManager.prototype.clearStore = function(options) {\n        if (options === void 0) {\n            options = {\n                discardWatches: true\n            };\n        }\n        // Before we have sent the reset action to the store, we can no longer\n        // rely on the results returned by in-flight requests since these may\n        // depend on values that previously existed in the data portion of the\n        // store. So, we cancel the promises and observers that we have issued\n        // so far and not yet resolved (in the case of queries).\n        this.cancelPendingFetches((0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(42));\n        this.queries.forEach(function(queryInfo) {\n            if (queryInfo.observableQuery) {\n                // Set loading to true so listeners don't trigger unless they want\n                // results with partial data.\n                queryInfo.networkStatus = _networkStatus_js__WEBPACK_IMPORTED_MODULE_17__.NetworkStatus.loading;\n            } else {\n                queryInfo.stop();\n            }\n        });\n        if (this.mutationStore) {\n            this.mutationStore = Object.create(null);\n        }\n        // begin removing data from the store\n        return this.cache.reset(options);\n    };\n    QueryManager.prototype.getObservableQueries = function(include) {\n        var _this = this;\n        if (include === void 0) {\n            include = \"active\";\n        }\n        var queries = new Map();\n        var queryNames = new Map();\n        var queryNamesAndQueryStrings = new Map();\n        var legacyQueryOptions = new Set();\n        if (Array.isArray(include)) {\n            include.forEach(function(desc) {\n                if (typeof desc === \"string\") {\n                    queryNames.set(desc, desc);\n                    queryNamesAndQueryStrings.set(desc, false);\n                } else if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_18__.isDocumentNode)(desc)) {\n                    var queryString = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_19__.print)(_this.transform(desc));\n                    queryNames.set(queryString, (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.getOperationName)(desc));\n                    queryNamesAndQueryStrings.set(queryString, false);\n                } else if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_20__.isNonNullObject)(desc) && desc.query) {\n                    legacyQueryOptions.add(desc);\n                }\n            });\n        }\n        this.queries.forEach(function(_a, queryId) {\n            var oq = _a.observableQuery, document = _a.document;\n            if (oq) {\n                if (include === \"all\") {\n                    queries.set(queryId, oq);\n                    return;\n                }\n                var queryName = oq.queryName, fetchPolicy = oq.options.fetchPolicy;\n                if (fetchPolicy === \"standby\" || include === \"active\" && !oq.hasObservers()) {\n                    return;\n                }\n                if (include === \"active\" || queryName && queryNamesAndQueryStrings.has(queryName) || document && queryNamesAndQueryStrings.has((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_19__.print)(document))) {\n                    queries.set(queryId, oq);\n                    if (queryName) queryNamesAndQueryStrings.set(queryName, true);\n                    if (document) queryNamesAndQueryStrings.set((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_19__.print)(document), true);\n                }\n            }\n        });\n        if (legacyQueryOptions.size) {\n            legacyQueryOptions.forEach(function(options) {\n                // We will be issuing a fresh network request for this query, so we\n                // pre-allocate a new query ID here, using a special prefix to enable\n                // cleaning up these temporary queries later, after fetching.\n                var queryId = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_21__.makeUniqueId)(\"legacyOneTimeQuery\");\n                var queryInfo = _this.getOrCreateQuery(queryId).init({\n                    document: options.query,\n                    variables: options.variables\n                });\n                var oq = new _ObservableQuery_js__WEBPACK_IMPORTED_MODULE_16__.ObservableQuery({\n                    queryManager: _this,\n                    queryInfo: queryInfo,\n                    options: (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, options), {\n                        fetchPolicy: \"network-only\"\n                    })\n                });\n                (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(oq.queryId === queryId);\n                queryInfo.setObservableQuery(oq);\n                queries.set(queryId, oq);\n            });\n        }\n        if (globalThis.__DEV__ !== false && queryNamesAndQueryStrings.size) {\n            queryNamesAndQueryStrings.forEach(function(included, nameOrQueryString) {\n                if (!included) {\n                    var queryName = queryNames.get(nameOrQueryString);\n                    if (queryName) {\n                        globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(43, queryName);\n                    } else {\n                        globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(44);\n                    }\n                }\n            });\n        }\n        return queries;\n    };\n    QueryManager.prototype.reFetchObservableQueries = function(includeStandby) {\n        var _this = this;\n        if (includeStandby === void 0) {\n            includeStandby = false;\n        }\n        var observableQueryPromises = [];\n        this.getObservableQueries(includeStandby ? \"all\" : \"active\").forEach(function(observableQuery, queryId) {\n            var fetchPolicy = observableQuery.options.fetchPolicy;\n            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_22__.muteDeprecations)(\"resetLastResults\", function() {\n                return observableQuery.resetLastResults();\n            });\n            if (includeStandby || fetchPolicy !== \"standby\" && fetchPolicy !== \"cache-only\") {\n                observableQueryPromises.push(observableQuery.refetch());\n            }\n            (_this.queries.get(queryId) || observableQuery[\"queryInfo\"]).setDiff(null);\n        });\n        this.broadcastQueries();\n        return Promise.all(observableQueryPromises);\n    };\n    QueryManager.prototype.startGraphQLSubscription = function(options) {\n        var _this = this;\n        var query = options.query, variables = options.variables;\n        var fetchPolicy = options.fetchPolicy, _a = options.errorPolicy, errorPolicy = _a === void 0 ? \"none\" : _a, _b = options.context, context = _b === void 0 ? {} : _b, _c = options.extensions, extensions = _c === void 0 ? {} : _c;\n        query = this.transform(query);\n        variables = this.getVariables(query, variables);\n        var makeObservable = function(variables) {\n            return _this.getObservableFromLink(query, context, variables, extensions).map(function(result) {\n                if (fetchPolicy !== \"no-cache\") {\n                    // the subscription interface should handle not sending us results we no longer subscribe to.\n                    // XXX I don't think we ever send in an object with errors, but we might in the future...\n                    if ((0,_QueryInfo_js__WEBPACK_IMPORTED_MODULE_10__.shouldWriteResult)(result, errorPolicy)) {\n                        _this.cache.write({\n                            query: query,\n                            result: result.data,\n                            dataId: \"ROOT_SUBSCRIPTION\",\n                            variables: variables\n                        });\n                    }\n                    _this.broadcastQueries();\n                }\n                var hasErrors = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.graphQLResultHasError)(result);\n                var hasProtocolErrors = (0,_errors_index_js__WEBPACK_IMPORTED_MODULE_9__.graphQLResultHasProtocolErrors)(result);\n                if (hasErrors || hasProtocolErrors) {\n                    var errors = {};\n                    if (hasErrors) {\n                        errors.graphQLErrors = result.errors;\n                    }\n                    if (hasProtocolErrors) {\n                        errors.protocolErrors = result.extensions[_errors_index_js__WEBPACK_IMPORTED_MODULE_9__.PROTOCOL_ERRORS_SYMBOL];\n                    }\n                    // `errorPolicy` is a mechanism for handling GraphQL errors, according\n                    // to our documentation, so we throw protocol errors regardless of the\n                    // set error policy.\n                    if (errorPolicy === \"none\" || hasProtocolErrors) {\n                        throw new _errors_index_js__WEBPACK_IMPORTED_MODULE_9__.ApolloError(errors);\n                    }\n                }\n                if (errorPolicy === \"ignore\") {\n                    delete result.errors;\n                }\n                return result;\n            });\n        };\n        if (this.getDocumentInfo(query).hasClientExports) {\n            var observablePromise_1 = this.localState.addExportedVariables(query, variables, context).then(makeObservable);\n            return new _utilities_index_js__WEBPACK_IMPORTED_MODULE_23__.Observable(function(observer) {\n                var sub = null;\n                observablePromise_1.then(function(observable) {\n                    return sub = observable.subscribe(observer);\n                }, observer.error);\n                return function() {\n                    return sub && sub.unsubscribe();\n                };\n            });\n        }\n        return makeObservable(variables);\n    };\n    QueryManager.prototype.stopQuery = function(queryId) {\n        this.stopQueryNoBroadcast(queryId);\n        this.broadcastQueries();\n    };\n    QueryManager.prototype.stopQueryNoBroadcast = function(queryId) {\n        this.stopQueryInStoreNoBroadcast(queryId);\n        this.removeQuery(queryId);\n    };\n    QueryManager.prototype.removeQuery = function(queryId) {\n        var _a;\n        // teardown all links\n        // Both `QueryManager.fetchRequest` and `QueryManager.query` create separate promises\n        // that each add their reject functions to fetchCancelFns.\n        // A query created with `QueryManager.query()` could trigger a `QueryManager.fetchRequest`.\n        // The same queryId could have two rejection fns for two promises\n        this.fetchCancelFns.delete(queryId);\n        if (this.queries.has(queryId)) {\n            (_a = this.queries.get(queryId)) === null || _a === void 0 ? void 0 : _a.stop();\n            this.queries.delete(queryId);\n        }\n    };\n    QueryManager.prototype.broadcastQueries = function() {\n        if (this.onBroadcast) this.onBroadcast();\n        this.queries.forEach(function(info) {\n            var _a;\n            return (_a = info.observableQuery) === null || _a === void 0 ? void 0 : _a[\"notify\"]();\n        });\n    };\n    QueryManager.prototype.getLocalState = function() {\n        return this.localState;\n    };\n    QueryManager.prototype.getObservableFromLink = function(query, context, variables, extensions, // Prefer context.queryDeduplication if specified.\n    deduplication) {\n        var _this = this;\n        var _a;\n        if (deduplication === void 0) {\n            deduplication = (_a = context === null || context === void 0 ? void 0 : context.queryDeduplication) !== null && _a !== void 0 ? _a : this.queryDeduplication;\n        }\n        var observable;\n        var _b = this.getDocumentInfo(query), serverQuery = _b.serverQuery, clientQuery = _b.clientQuery;\n        if (serverQuery) {\n            var _c = this, inFlightLinkObservables_1 = _c.inFlightLinkObservables, link = _c.link;\n            var operation = {\n                query: serverQuery,\n                variables: variables,\n                operationName: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.getOperationName)(serverQuery) || void 0,\n                context: this.prepareContext((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, context), {\n                    forceFetch: !deduplication\n                })),\n                extensions: extensions\n            };\n            context = operation.context;\n            if (deduplication) {\n                var printedServerQuery_1 = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_19__.print)(serverQuery);\n                var varJson_1 = (0,_cache_index_js__WEBPACK_IMPORTED_MODULE_24__.canonicalStringify)(variables);\n                var entry = inFlightLinkObservables_1.lookup(printedServerQuery_1, varJson_1);\n                observable = entry.observable;\n                if (!observable) {\n                    var concast_1 = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_25__.Concast([\n                        (0,_link_core_index_js__WEBPACK_IMPORTED_MODULE_26__.execute)(link, operation)\n                    ]);\n                    observable = entry.observable = concast_1;\n                    concast_1.beforeNext(function cb(method, arg) {\n                        if (method === \"next\" && \"hasNext\" in arg && arg.hasNext) {\n                            concast_1.beforeNext(cb);\n                        } else {\n                            inFlightLinkObservables_1.remove(printedServerQuery_1, varJson_1);\n                        }\n                    });\n                }\n            } else {\n                observable = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_25__.Concast([\n                    (0,_link_core_index_js__WEBPACK_IMPORTED_MODULE_26__.execute)(link, operation)\n                ]);\n            }\n        } else {\n            observable = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_25__.Concast([\n                _utilities_index_js__WEBPACK_IMPORTED_MODULE_23__.Observable.of({\n                    data: {}\n                })\n            ]);\n            context = this.prepareContext(context);\n        }\n        if (clientQuery) {\n            observable = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.asyncMap)(observable, function(result) {\n                return _this.localState.runResolvers({\n                    document: clientQuery,\n                    remoteResult: result,\n                    context: context,\n                    variables: variables\n                });\n            });\n        }\n        return observable;\n    };\n    QueryManager.prototype.getResultsFromLink = function(queryInfo, cacheWriteBehavior, options) {\n        var requestId = queryInfo.lastRequestId = this.generateRequestId();\n        // Performing transformForLink here gives this.cache a chance to fill in\n        // missing fragment definitions (for example) before sending this document\n        // through the link chain.\n        var linkDocument = this.cache.transformForLink(options.query);\n        return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.asyncMap)(this.getObservableFromLink(linkDocument, options.context, options.variables), function(result) {\n            var graphQLErrors = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.getGraphQLErrorsFromResult)(result);\n            var hasErrors = graphQLErrors.length > 0;\n            var errorPolicy = options.errorPolicy;\n            // If we interrupted this request by calling getResultsFromLink again\n            // with the same QueryInfo object, we ignore the old results.\n            if (requestId >= queryInfo.lastRequestId) {\n                if (hasErrors && errorPolicy === \"none\") {\n                    // Throwing here effectively calls observer.error.\n                    throw queryInfo.markError(new _errors_index_js__WEBPACK_IMPORTED_MODULE_9__.ApolloError({\n                        graphQLErrors: graphQLErrors\n                    }));\n                }\n                // Use linkDocument rather than queryInfo.document so the\n                // operation/fragments used to write the result are the same as the\n                // ones used to obtain it from the link.\n                queryInfo.markResult(result, linkDocument, options, cacheWriteBehavior);\n                queryInfo.markReady();\n            }\n            var aqr = {\n                data: result.data,\n                loading: false,\n                networkStatus: _networkStatus_js__WEBPACK_IMPORTED_MODULE_17__.NetworkStatus.ready\n            };\n            // In the case we start multiple network requests simulatenously, we\n            // want to ensure we properly set `data` if we're reporting on an old\n            // result which will not be caught by the conditional above that ends up\n            // throwing the markError result.\n            if (hasErrors && errorPolicy === \"none\") {\n                aqr.data = void 0;\n            }\n            if (hasErrors && errorPolicy !== \"ignore\") {\n                aqr.errors = graphQLErrors;\n                aqr.networkStatus = _networkStatus_js__WEBPACK_IMPORTED_MODULE_17__.NetworkStatus.error;\n            }\n            return aqr;\n        }, function(networkError) {\n            var error = (0,_errors_index_js__WEBPACK_IMPORTED_MODULE_9__.isApolloError)(networkError) ? networkError : new _errors_index_js__WEBPACK_IMPORTED_MODULE_9__.ApolloError({\n                networkError: networkError\n            });\n            // Avoid storing errors from older interrupted queries.\n            if (requestId >= queryInfo.lastRequestId) {\n                queryInfo.markError(error);\n            }\n            throw error;\n        });\n    };\n    QueryManager.prototype.fetchConcastWithInfo = function(queryInfo, options, // The initial networkStatus for this fetch, most often\n    // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n    // or setVariables.\n    networkStatus, query) {\n        var _this = this;\n        if (networkStatus === void 0) {\n            networkStatus = _networkStatus_js__WEBPACK_IMPORTED_MODULE_17__.NetworkStatus.loading;\n        }\n        if (query === void 0) {\n            query = options.query;\n        }\n        var variables = this.getVariables(query, options.variables);\n        var defaults = this.defaultOptions.watchQuery;\n        var _a = options.fetchPolicy, fetchPolicy = _a === void 0 ? defaults && defaults.fetchPolicy || \"cache-first\" : _a, _b = options.errorPolicy, errorPolicy = _b === void 0 ? defaults && defaults.errorPolicy || \"none\" : _b, _c = options.returnPartialData, returnPartialData = _c === void 0 ? false : _c, _d = options.notifyOnNetworkStatusChange, notifyOnNetworkStatusChange = _d === void 0 ? false : _d, _e = options.context, context = _e === void 0 ? {} : _e;\n        var normalized = Object.assign({}, options, {\n            query: query,\n            variables: variables,\n            fetchPolicy: fetchPolicy,\n            errorPolicy: errorPolicy,\n            returnPartialData: returnPartialData,\n            notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,\n            context: context\n        });\n        var fromVariables = function(variables) {\n            // Since normalized is always a fresh copy of options, it's safe to\n            // modify its properties here, rather than creating yet another new\n            // WatchQueryOptions object.\n            normalized.variables = variables;\n            var sourcesWithInfo = _this.fetchQueryByPolicy(queryInfo, normalized, networkStatus);\n            if (// If we're in standby, postpone advancing options.fetchPolicy using\n            // applyNextFetchPolicy.\n            normalized.fetchPolicy !== \"standby\" && // The \"standby\" policy currently returns [] from fetchQueryByPolicy, so\n            // this is another way to detect when nothing was done/fetched.\n            sourcesWithInfo.sources.length > 0 && queryInfo.observableQuery) {\n                queryInfo.observableQuery[\"applyNextFetchPolicy\"](\"after-fetch\", options);\n            }\n            return sourcesWithInfo;\n        };\n        // This cancel function needs to be set before the concast is created,\n        // in case concast creation synchronously cancels the request.\n        var cleanupCancelFn = function() {\n            return _this.fetchCancelFns.delete(queryInfo.queryId);\n        };\n        this.fetchCancelFns.set(queryInfo.queryId, function(reason) {\n            cleanupCancelFn();\n            // This delay ensures the concast variable has been initialized.\n            setTimeout(function() {\n                return concast.cancel(reason);\n            });\n        });\n        var concast, containsDataFromLink;\n        // If the query has @export(as: ...) directives, then we need to\n        // process those directives asynchronously. When there are no\n        // @export directives (the common case), we deliberately avoid\n        // wrapping the result of this.fetchQueryByPolicy in a Promise,\n        // since the timing of result delivery is (unfortunately) important\n        // for backwards compatibility. TODO This code could be simpler if\n        // we deprecated and removed LocalState.\n        if (this.getDocumentInfo(normalized.query).hasClientExports) {\n            concast = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_25__.Concast(this.localState.addExportedVariables(normalized.query, normalized.variables, normalized.context).then(fromVariables).then(function(sourcesWithInfo) {\n                return sourcesWithInfo.sources;\n            }));\n            // there is just no way we can synchronously get the *right* value here,\n            // so we will assume `true`, which is the behaviour before the bug fix in\n            // #10597. This means that bug is not fixed in that case, and is probably\n            // un-fixable with reasonable effort for the edge case of @export as\n            // directives.\n            containsDataFromLink = true;\n        } else {\n            var sourcesWithInfo = fromVariables(normalized.variables);\n            containsDataFromLink = sourcesWithInfo.fromLink;\n            concast = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_25__.Concast(sourcesWithInfo.sources);\n        }\n        concast.promise.then(cleanupCancelFn, cleanupCancelFn);\n        return {\n            concast: concast,\n            fromLink: containsDataFromLink\n        };\n    };\n    QueryManager.prototype.refetchQueries = function(_a) {\n        var _this = this;\n        var updateCache = _a.updateCache, include = _a.include, _b = _a.optimistic, optimistic = _b === void 0 ? false : _b, _c = _a.removeOptimistic, removeOptimistic = _c === void 0 ? optimistic ? (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_21__.makeUniqueId)(\"refetchQueries\") : void 0 : _c, onQueryUpdated = _a.onQueryUpdated;\n        var includedQueriesById = new Map();\n        if (include) {\n            this.getObservableQueries(include).forEach(function(oq, queryId) {\n                includedQueriesById.set(queryId, {\n                    oq: oq,\n                    lastDiff: (_this.queries.get(queryId) || oq[\"queryInfo\"]).getDiff()\n                });\n            });\n        }\n        var results = new Map();\n        if (updateCache) {\n            this.cache.batch({\n                update: updateCache,\n                // Since you can perform any combination of cache reads and/or writes in\n                // the cache.batch update function, its optimistic option can be either\n                // a boolean or a string, representing three distinct modes of\n                // operation:\n                //\n                // * false: read/write only the root layer\n                // * true: read/write the topmost layer\n                // * string: read/write a fresh optimistic layer with that ID string\n                //\n                // When typeof optimistic === \"string\", a new optimistic layer will be\n                // temporarily created within cache.batch with that string as its ID. If\n                // we then pass that same string as the removeOptimistic option, we can\n                // make cache.batch immediately remove the optimistic layer after\n                // running the updateCache function, triggering only one broadcast.\n                //\n                // However, the refetchQueries method accepts only true or false for its\n                // optimistic option (not string). We interpret true to mean a temporary\n                // optimistic layer should be created, to allow efficiently rolling back\n                // the effect of the updateCache function, which involves passing a\n                // string instead of true as the optimistic option to cache.batch, when\n                // refetchQueries receives optimistic: true.\n                //\n                // In other words, we are deliberately not supporting the use case of\n                // writing to an *existing* optimistic layer (using the refetchQueries\n                // updateCache function), since that would potentially interfere with\n                // other optimistic updates in progress. Instead, you can read/write\n                // only the root layer by passing optimistic: false to refetchQueries,\n                // or you can read/write a brand new optimistic layer that will be\n                // automatically removed by passing optimistic: true.\n                optimistic: optimistic && removeOptimistic || false,\n                // The removeOptimistic option can also be provided by itself, even if\n                // optimistic === false, to remove some previously-added optimistic\n                // layer safely and efficiently, like we do in markMutationResult.\n                //\n                // If an explicit removeOptimistic string is provided with optimistic:\n                // true, the removeOptimistic string will determine the ID of the\n                // temporary optimistic layer, in case that ever matters.\n                removeOptimistic: removeOptimistic,\n                onWatchUpdated: function(watch, diff, lastDiff) {\n                    var oq = watch.watcher instanceof _QueryInfo_js__WEBPACK_IMPORTED_MODULE_10__.QueryInfo && watch.watcher.observableQuery;\n                    if (oq) {\n                        if (onQueryUpdated) {\n                            // Since we're about to handle this query now, remove it from\n                            // includedQueriesById, in case it was added earlier because of\n                            // options.include.\n                            includedQueriesById.delete(oq.queryId);\n                            var result = onQueryUpdated(oq, diff, lastDiff);\n                            if (result === true) {\n                                // The onQueryUpdated function requested the default refetching\n                                // behavior by returning true.\n                                result = oq.refetch();\n                            }\n                            // Record the result in the results Map, as long as onQueryUpdated\n                            // did not return false to skip/ignore this result.\n                            if (result !== false) {\n                                results.set(oq, result);\n                            }\n                            // Allow the default cache broadcast to happen, except when\n                            // onQueryUpdated returns false.\n                            return result;\n                        }\n                        if (onQueryUpdated !== null) {\n                            // If we don't have an onQueryUpdated function, and onQueryUpdated\n                            // was not disabled by passing null, make sure this query is\n                            // \"included\" like any other options.include-specified query.\n                            includedQueriesById.set(oq.queryId, {\n                                oq: oq,\n                                lastDiff: lastDiff,\n                                diff: diff\n                            });\n                        }\n                    }\n                }\n            });\n        }\n        if (includedQueriesById.size) {\n            includedQueriesById.forEach(function(_a, queryId) {\n                var oq = _a.oq, lastDiff = _a.lastDiff, diff = _a.diff;\n                var result;\n                // If onQueryUpdated is provided, we want to use it for all included\n                // queries, even the QueryOptions ones.\n                if (onQueryUpdated) {\n                    if (!diff) {\n                        diff = (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_22__.muteDeprecations)(\"canonizeResults\", function() {\n                            return _this.cache.diff(oq[\"queryInfo\"][\"getDiffOptions\"]());\n                        });\n                    }\n                    result = onQueryUpdated(oq, diff, lastDiff);\n                }\n                // Otherwise, we fall back to refetching.\n                if (!onQueryUpdated || result === true) {\n                    result = oq.refetch();\n                }\n                if (result !== false) {\n                    results.set(oq, result);\n                }\n                if (queryId.indexOf(\"legacyOneTimeQuery\") >= 0) {\n                    _this.stopQueryNoBroadcast(queryId);\n                }\n            });\n        }\n        if (removeOptimistic) {\n            // In case no updateCache callback was provided (so cache.batch was not\n            // called above, and thus did not already remove the optimistic layer),\n            // remove it here. Since this is a no-op when the layer has already been\n            // removed, we do it even if we called cache.batch above, since it's\n            // possible this.cache is an instance of some ApolloCache subclass other\n            // than InMemoryCache, and does not fully support the removeOptimistic\n            // option for cache.batch.\n            this.cache.removeOptimistic(removeOptimistic);\n        }\n        return results;\n    };\n    QueryManager.prototype.maskOperation = function(options) {\n        var _a, _b, _c;\n        var document = options.document, data = options.data;\n        if (globalThis.__DEV__ !== false) {\n            var fetchPolicy = options.fetchPolicy, id = options.id;\n            var operationType = (_a = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.getOperationDefinition)(document)) === null || _a === void 0 ? void 0 : _a.operation;\n            var operationId = ((_b = operationType === null || operationType === void 0 ? void 0 : operationType[0]) !== null && _b !== void 0 ? _b : \"o\") + id;\n            if (this.dataMasking && fetchPolicy === \"no-cache\" && !(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_27__.isFullyUnmaskedOperation)(document) && !this.noCacheWarningsByQueryId.has(operationId)) {\n                this.noCacheWarningsByQueryId.add(operationId);\n                globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(45, (_c = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.getOperationName)(document)) !== null && _c !== void 0 ? _c : \"Unnamed \".concat(operationType !== null && operationType !== void 0 ? operationType : \"operation\"));\n            }\n        }\n        return this.dataMasking ? (0,_masking_index_js__WEBPACK_IMPORTED_MODULE_28__.maskOperation)(data, document, this.cache) : data;\n    };\n    QueryManager.prototype.maskFragment = function(options) {\n        var data = options.data, fragment = options.fragment, fragmentName = options.fragmentName;\n        return this.dataMasking ? (0,_masking_index_js__WEBPACK_IMPORTED_MODULE_29__.maskFragment)(data, fragment, this.cache, fragmentName) : data;\n    };\n    QueryManager.prototype.fetchQueryByPolicy = function(queryInfo, _a, // The initial networkStatus for this fetch, most often\n    // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n    // or setVariables.\n    networkStatus) {\n        var _this = this;\n        var query = _a.query, variables = _a.variables, fetchPolicy = _a.fetchPolicy, refetchWritePolicy = _a.refetchWritePolicy, errorPolicy = _a.errorPolicy, returnPartialData = _a.returnPartialData, context = _a.context, notifyOnNetworkStatusChange = _a.notifyOnNetworkStatusChange;\n        var oldNetworkStatus = queryInfo.networkStatus;\n        queryInfo.init({\n            document: query,\n            variables: variables,\n            networkStatus: networkStatus\n        });\n        var readCache = function() {\n            return queryInfo.getDiff();\n        };\n        var resultsFromCache = function(diff, networkStatus) {\n            if (networkStatus === void 0) {\n                networkStatus = queryInfo.networkStatus || _networkStatus_js__WEBPACK_IMPORTED_MODULE_17__.NetworkStatus.loading;\n            }\n            var data = diff.result;\n            if (globalThis.__DEV__ !== false && !returnPartialData && !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(data, {})) {\n                (0,_ObservableQuery_js__WEBPACK_IMPORTED_MODULE_16__.logMissingFieldErrors)(diff.missing);\n            }\n            var fromData = function(data) {\n                return _utilities_index_js__WEBPACK_IMPORTED_MODULE_23__.Observable.of((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({\n                    data: data,\n                    loading: (0,_networkStatus_js__WEBPACK_IMPORTED_MODULE_17__.isNetworkRequestInFlight)(networkStatus),\n                    networkStatus: networkStatus\n                }, diff.complete ? null : {\n                    partial: true\n                }));\n            };\n            if (data && _this.getDocumentInfo(query).hasForcedResolvers) {\n                return _this.localState.runResolvers({\n                    document: query,\n                    remoteResult: {\n                        data: data\n                    },\n                    context: context,\n                    variables: variables,\n                    onlyRunForcedResolvers: true\n                }).then(function(resolved) {\n                    return fromData(resolved.data || void 0);\n                });\n            }\n            // Resolves https://github.com/apollographql/apollo-client/issues/10317.\n            // If errorPolicy is 'none' and notifyOnNetworkStatusChange is true,\n            // data was incorrectly returned from the cache on refetch:\n            // if diff.missing exists, we should not return cache data.\n            if (errorPolicy === \"none\" && networkStatus === _networkStatus_js__WEBPACK_IMPORTED_MODULE_17__.NetworkStatus.refetch && Array.isArray(diff.missing)) {\n                return fromData(void 0);\n            }\n            return fromData(data);\n        };\n        var cacheWriteBehavior = fetchPolicy === \"no-cache\" ? 0 /* CacheWriteBehavior.FORBID */  : networkStatus === _networkStatus_js__WEBPACK_IMPORTED_MODULE_17__.NetworkStatus.refetch && refetchWritePolicy !== \"merge\" ? 1 /* CacheWriteBehavior.OVERWRITE */  : 2 /* CacheWriteBehavior.MERGE */ ;\n        var resultsFromLink = function() {\n            return _this.getResultsFromLink(queryInfo, cacheWriteBehavior, {\n                query: query,\n                variables: variables,\n                context: context,\n                fetchPolicy: fetchPolicy,\n                errorPolicy: errorPolicy\n            });\n        };\n        var shouldNotify = notifyOnNetworkStatusChange && typeof oldNetworkStatus === \"number\" && oldNetworkStatus !== networkStatus && (0,_networkStatus_js__WEBPACK_IMPORTED_MODULE_17__.isNetworkRequestInFlight)(networkStatus);\n        switch(fetchPolicy){\n            default:\n            case \"cache-first\":\n                {\n                    var diff = readCache();\n                    if (diff.complete) {\n                        return {\n                            fromLink: false,\n                            sources: [\n                                resultsFromCache(diff, queryInfo.markReady())\n                            ]\n                        };\n                    }\n                    if (returnPartialData || shouldNotify) {\n                        return {\n                            fromLink: true,\n                            sources: [\n                                resultsFromCache(diff),\n                                resultsFromLink()\n                            ]\n                        };\n                    }\n                    return {\n                        fromLink: true,\n                        sources: [\n                            resultsFromLink()\n                        ]\n                    };\n                }\n            case \"cache-and-network\":\n                {\n                    var diff = readCache();\n                    if (diff.complete || returnPartialData || shouldNotify) {\n                        return {\n                            fromLink: true,\n                            sources: [\n                                resultsFromCache(diff),\n                                resultsFromLink()\n                            ]\n                        };\n                    }\n                    return {\n                        fromLink: true,\n                        sources: [\n                            resultsFromLink()\n                        ]\n                    };\n                }\n            case \"cache-only\":\n                return {\n                    fromLink: false,\n                    sources: [\n                        resultsFromCache(readCache(), queryInfo.markReady())\n                    ]\n                };\n            case \"network-only\":\n                if (shouldNotify) {\n                    return {\n                        fromLink: true,\n                        sources: [\n                            resultsFromCache(readCache()),\n                            resultsFromLink()\n                        ]\n                    };\n                }\n                return {\n                    fromLink: true,\n                    sources: [\n                        resultsFromLink()\n                    ]\n                };\n            case \"no-cache\":\n                if (shouldNotify) {\n                    return {\n                        fromLink: true,\n                        // Note that queryInfo.getDiff() for no-cache queries does not call\n                        // cache.diff, but instead returns a { complete: false } stub result\n                        // when there is no queryInfo.diff already defined.\n                        sources: [\n                            resultsFromCache(queryInfo.getDiff()),\n                            resultsFromLink()\n                        ]\n                    };\n                }\n                return {\n                    fromLink: true,\n                    sources: [\n                        resultsFromLink()\n                    ]\n                };\n            case \"standby\":\n                return {\n                    fromLink: false,\n                    sources: []\n                };\n        }\n    };\n    QueryManager.prototype.getOrCreateQuery = function(queryId) {\n        if (queryId && !this.queries.has(queryId)) {\n            this.queries.set(queryId, new _QueryInfo_js__WEBPACK_IMPORTED_MODULE_10__.QueryInfo(this, queryId));\n        }\n        return this.queries.get(queryId);\n    };\n    QueryManager.prototype.prepareContext = function(context) {\n        if (context === void 0) {\n            context = {};\n        }\n        var newContext = this.localState.prepareContext(context);\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, this.defaultContext), newContext), {\n            clientAwareness: this.clientAwareness\n        });\n    };\n    return QueryManager;\n}();\n //# sourceMappingURL=QueryManager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvY29yZS9RdWVyeU1hbmFnZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUF5RDtBQUNvQjtBQUN2QztBQUNVO0FBQzBKO0FBQ25KO0FBQ29PO0FBQzNNO0FBQ2lCO0FBQ25CO0FBQ0Q7QUFDZDtBQUNIO0FBQ2Q7QUFDOUMsSUFBSXdDLGlCQUFpQkMsT0FBT0MsU0FBUyxDQUFDRixjQUFjO0FBQ3BELElBQUlHLFNBQVNGLE9BQU9HLE1BQU0sQ0FBQztBQUNNO0FBQ3dDO0FBQ1A7QUFDRztBQUNyRSxJQUFJTyxlQUFlLFdBQVcsR0FBSTtJQUM5QixTQUFTQSxhQUFhQyxPQUFPO1FBQ3pCLElBQUlDLFFBQVEsSUFBSTtRQUNoQixJQUFJLENBQUNDLGVBQWUsR0FBRyxDQUFDO1FBQ3hCLG1FQUFtRTtRQUNuRSwwQ0FBMEM7UUFDMUMsSUFBSSxDQUFDQyxPQUFPLEdBQUcsSUFBSUM7UUFDbkIsK0RBQStEO1FBQy9ELHdDQUF3QztRQUN4Qyw0Q0FBNEM7UUFDNUMsZ0VBQWdFO1FBQ2hFLElBQUksQ0FBQ0MsY0FBYyxHQUFHLElBQUlEO1FBQzFCLElBQUksQ0FBQ0UsY0FBYyxHQUFHLElBQUlaLHFFQUFvQkEsQ0FBQ0MsMkRBQVUsQ0FBQywrQkFBK0IsSUFDckYsS0FBSyxxREFBcUQ7UUFDOUQsSUFBSSxDQUFDWSxjQUFjLEdBQUc7UUFDdEIsSUFBSSxDQUFDQyxnQkFBZ0IsR0FBRztRQUN4QixJQUFJLENBQUNDLGlCQUFpQixHQUFHO1FBQ3pCLDRDQUE0QztRQUM1QyxnRUFBZ0U7UUFDaEUsSUFBSSxDQUFDQyx1QkFBdUIsR0FBRyxJQUFJakIsMkNBQUlBLENBQUM7UUFDeEMsSUFBSSxDQUFDa0Isd0JBQXdCLEdBQUcsSUFBSUM7UUFDcEMsSUFBSUMsMkJBQTJCLElBQUl0QyxrRUFBaUJBLENBQUMsU0FBVXVDLFFBQVE7WUFBSSxPQUFPYixNQUFNYyxLQUFL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LEVBQUU7Z0JBQUM7UUFDOUM7SUFDSjtJQUNBdlAsYUFBYVQsU0FBUyxDQUFDaUosZ0JBQWdCLEdBQUcsU0FBVXZHLE9BQU87UUFDdkQsSUFBSUEsV0FBVyxDQUFDLElBQUksQ0FBQzdCLE9BQU8sQ0FBQzZJLEdBQUcsQ0FBQ2hILFVBQVU7WUFDdkMsSUFBSSxDQUFDN0IsT0FBTyxDQUFDNkosR0FBRyxDQUFDaEksU0FBUyxJQUFJaEQscURBQVNBLENBQUMsSUFBSSxFQUFFZ0Q7UUFDbEQ7UUFDQSxPQUFPLElBQUksQ0FBQzdCLE9BQU8sQ0FBQzJHLEdBQUcsQ0FBQzlFO0lBQzVCO0lBQ0FqQyxhQUFhVCxTQUFTLENBQUNrTyxjQUFjLEdBQUcsU0FBVXhKLE9BQU87UUFDckQsSUFBSUEsWUFBWSxLQUFLLEdBQUc7WUFBRUEsVUFBVSxDQUFDO1FBQUc7UUFDeEMsSUFBSW9OLGFBQWEsSUFBSSxDQUFDaFEsVUFBVSxDQUFDb00sY0FBYyxDQUFDeEo7UUFDaEQsT0FBT3BILCtDQUFRQSxDQUFDQSwrQ0FBUUEsQ0FBQ0EsK0NBQVFBLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQzhFLGNBQWMsR0FBRzBQLGFBQWE7WUFBRWxSLGlCQUFpQixJQUFJLENBQUNBLGVBQWU7UUFBQztJQUNySDtJQUNBLE9BQU9IO0FBQ1g7QUFDd0IsQ0FDeEIsd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2xhY2stZ3JhcGhxbC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9jb3JlL1F1ZXJ5TWFuYWdlci5qcz8wMWU4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fYXNzaWduLCBfX2F3YWl0ZXIsIF9fZ2VuZXJhdG9yIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBpbnZhcmlhbnQsIG5ld0ludmFyaWFudEVycm9yIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9nbG9iYWxzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBlcXVhbCB9IGZyb20gXCJAd3J5L2VxdWFsaXR5XCI7XG5pbXBvcnQgeyBleGVjdXRlIH0gZnJvbSBcIi4uL2xpbmsvY29yZS9pbmRleC5qc1wiO1xuaW1wb3J0IHsgYWRkTm9uUmVhY3RpdmVUb05hbWVkRnJhZ21lbnRzLCBoYXNEaXJlY3RpdmVzLCBpc0V4ZWN1dGlvblBhdGNoSW5jcmVtZW50YWxSZXN1bHQsIGlzRXhlY3V0aW9uUGF0Y2hSZXN1bHQsIGlzRnVsbHlVbm1hc2tlZE9wZXJhdGlvbiwgcmVtb3ZlRGlyZWN0aXZlc0Zyb21Eb2N1bWVudCwgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBjYW5vbmljYWxTdHJpbmdpZnkgfSBmcm9tIFwiLi4vY2FjaGUvaW5kZXguanNcIjtcbmltcG9ydCB7IGdldERlZmF1bHRWYWx1ZXMsIGdldE9wZXJhdGlvbkRlZmluaXRpb24sIGdldE9wZXJhdGlvbk5hbWUsIGhhc0NsaWVudEV4cG9ydHMsIGdyYXBoUUxSZXN1bHRIYXNFcnJvciwgZ2V0R3JhcGhRTEVycm9yc0Zyb21SZXN1bHQsIE9ic2VydmFibGUsIGFzeW5jTWFwLCBpc05vbkVtcHR5QXJyYXksIENvbmNhc3QsIG1ha2VVbmlxdWVJZCwgaXNEb2N1bWVudE5vZGUsIGlzTm9uTnVsbE9iamVjdCwgRG9jdW1lbnRUcmFuc2Zvcm0sIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgbWVyZ2VJbmNyZW1lbnRhbERhdGEgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2NvbW1vbi9pbmNyZW1lbnRhbFJlc3VsdC5qc1wiO1xuaW1wb3J0IHsgQXBvbGxvRXJyb3IsIGlzQXBvbGxvRXJyb3IsIGdyYXBoUUxSZXN1bHRIYXNQcm90b2NvbEVycm9ycywgfSBmcm9tIFwiLi4vZXJyb3JzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBPYnNlcnZhYmxlUXVlcnksIGxvZ01pc3NpbmdGaWVsZEVycm9ycyB9IGZyb20gXCIuL09ic2VydmFibGVRdWVyeS5qc1wiO1xuaW1wb3J0IHsgTmV0d29ya1N0YXR1cywgaXNOZXR3b3JrUmVxdWVzdEluRmxpZ2h0IH0gZnJvbSBcIi4vbmV0d29ya1N0YXR1cy5qc1wiO1xuaW1wb3J0IHsgUXVlcnlJbmZvLCBzaG91bGRXcml0ZVJlc3VsdCwgfSBmcm9tIFwiLi9RdWVyeUluZm8uanNcIjtcbmltcG9ydCB7IFBST1RPQ09MX0VSUk9SU19TWU1CT0wgfSBmcm9tIFwiLi4vZXJyb3JzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBwcmludCB9IGZyb20gXCIuLi91dGlsaXRpZXMvaW5kZXguanNcIjtcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgSUdOT1JFID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbmltcG9ydCB7IFRyaWUgfSBmcm9tIFwiQHdyeS90cmllXCI7XG5pbXBvcnQgeyBBdXRvQ2xlYW5lZFdlYWtDYWNoZSwgY2FjaGVTaXplcyB9IGZyb20gXCIuLi91dGlsaXRpZXMvaW5kZXguanNcIjtcbmltcG9ydCB7IG1hc2tGcmFnbWVudCwgbWFza09wZXJhdGlvbiB9IGZyb20gXCIuLi9tYXNraW5nL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBtdXRlRGVwcmVjYXRpb25zIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9kZXByZWNhdGlvbi9pbmRleC5qc1wiO1xudmFyIFF1ZXJ5TWFuYWdlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBRdWVyeU1hbmFnZXIob3B0aW9ucykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLmNsaWVudEF3YXJlbmVzcyA9IHt9O1xuICAgICAgICAvLyBBbGwgdGhlIHF1ZXJpZXMgdGhhdCB0aGUgUXVlcnlNYW5hZ2VyIGlzIGN1cnJlbnRseSBtYW5hZ2luZyAobm90XG4gICAgICAgIC8vIGluY2x1ZGluZyBtdXRhdGlvbnMgYW5kIHN1YnNjcmlwdGlvbnMpLlxuICAgICAgICB0aGlzLnF1ZXJpZXMgPSBuZXcgTWFwKCk7XG4gICAgICAgIC8vIE1hcHMgZnJvbSBxdWVyeUlkIHN0cmluZ3MgdG8gUHJvbWlzZSByZWplY3Rpb24gZnVuY3Rpb25zIGZvclxuICAgICAgICAvLyBjdXJyZW50bHkgYWN0aXZlIHF1ZXJpZXMgYW5kIGZldGNoZXMuXG4gICAgICAgIC8vIFVzZSBwcm90ZWN0ZWQgaW5zdGVhZCBvZiBwcml2YXRlIGZpZWxkIHNvXG4gICAgICAgIC8vIEBhcG9sbG8vZXhwZXJpbWVudGFsLW5leHRqcy1hcHAtc3VwcG9ydCBjYW4gYWNjZXNzIHR5cGUgaW5mby5cbiAgICAgICAgdGhpcy5mZXRjaENhbmNlbEZucyA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy50cmFuc2Zvcm1DYWNoZSA9IG5ldyBBdXRvQ2xlYW5lZFdlYWtDYWNoZShjYWNoZVNpemVzW1wicXVlcnlNYW5hZ2VyLmdldERvY3VtZW50SW5mb1wiXSB8fFxuICAgICAgICAgICAgMjAwMCAvKiBkZWZhdWx0Q2FjaGVTaXplc1tcInF1ZXJ5TWFuYWdlci5nZXREb2N1bWVudEluZm9cIl0gKi8pO1xuICAgICAgICB0aGlzLnF1ZXJ5SWRDb3VudGVyID0gMTtcbiAgICAgICAgdGhpcy5yZXF1ZXN0SWRDb3VudGVyID0gMTtcbiAgICAgICAgdGhpcy5tdXRhdGlvbklkQ291bnRlciA9IDE7XG4gICAgICAgIC8vIFVzZSBwcm90ZWN0ZWQgaW5zdGVhZCBvZiBwcml2YXRlIGZpZWxkIHNvXG4gICAgICAgIC8vIEBhcG9sbG8vZXhwZXJpbWVudGFsLW5leHRqcy1hcHAtc3VwcG9ydCBjYW4gYWNjZXNzIHR5cGUgaW5mby5cbiAgICAgICAgdGhpcy5pbkZsaWdodExpbmtPYnNlcnZhYmxlcyA9IG5ldyBUcmllKGZhbHNlKTtcbiAgICAgICAgdGhpcy5ub0NhY2hlV2FybmluZ3NCeVF1ZXJ5SWQgPSBuZXcgU2V0KCk7XG4gICAgICAgIHZhciBkZWZhdWx0RG9jdW1lbnRUcmFuc2Zvcm0gPSBuZXcgRG9jdW1lbnRUcmFuc2Zvcm0oZnVuY3Rpb24gKGRvY3VtZW50KSB7IHJldHVybiBfdGhpcy5jYWNoZS50cmFuc2Zvcm1Eb2N1bWVudChkb2N1bWVudCk7IH0sIFxuICAgICAgICAvLyBBbGxvdyB0aGUgYXBvbGxvIGNhY2hlIHRvIG1hbmFnZSBpdHMgb3duIHRyYW5zZm9ybSBjYWNoZXNcbiAgICAgICAgeyBjYWNoZTogZmFsc2UgfSk7XG4gICAgICAgIHRoaXMuY2FjaGUgPSBvcHRpb25zLmNhY2hlO1xuICAgICAgICB0aGlzLmxpbmsgPSBvcHRpb25zLmxpbms7XG4gICAgICAgIHRoaXMuZGVmYXVsdE9wdGlvbnMgPSBvcHRpb25zLmRlZmF1bHRPcHRpb25zO1xuICAgICAgICB0aGlzLnF1ZXJ5RGVkdXBsaWNhdGlvbiA9IG9wdGlvbnMucXVlcnlEZWR1cGxpY2F0aW9uO1xuICAgICAgICB0aGlzLmNsaWVudEF3YXJlbmVzcyA9IG9wdGlvbnMuY2xpZW50QXdhcmVuZXNzO1xuICAgICAgICB0aGlzLmxvY2FsU3RhdGUgPSBvcHRpb25zLmxvY2FsU3RhdGU7XG4gICAgICAgIHRoaXMuc3NyTW9kZSA9IG9wdGlvbnMuc3NyTW9kZTtcbiAgICAgICAgdGhpcy5hc3N1bWVJbW11dGFibGVSZXN1bHRzID0gb3B0aW9ucy5hc3N1bWVJbW11dGFibGVSZXN1bHRzO1xuICAgICAgICB0aGlzLmRhdGFNYXNraW5nID0gb3B0aW9ucy5kYXRhTWFza2luZztcbiAgICAgICAgdmFyIGRvY3VtZW50VHJhbnNmb3JtID0gb3B0aW9ucy5kb2N1bWVudFRyYW5zZm9ybTtcbiAgICAgICAgdGhpcy5kb2N1bWVudFRyYW5zZm9ybSA9XG4gICAgICAgICAgICBkb2N1bWVudFRyYW5zZm9ybSA/XG4gICAgICAgICAgICAgICAgZGVmYXVsdERvY3VtZW50VHJhbnNmb3JtXG4gICAgICAgICAgICAgICAgICAgIC5jb25jYXQoZG9jdW1lbnRUcmFuc2Zvcm0pXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBjdXN0b20gZG9jdW1lbnQgdHJhbnNmb3JtIG1heSBhZGQgbmV3IGZyYWdtZW50IHNwcmVhZHMgb3IgbmV3XG4gICAgICAgICAgICAgICAgICAgIC8vIGZpZWxkIHNlbGVjdGlvbnMsIHNvIHdlIHdhbnQgdG8gZ2l2ZSB0aGUgY2FjaGUgYSBjaGFuY2UgdG8gcnVuXG4gICAgICAgICAgICAgICAgICAgIC8vIGFnYWluLiBGb3IgZXhhbXBsZSwgdGhlIEluTWVtb3J5Q2FjaGUgYWRkcyBfX3R5cGVuYW1lIHRvIGZpZWxkXG4gICAgICAgICAgICAgICAgICAgIC8vIHNlbGVjdGlvbnMgYW5kIGZyYWdtZW50cyBmcm9tIHRoZSBmcmFnbWVudCByZWdpc3RyeS5cbiAgICAgICAgICAgICAgICAgICAgLmNvbmNhdChkZWZhdWx0RG9jdW1lbnRUcmFuc2Zvcm0pXG4gICAgICAgICAgICAgICAgOiBkZWZhdWx0RG9jdW1lbnRUcmFuc2Zvcm07XG4gICAgICAgIHRoaXMuZGVmYXVsdENvbnRleHQgPSBvcHRpb25zLmRlZmF1bHRDb250ZXh0IHx8IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIGlmICgodGhpcy5vbkJyb2FkY2FzdCA9IG9wdGlvbnMub25Ccm9hZGNhc3QpKSB7XG4gICAgICAgICAgICB0aGlzLm11dGF0aW9uU3RvcmUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGwgdGhpcyBtZXRob2QgdG8gdGVybWluYXRlIGFueSBhY3RpdmUgcXVlcnkgcHJvY2Vzc2VzLCBtYWtpbmcgaXQgc2FmZVxuICAgICAqIHRvIGRpc3Bvc2Ugb2YgdGhpcyBRdWVyeU1hbmFnZXIgaW5zdGFuY2UuXG4gICAgICovXG4gICAgUXVlcnlNYW5hZ2VyLnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLnF1ZXJpZXMuZm9yRWFjaChmdW5jdGlvbiAoX2luZm8sIHF1ZXJ5SWQpIHtcbiAgICAgICAgICAgIF90aGlzLnN0b3BRdWVyeU5vQnJvYWRjYXN0KHF1ZXJ5SWQpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5jYW5jZWxQZW5kaW5nRmV0Y2hlcyhuZXdJbnZhcmlhbnRFcnJvcigzNSkpO1xuICAgIH07XG4gICAgUXVlcnlNYW5hZ2VyLnByb3RvdHlwZS5jYW5jZWxQZW5kaW5nRmV0Y2hlcyA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICB0aGlzLmZldGNoQ2FuY2VsRm5zLmZvckVhY2goZnVuY3Rpb24gKGNhbmNlbCkgeyByZXR1cm4gY2FuY2VsKGVycm9yKTsgfSk7XG4gICAgICAgIHRoaXMuZmV0Y2hDYW5jZWxGbnMuY2xlYXIoKTtcbiAgICB9O1xuICAgIFF1ZXJ5TWFuYWdlci5wcm90b3R5cGUubXV0YXRlID0gZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgYXJndW1lbnRzLCB2b2lkIDAsIGZ1bmN0aW9uIChfYikge1xuICAgICAgICAgICAgdmFyIG11dGF0aW9uSWQsIGhhc0NsaWVudEV4cG9ydHMsIG11dGF0aW9uU3RvcmVWYWx1ZSwgaXNPcHRpbWlzdGljLCBzZWxmO1xuICAgICAgICAgICAgdmFyIF9jLCBfZDtcbiAgICAgICAgICAgIHZhciBtdXRhdGlvbiA9IF9iLm11dGF0aW9uLCB2YXJpYWJsZXMgPSBfYi52YXJpYWJsZXMsIG9wdGltaXN0aWNSZXNwb25zZSA9IF9iLm9wdGltaXN0aWNSZXNwb25zZSwgdXBkYXRlUXVlcmllcyA9IF9iLnVwZGF0ZVF1ZXJpZXMsIF9lID0gX2IucmVmZXRjaFF1ZXJpZXMsIHJlZmV0Y2hRdWVyaWVzID0gX2UgPT09IHZvaWQgMCA/IFtdIDogX2UsIF9mID0gX2IuYXdhaXRSZWZldGNoUXVlcmllcywgYXdhaXRSZWZldGNoUXVlcmllcyA9IF9mID09PSB2b2lkIDAgPyBmYWxzZSA6IF9mLCB1cGRhdGVXaXRoUHJveHlGbiA9IF9iLnVwZGF0ZSwgb25RdWVyeVVwZGF0ZWQgPSBfYi5vblF1ZXJ5VXBkYXRlZCwgX2cgPSBfYi5mZXRjaFBvbGljeSwgZmV0Y2hQb2xpY3kgPSBfZyA9PT0gdm9pZCAwID8gKChfYyA9IHRoaXMuZGVmYXVsdE9wdGlvbnMubXV0YXRlKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MuZmV0Y2hQb2xpY3kpIHx8IFwibmV0d29yay1vbmx5XCIgOiBfZywgX2ggPSBfYi5lcnJvclBvbGljeSwgZXJyb3JQb2xpY3kgPSBfaCA9PT0gdm9pZCAwID8gKChfZCA9IHRoaXMuZGVmYXVsdE9wdGlvbnMubXV0YXRlKSA9PT0gbnVsbCB8fCBfZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2QuZXJyb3JQb2xpY3kpIHx8IFwibm9uZVwiIDogX2gsIGtlZXBSb290RmllbGRzID0gX2Iua2VlcFJvb3RGaWVsZHMsIGNvbnRleHQgPSBfYi5jb250ZXh0O1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfaikge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2oubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgaW52YXJpYW50KG11dGF0aW9uLCAzNik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnZhcmlhbnQoZmV0Y2hQb2xpY3kgPT09IFwibmV0d29yay1vbmx5XCIgfHwgZmV0Y2hQb2xpY3kgPT09IFwibm8tY2FjaGVcIiwgMzcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbXV0YXRpb25JZCA9IHRoaXMuZ2VuZXJhdGVNdXRhdGlvbklkKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtdXRhdGlvbiA9IHRoaXMuY2FjaGUudHJhbnNmb3JtRm9yTGluayh0aGlzLnRyYW5zZm9ybShtdXRhdGlvbikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFzQ2xpZW50RXhwb3J0cyA9IHRoaXMuZ2V0RG9jdW1lbnRJbmZvKG11dGF0aW9uKS5oYXNDbGllbnRFeHBvcnRzO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFibGVzID0gdGhpcy5nZXRWYXJpYWJsZXMobXV0YXRpb24sIHZhcmlhYmxlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWhhc0NsaWVudEV4cG9ydHMpIHJldHVybiBbMyAvKmJyZWFrKi8sIDJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5sb2NhbFN0YXRlLmFkZEV4cG9ydGVkVmFyaWFibGVzKG11dGF0aW9uLCB2YXJpYWJsZXMsIGNvbnRleHQpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFibGVzID0gKF9qLnNlbnQoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfai5sYWJlbCA9IDI7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIG11dGF0aW9uU3RvcmVWYWx1ZSA9IHRoaXMubXV0YXRpb25TdG9yZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLm11dGF0aW9uU3RvcmVbbXV0YXRpb25JZF0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG11dGF0aW9uOiBtdXRhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFibGVzOiB2YXJpYWJsZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvYWRpbmc6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaXNPcHRpbWlzdGljID0gb3B0aW1pc3RpY1Jlc3BvbnNlICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXJrTXV0YXRpb25PcHRpbWlzdGljKG9wdGltaXN0aWNSZXNwb25zZSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtdXRhdGlvbklkOiBtdXRhdGlvbklkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudDogbXV0YXRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhYmxlczogdmFyaWFibGVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZXRjaFBvbGljeTogZmV0Y2hQb2xpY3ksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yUG9saWN5OiBlcnJvclBvbGljeSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dDogY29udGV4dCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlUXVlcmllczogdXBkYXRlUXVlcmllcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlOiB1cGRhdGVXaXRoUHJveHlGbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2VlcFJvb3RGaWVsZHM6IGtlZXBSb290RmllbGRzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5icm9hZGNhc3RRdWVyaWVzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhc3luY01hcChzZWxmLmdldE9ic2VydmFibGVGcm9tTGluayhtdXRhdGlvbiwgX19hc3NpZ24oX19hc3NpZ24oe30sIGNvbnRleHQpLCB7IG9wdGltaXN0aWNSZXNwb25zZTogaXNPcHRpbWlzdGljID8gb3B0aW1pc3RpY1Jlc3BvbnNlIDogdm9pZCAwIH0pLCB2YXJpYWJsZXMsIHt9LCBmYWxzZSksIGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChncmFwaFFMUmVzdWx0SGFzRXJyb3IocmVzdWx0KSAmJiBlcnJvclBvbGljeSA9PT0gXCJub25lXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXBvbGxvRXJyb3Ioe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBncmFwaFFMRXJyb3JzOiBnZXRHcmFwaFFMRXJyb3JzRnJvbVJlc3VsdChyZXN1bHQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG11dGF0aW9uU3RvcmVWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG11dGF0aW9uU3RvcmVWYWx1ZS5sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbXV0YXRpb25TdG9yZVZhbHVlLmVycm9yID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdG9yZVJlc3VsdCA9IF9fYXNzaWduKHt9LCByZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByZWZldGNoUXVlcmllcyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmZXRjaFF1ZXJpZXMgPSByZWZldGNoUXVlcmllcyhzdG9yZVJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3JQb2xpY3kgPT09IFwiaWdub3JlXCIgJiYgZ3JhcGhRTFJlc3VsdEhhc0Vycm9yKHN0b3JlUmVzdWx0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBzdG9yZVJlc3VsdC5lcnJvcnM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5tYXJrTXV0YXRpb25SZXN1bHQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG11dGF0aW9uSWQ6IG11dGF0aW9uSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiBzdG9yZVJlc3VsdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudDogbXV0YXRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFibGVzOiB2YXJpYWJsZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmV0Y2hQb2xpY3k6IGZldGNoUG9saWN5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yUG9saWN5OiBlcnJvclBvbGljeSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0OiBjb250ZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZTogdXBkYXRlV2l0aFByb3h5Rm4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlUXVlcmllczogdXBkYXRlUXVlcmllcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdFJlZmV0Y2hRdWVyaWVzOiBhd2FpdFJlZmV0Y2hRdWVyaWVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZmV0Y2hRdWVyaWVzOiByZWZldGNoUXVlcmllcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVPcHRpbWlzdGljOiBpc09wdGltaXN0aWMgPyBtdXRhdGlvbklkIDogdm9pZCAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uUXVlcnlVcGRhdGVkOiBvblF1ZXJ5VXBkYXRlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZWVwUm9vdEZpZWxkczoga2VlcFJvb3RGaWVsZHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuc3Vic2NyaWJlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uIChzdG9yZVJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuYnJvYWRjYXN0UXVlcmllcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpbmNlIG11dGF0aW9ucyBtaWdodCByZWNlaXZlIG11bHRpcGxlIHBheWxvYWRzIGZyb20gdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQXBvbGxvTGluayBjaGFpbiAoZS5nLiB3aGVuIHVzZWQgd2l0aCBAZGVmZXIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdlIHJlc29sdmUgd2l0aCBhIFNpbmdsZUV4ZWN1dGlvblJlc3VsdCBvciBhZnRlciB0aGUgZmluYWxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBFeGVjdXRpb25QYXRjaFJlc3VsdCBoYXMgYXJyaXZlZCBhbmQgd2UgaGF2ZSBhc3NlbWJsZWQgdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbXVsdGlwYXJ0IHJlc3BvbnNlIGludG8gYSBzaW5nbGUgcmVzdWx0LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKFwiaGFzTmV4dFwiIGluIHN0b3JlUmVzdWx0KSB8fCBzdG9yZVJlc3VsdC5oYXNOZXh0ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKF9fYXNzaWduKF9fYXNzaWduKHt9LCBzdG9yZVJlc3VsdCksIHsgZGF0YTogc2VsZi5tYXNrT3BlcmF0aW9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudDogbXV0YXRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogc3RvcmVSZXN1bHQuZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZXRjaFBvbGljeTogZmV0Y2hQb2xpY3ksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IG11dGF0aW9uSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG11dGF0aW9uU3RvcmVWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtdXRhdGlvblN0b3JlVmFsdWUubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtdXRhdGlvblN0b3JlVmFsdWUuZXJyb3IgPSBlcnI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc09wdGltaXN0aWMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5jYWNoZS5yZW1vdmVPcHRpbWlzdGljKG11dGF0aW9uSWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmJyb2FkY2FzdFF1ZXJpZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyIGluc3RhbmNlb2YgQXBvbGxvRXJyb3IgPyBlcnIgOiAobmV3IEFwb2xsb0Vycm9yKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV0d29ya0Vycm9yOiBlcnIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBRdWVyeU1hbmFnZXIucHJvdG90eXBlLm1hcmtNdXRhdGlvblJlc3VsdCA9IGZ1bmN0aW9uIChtdXRhdGlvbiwgY2FjaGUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKGNhY2hlID09PSB2b2lkIDApIHsgY2FjaGUgPSB0aGlzLmNhY2hlOyB9XG4gICAgICAgIHZhciByZXN1bHQgPSBtdXRhdGlvbi5yZXN1bHQ7XG4gICAgICAgIHZhciBjYWNoZVdyaXRlcyA9IFtdO1xuICAgICAgICB2YXIgc2tpcENhY2hlID0gbXV0YXRpb24uZmV0Y2hQb2xpY3kgPT09IFwibm8tY2FjaGVcIjtcbiAgICAgICAgaWYgKCFza2lwQ2FjaGUgJiYgc2hvdWxkV3JpdGVSZXN1bHQocmVzdWx0LCBtdXRhdGlvbi5lcnJvclBvbGljeSkpIHtcbiAgICAgICAgICAgIGlmICghaXNFeGVjdXRpb25QYXRjaEluY3JlbWVudGFsUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgICAgICAgICAgICBjYWNoZVdyaXRlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiByZXN1bHQuZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YUlkOiBcIlJPT1RfTVVUQVRJT05cIixcbiAgICAgICAgICAgICAgICAgICAgcXVlcnk6IG11dGF0aW9uLmRvY3VtZW50LFxuICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZXM6IG11dGF0aW9uLnZhcmlhYmxlcyxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc0V4ZWN1dGlvblBhdGNoSW5jcmVtZW50YWxSZXN1bHQocmVzdWx0KSAmJlxuICAgICAgICAgICAgICAgIGlzTm9uRW1wdHlBcnJheShyZXN1bHQuaW5jcmVtZW50YWwpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRpZmYgPSBjYWNoZS5kaWZmKHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwiUk9PVF9NVVRBVElPTlwiLFxuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgY2FjaGUgY29tcGxhaW5zIGlmIHBhc3NlZCBhIG11dGF0aW9uIHdoZXJlIGl0IGV4cGVjdHMgYVxuICAgICAgICAgICAgICAgICAgICAvLyBxdWVyeSwgc28gd2UgdHJhbnNmb3JtIG11dGF0aW9ucyBhbmQgc3Vic2NyaXB0aW9ucyB0byBxdWVyaWVzXG4gICAgICAgICAgICAgICAgICAgIC8vIChvbmx5IG9uY2UsIHRoYW5rcyB0byB0aGlzLnRyYW5zZm9ybUNhY2hlKS5cbiAgICAgICAgICAgICAgICAgICAgcXVlcnk6IHRoaXMuZ2V0RG9jdW1lbnRJbmZvKG11dGF0aW9uLmRvY3VtZW50KS5hc1F1ZXJ5LFxuICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZXM6IG11dGF0aW9uLnZhcmlhYmxlcyxcbiAgICAgICAgICAgICAgICAgICAgb3B0aW1pc3RpYzogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblBhcnRpYWxEYXRhOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHZhciBtZXJnZWREYXRhID0gdm9pZCAwO1xuICAgICAgICAgICAgICAgIGlmIChkaWZmLnJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBtZXJnZWREYXRhID0gbWVyZ2VJbmNyZW1lbnRhbERhdGEoZGlmZi5yZXN1bHQsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbWVyZ2VkRGF0YSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgICAgICAvLyBjYXN0IHRoZSBFeGVjdXRpb25QYXRjaFJlc3VsdCB0byBGZXRjaFJlc3VsdCBoZXJlIHNpbmNlXG4gICAgICAgICAgICAgICAgICAgIC8vIEV4ZWN1dGlvblBhdGNoUmVzdWx0IG5ldmVyIGhhcyBgZGF0YWAgd2hlbiByZXR1cm5lZCBmcm9tIHRoZSBzZXJ2ZXJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmRhdGEgPSBtZXJnZWREYXRhO1xuICAgICAgICAgICAgICAgICAgICBjYWNoZVdyaXRlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdDogbWVyZ2VkRGF0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFJZDogXCJST09UX01VVEFUSU9OXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyeTogbXV0YXRpb24uZG9jdW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZXM6IG11dGF0aW9uLnZhcmlhYmxlcyxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHVwZGF0ZVF1ZXJpZXNfMSA9IG11dGF0aW9uLnVwZGF0ZVF1ZXJpZXM7XG4gICAgICAgICAgICBpZiAodXBkYXRlUXVlcmllc18xKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5xdWVyaWVzLmZvckVhY2goZnVuY3Rpb24gKF9hLCBxdWVyeUlkKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBvYnNlcnZhYmxlUXVlcnkgPSBfYS5vYnNlcnZhYmxlUXVlcnk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBxdWVyeU5hbWUgPSBvYnNlcnZhYmxlUXVlcnkgJiYgb2JzZXJ2YWJsZVF1ZXJ5LnF1ZXJ5TmFtZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFxdWVyeU5hbWUgfHwgIWhhc093blByb3BlcnR5LmNhbGwodXBkYXRlUXVlcmllc18xLCBxdWVyeU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIHVwZGF0ZXIgPSB1cGRhdGVRdWVyaWVzXzFbcXVlcnlOYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9iID0gX3RoaXMucXVlcmllcy5nZXQocXVlcnlJZCksIGRvY3VtZW50ID0gX2IuZG9jdW1lbnQsIHZhcmlhYmxlcyA9IF9iLnZhcmlhYmxlcztcbiAgICAgICAgICAgICAgICAgICAgLy8gUmVhZCB0aGUgY3VycmVudCBxdWVyeSByZXN1bHQgZnJvbSB0aGUgc3RvcmUuXG4gICAgICAgICAgICAgICAgICAgIHZhciBfYyA9IGNhY2hlLmRpZmYoe1xuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnk6IGRvY3VtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFibGVzOiB2YXJpYWJsZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5QYXJ0aWFsRGF0YTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGltaXN0aWM6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB9KSwgY3VycmVudFF1ZXJ5UmVzdWx0ID0gX2MucmVzdWx0LCBjb21wbGV0ZSA9IF9jLmNvbXBsZXRlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29tcGxldGUgJiYgY3VycmVudFF1ZXJ5UmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBSdW4gb3VyIHJlZHVjZXIgdXNpbmcgdGhlIGN1cnJlbnQgcXVlcnkgcmVzdWx0IGFuZCB0aGUgbXV0YXRpb24gcmVzdWx0LlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5leHRRdWVyeVJlc3VsdCA9IHVwZGF0ZXIoY3VycmVudFF1ZXJ5UmVzdWx0LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbXV0YXRpb25SZXN1bHQ6IHJlc3VsdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVyeU5hbWU6IChkb2N1bWVudCAmJiBnZXRPcGVyYXRpb25OYW1lKGRvY3VtZW50KSkgfHwgdm9pZCAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5VmFyaWFibGVzOiB2YXJpYWJsZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdyaXRlIHRoZSBtb2RpZmllZCByZXN1bHQgYmFjayBpbnRvIHRoZSBzdG9yZSBpZiB3ZSBnb3QgYSBuZXcgcmVzdWx0LlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5leHRRdWVyeVJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlV3JpdGVzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQ6IG5leHRRdWVyeVJlc3VsdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YUlkOiBcIlJPT1RfUVVFUllcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnk6IGRvY3VtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZXM6IHZhcmlhYmxlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChjYWNoZVdyaXRlcy5sZW5ndGggPiAwIHx8XG4gICAgICAgICAgICAobXV0YXRpb24ucmVmZXRjaFF1ZXJpZXMgfHwgXCJcIikubGVuZ3RoID4gMCB8fFxuICAgICAgICAgICAgbXV0YXRpb24udXBkYXRlIHx8XG4gICAgICAgICAgICBtdXRhdGlvbi5vblF1ZXJ5VXBkYXRlZCB8fFxuICAgICAgICAgICAgbXV0YXRpb24ucmVtb3ZlT3B0aW1pc3RpYykge1xuICAgICAgICAgICAgdmFyIHJlc3VsdHNfMSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5yZWZldGNoUXVlcmllcyh7XG4gICAgICAgICAgICAgICAgdXBkYXRlQ2FjaGU6IGZ1bmN0aW9uIChjYWNoZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXNraXBDYWNoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGVXcml0ZXMuZm9yRWFjaChmdW5jdGlvbiAod3JpdGUpIHsgcmV0dXJuIGNhY2hlLndyaXRlKHdyaXRlKTsgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIG11dGF0aW9uIGhhcyBzb21lIHdyaXRlcyBhc3NvY2lhdGVkIHdpdGggaXQgdGhlbiB3ZSBuZWVkIHRvXG4gICAgICAgICAgICAgICAgICAgIC8vIGFwcGx5IHRob3NlIHdyaXRlcyB0byB0aGUgc3RvcmUgYnkgcnVubmluZyB0aGlzIHJlZHVjZXIgYWdhaW4gd2l0aFxuICAgICAgICAgICAgICAgICAgICAvLyBhIHdyaXRlIGFjdGlvbi5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHVwZGF0ZSA9IG11dGF0aW9uLnVwZGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgLy8gRGV0ZXJtaW5lIHdoZXRoZXIgcmVzdWx0IGlzIGEgU2luZ2xlRXhlY3V0aW9uUmVzdWx0LFxuICAgICAgICAgICAgICAgICAgICAvLyBvciB0aGUgZmluYWwgRXhlY3V0aW9uUGF0Y2hSZXN1bHQuXG4gICAgICAgICAgICAgICAgICAgIHZhciBpc0ZpbmFsUmVzdWx0ID0gIWlzRXhlY3V0aW9uUGF0Y2hSZXN1bHQocmVzdWx0KSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgKGlzRXhlY3V0aW9uUGF0Y2hJbmNyZW1lbnRhbFJlc3VsdChyZXN1bHQpICYmICFyZXN1bHQuaGFzTmV4dCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1cGRhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2tpcENhY2hlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmUtcmVhZCB0aGUgUk9PVF9NVVRBVElPTiBkYXRhIHdlIGp1c3Qgd3JvdGUgaW50byB0aGUgY2FjaGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAodGhlIGZpcnN0IGNhY2hlLndyaXRlIGNhbGwgaW4gdGhlIGNhY2hlV3JpdGVzLmZvckVhY2ggbG9vcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFib3ZlKSwgc28gZmllbGQgcmVhZCBmdW5jdGlvbnMgaGF2ZSBhIGNoYW5jZSB0byBydW4gZm9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZmllbGRzIHdpdGhpbiBtdXRhdGlvbiByZXN1bHQgb2JqZWN0cy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGlmZiA9IGNhY2hlLmRpZmYoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogXCJST09UX01VVEFUSU9OXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSBjYWNoZSBjb21wbGFpbnMgaWYgcGFzc2VkIGEgbXV0YXRpb24gd2hlcmUgaXQgZXhwZWN0cyBhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHF1ZXJ5LCBzbyB3ZSB0cmFuc2Zvcm0gbXV0YXRpb25zIGFuZCBzdWJzY3JpcHRpb25zIHRvIHF1ZXJpZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gKG9ubHkgb25jZSwgdGhhbmtzIHRvIHRoaXMudHJhbnNmb3JtQ2FjaGUpLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVyeTogX3RoaXMuZ2V0RG9jdW1lbnRJbmZvKG11dGF0aW9uLmRvY3VtZW50KS5hc1F1ZXJ5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZXM6IG11dGF0aW9uLnZhcmlhYmxlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW1pc3RpYzogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblBhcnRpYWxEYXRhOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkaWZmLmNvbXBsZXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCByZXN1bHQpLCB7IGRhdGE6IGRpZmYucmVzdWx0IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCJpbmNyZW1lbnRhbFwiIGluIHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHJlc3VsdC5pbmNyZW1lbnRhbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCJoYXNOZXh0XCIgaW4gcmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgcmVzdWx0Lmhhc05leHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB3ZSd2ZSByZWNlaXZlZCB0aGUgd2hvbGUgcmVzcG9uc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBlaXRoZXIgYSBTaW5nbGVFeGVjdXRpb25SZXN1bHQgb3IgdGhlIGZpbmFsIEV4ZWN1dGlvblBhdGNoUmVzdWx0LFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2FsbCB0aGUgdXBkYXRlIGZ1bmN0aW9uLlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzRmluYWxSZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGUoY2FjaGUsIHJlc3VsdCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0OiBtdXRhdGlvbi5jb250ZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZXM6IG11dGF0aW9uLnZhcmlhYmxlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPIERvIHRoaXMgd2l0aCBjYWNoZS5ldmljdCh7IGlkOiAnUk9PVF9NVVRBVElPTicgfSkgYnV0IG1ha2UgaXRcbiAgICAgICAgICAgICAgICAgICAgLy8gc2hhbGxvdyB0byBhbGxvdyByb2xsaW5nIGJhY2sgb3B0aW1pc3RpYyBldmljdGlvbnMuXG4gICAgICAgICAgICAgICAgICAgIGlmICghc2tpcENhY2hlICYmICFtdXRhdGlvbi5rZWVwUm9vdEZpZWxkcyAmJiBpc0ZpbmFsUmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWNoZS5tb2RpZnkoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBcIlJPT1RfTVVUQVRJT05cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZHM6IGZ1bmN0aW9uICh2YWx1ZSwgX2EpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpZWxkTmFtZSA9IF9hLmZpZWxkTmFtZSwgREVMRVRFID0gX2EuREVMRVRFO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmllbGROYW1lID09PSBcIl9fdHlwZW5hbWVcIiA/IHZhbHVlIDogREVMRVRFO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaW5jbHVkZTogbXV0YXRpb24ucmVmZXRjaFF1ZXJpZXMsXG4gICAgICAgICAgICAgICAgLy8gV3JpdGUgdGhlIGZpbmFsIG11dGF0aW9uLnJlc3VsdCB0byB0aGUgcm9vdCBsYXllciBvZiB0aGUgY2FjaGUuXG4gICAgICAgICAgICAgICAgb3B0aW1pc3RpYzogZmFsc2UsXG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBjb3JyZXNwb25kaW5nIG9wdGltaXN0aWMgbGF5ZXIgYXQgdGhlIHNhbWUgdGltZSBhcyB3ZVxuICAgICAgICAgICAgICAgIC8vIHdyaXRlIHRoZSBmaW5hbCBub24tb3B0aW1pc3RpYyByZXN1bHQuXG4gICAgICAgICAgICAgICAgcmVtb3ZlT3B0aW1pc3RpYzogbXV0YXRpb24ucmVtb3ZlT3B0aW1pc3RpYyxcbiAgICAgICAgICAgICAgICAvLyBMZXQgdGhlIGNhbGxlciBvZiBjbGllbnQubXV0YXRlIG9wdGlvbmFsbHkgZGV0ZXJtaW5lIHRoZSByZWZldGNoaW5nXG4gICAgICAgICAgICAgICAgLy8gYmVoYXZpb3IgZm9yIHdhdGNoZWQgcXVlcmllcyBhZnRlciB0aGUgbXV0YXRpb24udXBkYXRlIGZ1bmN0aW9uIHJ1bnMuXG4gICAgICAgICAgICAgICAgLy8gSWYgbm8gb25RdWVyeVVwZGF0ZWQgZnVuY3Rpb24gd2FzIHByb3ZpZGVkIGZvciB0aGlzIG11dGF0aW9uLCBwYXNzXG4gICAgICAgICAgICAgICAgLy8gbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZCB0byBkaXNhYmxlIHRoZSBkZWZhdWx0IHJlZmV0Y2hpbmcgYmVoYXZpb3IuXG4gICAgICAgICAgICAgICAgb25RdWVyeVVwZGF0ZWQ6IG11dGF0aW9uLm9uUXVlcnlVcGRhdGVkIHx8IG51bGwsXG4gICAgICAgICAgICB9KS5mb3JFYWNoKGZ1bmN0aW9uIChyZXN1bHQpIHsgcmV0dXJuIHJlc3VsdHNfMS5wdXNoKHJlc3VsdCk7IH0pO1xuICAgICAgICAgICAgaWYgKG11dGF0aW9uLmF3YWl0UmVmZXRjaFF1ZXJpZXMgfHwgbXV0YXRpb24ub25RdWVyeVVwZGF0ZWQpIHtcbiAgICAgICAgICAgICAgICAvLyBSZXR1cm5pbmcgYSBwcm9taXNlIGhlcmUgbWFrZXMgdGhlIG11dGF0aW9uIGF3YWl0IHRoYXQgcHJvbWlzZSwgc28gd2VcbiAgICAgICAgICAgICAgICAvLyBpbmNsdWRlIHJlc3VsdHMgaW4gdGhhdCBwcm9taXNlJ3Mgd29yayBpZiBhd2FpdFJlZmV0Y2hRdWVyaWVzIG9yIGFuXG4gICAgICAgICAgICAgICAgLy8gb25RdWVyeVVwZGF0ZWQgZnVuY3Rpb24gd2FzIHNwZWNpZmllZC5cbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwocmVzdWx0c18xKS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlc3VsdDsgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXN1bHQpO1xuICAgIH07XG4gICAgUXVlcnlNYW5hZ2VyLnByb3RvdHlwZS5tYXJrTXV0YXRpb25PcHRpbWlzdGljID0gZnVuY3Rpb24gKG9wdGltaXN0aWNSZXNwb25zZSwgbXV0YXRpb24pIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGRhdGEgPSB0eXBlb2Ygb3B0aW1pc3RpY1Jlc3BvbnNlID09PSBcImZ1bmN0aW9uXCIgP1xuICAgICAgICAgICAgb3B0aW1pc3RpY1Jlc3BvbnNlKG11dGF0aW9uLnZhcmlhYmxlcywgeyBJR05PUkU6IElHTk9SRSB9KVxuICAgICAgICAgICAgOiBvcHRpbWlzdGljUmVzcG9uc2U7XG4gICAgICAgIGlmIChkYXRhID09PSBJR05PUkUpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNhY2hlLnJlY29yZE9wdGltaXN0aWNUcmFuc2FjdGlvbihmdW5jdGlvbiAoY2FjaGUpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgX3RoaXMubWFya011dGF0aW9uUmVzdWx0KF9fYXNzaWduKF9fYXNzaWduKHt9LCBtdXRhdGlvbiksIHsgcmVzdWx0OiB7IGRhdGE6IGRhdGEgfSB9KSwgY2FjaGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgZ2xvYmFsVGhpcy5fX0RFVl9fICE9PSBmYWxzZSAmJiBpbnZhcmlhbnQuZXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBtdXRhdGlvbi5tdXRhdGlvbklkKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgICBRdWVyeU1hbmFnZXIucHJvdG90eXBlLmZldGNoUXVlcnkgPSBmdW5jdGlvbiAocXVlcnlJZCwgb3B0aW9ucywgbmV0d29ya1N0YXR1cykge1xuICAgICAgICByZXR1cm4gdGhpcy5mZXRjaENvbmNhc3RXaXRoSW5mbyh0aGlzLmdldE9yQ3JlYXRlUXVlcnkocXVlcnlJZCksIG9wdGlvbnMsIG5ldHdvcmtTdGF0dXMpLmNvbmNhc3QucHJvbWlzZTtcbiAgICB9O1xuICAgIFF1ZXJ5TWFuYWdlci5wcm90b3R5cGUuZ2V0UXVlcnlTdG9yZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHN0b3JlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgdGhpcy5xdWVyaWVzLmZvckVhY2goZnVuY3Rpb24gKGluZm8sIHF1ZXJ5SWQpIHtcbiAgICAgICAgICAgIHN0b3JlW3F1ZXJ5SWRdID0ge1xuICAgICAgICAgICAgICAgIHZhcmlhYmxlczogaW5mby52YXJpYWJsZXMsXG4gICAgICAgICAgICAgICAgbmV0d29ya1N0YXR1czogaW5mby5uZXR3b3JrU3RhdHVzLFxuICAgICAgICAgICAgICAgIG5ldHdvcmtFcnJvcjogaW5mby5uZXR3b3JrRXJyb3IsXG4gICAgICAgICAgICAgICAgZ3JhcGhRTEVycm9yczogaW5mby5ncmFwaFFMRXJyb3JzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBzdG9yZTtcbiAgICB9O1xuICAgIFF1ZXJ5TWFuYWdlci5wcm90b3R5cGUucmVzZXRFcnJvcnMgPSBmdW5jdGlvbiAocXVlcnlJZCkge1xuICAgICAgICB2YXIgcXVlcnlJbmZvID0gdGhpcy5xdWVyaWVzLmdldChxdWVyeUlkKTtcbiAgICAgICAgaWYgKHF1ZXJ5SW5mbykge1xuICAgICAgICAgICAgcXVlcnlJbmZvLm5ldHdvcmtFcnJvciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHF1ZXJ5SW5mby5ncmFwaFFMRXJyb3JzID0gW107XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFF1ZXJ5TWFuYWdlci5wcm90b3R5cGUudHJhbnNmb3JtID0gZnVuY3Rpb24gKGRvY3VtZW50KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRvY3VtZW50VHJhbnNmb3JtLnRyYW5zZm9ybURvY3VtZW50KGRvY3VtZW50KTtcbiAgICB9O1xuICAgIFF1ZXJ5TWFuYWdlci5wcm90b3R5cGUuZ2V0RG9jdW1lbnRJbmZvID0gZnVuY3Rpb24gKGRvY3VtZW50KSB7XG4gICAgICAgIHZhciB0cmFuc2Zvcm1DYWNoZSA9IHRoaXMudHJhbnNmb3JtQ2FjaGU7XG4gICAgICAgIGlmICghdHJhbnNmb3JtQ2FjaGUuaGFzKGRvY3VtZW50KSkge1xuICAgICAgICAgICAgdmFyIGNhY2hlRW50cnkgPSB7XG4gICAgICAgICAgICAgICAgLy8gVE9ETyBUaGVzZSB0aHJlZSBjYWxscyAoaGFzQ2xpZW50RXhwb3J0cywgc2hvdWxkRm9yY2VSZXNvbHZlcnMsIGFuZFxuICAgICAgICAgICAgICAgIC8vIHVzZXNOb25yZWFjdGl2ZURpcmVjdGl2ZSkgYXJlIHBlcmZvcm1pbmcgaW5kZXBlbmRlbnQgZnVsbCB0cmF2ZXJzYWxzXG4gICAgICAgICAgICAgICAgLy8gb2YgdGhlIHRyYW5zZm9ybWVkIGRvY3VtZW50LiBXZSBzaG91bGQgY29uc2lkZXIgbWVyZ2luZyB0aGVzZVxuICAgICAgICAgICAgICAgIC8vIHRyYXZlcnNhbHMgaW50byBhIHNpbmdsZSBwYXNzIGluIHRoZSBmdXR1cmUsIHRob3VnaCB0aGUgd29yayBpc1xuICAgICAgICAgICAgICAgIC8vIGNhY2hlZCBhZnRlciB0aGUgZmlyc3QgdGltZS5cbiAgICAgICAgICAgICAgICBoYXNDbGllbnRFeHBvcnRzOiBoYXNDbGllbnRFeHBvcnRzKGRvY3VtZW50KSxcbiAgICAgICAgICAgICAgICBoYXNGb3JjZWRSZXNvbHZlcnM6IHRoaXMubG9jYWxTdGF0ZS5zaG91bGRGb3JjZVJlc29sdmVycyhkb2N1bWVudCksXG4gICAgICAgICAgICAgICAgaGFzTm9ucmVhY3RpdmVEaXJlY3RpdmU6IGhhc0RpcmVjdGl2ZXMoW1wibm9ucmVhY3RpdmVcIl0sIGRvY3VtZW50KSxcbiAgICAgICAgICAgICAgICBub25SZWFjdGl2ZVF1ZXJ5OiBhZGROb25SZWFjdGl2ZVRvTmFtZWRGcmFnbWVudHMoZG9jdW1lbnQpLFxuICAgICAgICAgICAgICAgIGNsaWVudFF1ZXJ5OiB0aGlzLmxvY2FsU3RhdGUuY2xpZW50UXVlcnkoZG9jdW1lbnQpLFxuICAgICAgICAgICAgICAgIHNlcnZlclF1ZXJ5OiByZW1vdmVEaXJlY3RpdmVzRnJvbURvY3VtZW50KFtcbiAgICAgICAgICAgICAgICAgICAgeyBuYW1lOiBcImNsaWVudFwiLCByZW1vdmU6IHRydWUgfSxcbiAgICAgICAgICAgICAgICAgICAgeyBuYW1lOiBcImNvbm5lY3Rpb25cIiB9LFxuICAgICAgICAgICAgICAgICAgICB7IG5hbWU6IFwibm9ucmVhY3RpdmVcIiB9LFxuICAgICAgICAgICAgICAgICAgICB7IG5hbWU6IFwidW5tYXNrXCIgfSxcbiAgICAgICAgICAgICAgICBdLCBkb2N1bWVudCksXG4gICAgICAgICAgICAgICAgZGVmYXVsdFZhcnM6IGdldERlZmF1bHRWYWx1ZXMoZ2V0T3BlcmF0aW9uRGVmaW5pdGlvbihkb2N1bWVudCkpLFxuICAgICAgICAgICAgICAgIC8vIFRyYW5zZm9ybSBhbnkgbXV0YXRpb24gb3Igc3Vic2NyaXB0aW9uIG9wZXJhdGlvbnMgdG8gcXVlcnkgb3BlcmF0aW9uc1xuICAgICAgICAgICAgICAgIC8vIHNvIHdlIGNhbiByZWFkL3dyaXRlIHRoZW0gZnJvbS90byB0aGUgY2FjaGUuXG4gICAgICAgICAgICAgICAgYXNRdWVyeTogX19hc3NpZ24oX19hc3NpZ24oe30sIGRvY3VtZW50KSwgeyBkZWZpbml0aW9uczogZG9jdW1lbnQuZGVmaW5pdGlvbnMubWFwKGZ1bmN0aW9uIChkZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWYua2luZCA9PT0gXCJPcGVyYXRpb25EZWZpbml0aW9uXCIgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWYub3BlcmF0aW9uICE9PSBcInF1ZXJ5XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe30sIGRlZiksIHsgb3BlcmF0aW9uOiBcInF1ZXJ5XCIgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGVmO1xuICAgICAgICAgICAgICAgICAgICB9KSB9KSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0cmFuc2Zvcm1DYWNoZS5zZXQoZG9jdW1lbnQsIGNhY2hlRW50cnkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cmFuc2Zvcm1DYWNoZS5nZXQoZG9jdW1lbnQpO1xuICAgIH07XG4gICAgUXVlcnlNYW5hZ2VyLnByb3RvdHlwZS5nZXRWYXJpYWJsZXMgPSBmdW5jdGlvbiAoZG9jdW1lbnQsIHZhcmlhYmxlcykge1xuICAgICAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe30sIHRoaXMuZ2V0RG9jdW1lbnRJbmZvKGRvY3VtZW50KS5kZWZhdWx0VmFycyksIHZhcmlhYmxlcyk7XG4gICAgfTtcbiAgICBRdWVyeU1hbmFnZXIucHJvdG90eXBlLndhdGNoUXVlcnkgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICB2YXIgcXVlcnkgPSB0aGlzLnRyYW5zZm9ybShvcHRpb25zLnF1ZXJ5KTtcbiAgICAgICAgLy8gYXNzaWduIHZhcmlhYmxlIGRlZmF1bHQgdmFsdWVzIGlmIHN1cHBsaWVkXG4gICAgICAgIC8vIE5PVEU6IFdlIGRvbid0IG1vZGlmeSBvcHRpb25zLnF1ZXJ5IGhlcmUgd2l0aCB0aGUgdHJhbnNmb3JtZWQgcXVlcnkgdG9cbiAgICAgICAgLy8gZW5zdXJlIG9ic2VydmFibGUub3B0aW9ucy5xdWVyeSBpcyBzZXQgdG8gdGhlIHJhdyB1bnRyYW5zZm9ybWVkIHF1ZXJ5LlxuICAgICAgICBvcHRpb25zID0gX19hc3NpZ24oX19hc3NpZ24oe30sIG9wdGlvbnMpLCB7IHZhcmlhYmxlczogdGhpcy5nZXRWYXJpYWJsZXMocXVlcnksIG9wdGlvbnMudmFyaWFibGVzKSB9KTtcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLm5vdGlmeU9uTmV0d29ya1N0YXR1c0NoYW5nZSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgb3B0aW9ucy5ub3RpZnlPbk5ldHdvcmtTdGF0dXNDaGFuZ2UgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcXVlcnlJbmZvID0gbmV3IFF1ZXJ5SW5mbyh0aGlzKTtcbiAgICAgICAgdmFyIG9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZVF1ZXJ5KHtcbiAgICAgICAgICAgIHF1ZXJ5TWFuYWdlcjogdGhpcyxcbiAgICAgICAgICAgIHF1ZXJ5SW5mbzogcXVlcnlJbmZvLFxuICAgICAgICAgICAgb3B0aW9uczogb3B0aW9ucyxcbiAgICAgICAgfSk7XG4gICAgICAgIG9ic2VydmFibGVbXCJsYXN0UXVlcnlcIl0gPSBxdWVyeTtcbiAgICAgICAgaWYgKCFPYnNlcnZhYmxlUXVlcnlbXCJpbmFjdGl2ZU9uQ3JlYXRpb25cIl0uZ2V0VmFsdWUoKSkge1xuICAgICAgICAgICAgdGhpcy5xdWVyaWVzLnNldChvYnNlcnZhYmxlLnF1ZXJ5SWQsIHF1ZXJ5SW5mbyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gV2UgZ2l2ZSBxdWVyeUluZm8gdGhlIHRyYW5zZm9ybWVkIHF1ZXJ5IHRvIGVuc3VyZSB0aGUgZmlyc3QgY2FjaGUgZGlmZlxuICAgICAgICAvLyB1c2VzIHRoZSB0cmFuc2Zvcm1lZCBxdWVyeSBpbnN0ZWFkIG9mIHRoZSByYXcgcXVlcnlcbiAgICAgICAgcXVlcnlJbmZvLmluaXQoe1xuICAgICAgICAgICAgZG9jdW1lbnQ6IHF1ZXJ5LFxuICAgICAgICAgICAgb2JzZXJ2YWJsZVF1ZXJ5OiBvYnNlcnZhYmxlLFxuICAgICAgICAgICAgdmFyaWFibGVzOiBvYnNlcnZhYmxlLnZhcmlhYmxlcyxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlO1xuICAgIH07XG4gICAgUXVlcnlNYW5hZ2VyLnByb3RvdHlwZS5xdWVyeSA9IGZ1bmN0aW9uIChvcHRpb25zLCBxdWVyeUlkKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmIChxdWVyeUlkID09PSB2b2lkIDApIHsgcXVlcnlJZCA9IHRoaXMuZ2VuZXJhdGVRdWVyeUlkKCk7IH1cbiAgICAgICAgaW52YXJpYW50KG9wdGlvbnMucXVlcnksIDM4KTtcbiAgICAgICAgaW52YXJpYW50KG9wdGlvbnMucXVlcnkua2luZCA9PT0gXCJEb2N1bWVudFwiLCAzOSk7XG4gICAgICAgIGludmFyaWFudCghb3B0aW9ucy5yZXR1cm5QYXJ0aWFsRGF0YSwgNDApO1xuICAgICAgICBpbnZhcmlhbnQoIW9wdGlvbnMucG9sbEludGVydmFsLCA0MSk7XG4gICAgICAgIHZhciBxdWVyeSA9IHRoaXMudHJhbnNmb3JtKG9wdGlvbnMucXVlcnkpO1xuICAgICAgICByZXR1cm4gdGhpcy5mZXRjaFF1ZXJ5KHF1ZXJ5SWQsIF9fYXNzaWduKF9fYXNzaWduKHt9LCBvcHRpb25zKSwgeyBxdWVyeTogcXVlcnkgfSkpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0ICYmIF9fYXNzaWduKF9fYXNzaWduKHt9LCByZXN1bHQpLCB7IGRhdGE6IF90aGlzLm1hc2tPcGVyYXRpb24oe1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudDogcXVlcnksXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHJlc3VsdC5kYXRhLFxuICAgICAgICAgICAgICAgICAgICBmZXRjaFBvbGljeTogb3B0aW9ucy5mZXRjaFBvbGljeSxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHF1ZXJ5SWQsXG4gICAgICAgICAgICAgICAgfSkgfSk7XG4gICAgICAgIH0pXG4gICAgICAgICAgICAuZmluYWxseShmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5zdG9wUXVlcnkocXVlcnlJZCk7IH0pO1xuICAgIH07XG4gICAgUXVlcnlNYW5hZ2VyLnByb3RvdHlwZS5nZW5lcmF0ZVF1ZXJ5SWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBTdHJpbmcodGhpcy5xdWVyeUlkQ291bnRlcisrKTtcbiAgICB9O1xuICAgIFF1ZXJ5TWFuYWdlci5wcm90b3R5cGUuZ2VuZXJhdGVSZXF1ZXN0SWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3RJZENvdW50ZXIrKztcbiAgICB9O1xuICAgIFF1ZXJ5TWFuYWdlci5wcm90b3R5cGUuZ2VuZXJhdGVNdXRhdGlvbklkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gU3RyaW5nKHRoaXMubXV0YXRpb25JZENvdW50ZXIrKyk7XG4gICAgfTtcbiAgICBRdWVyeU1hbmFnZXIucHJvdG90eXBlLnN0b3BRdWVyeUluU3RvcmUgPSBmdW5jdGlvbiAocXVlcnlJZCkge1xuICAgICAgICB0aGlzLnN0b3BRdWVyeUluU3RvcmVOb0Jyb2FkY2FzdChxdWVyeUlkKTtcbiAgICAgICAgdGhpcy5icm9hZGNhc3RRdWVyaWVzKCk7XG4gICAgfTtcbiAgICBRdWVyeU1hbmFnZXIucHJvdG90eXBlLnN0b3BRdWVyeUluU3RvcmVOb0Jyb2FkY2FzdCA9IGZ1bmN0aW9uIChxdWVyeUlkKSB7XG4gICAgICAgIHZhciBxdWVyeUluZm8gPSB0aGlzLnF1ZXJpZXMuZ2V0KHF1ZXJ5SWQpO1xuICAgICAgICBpZiAocXVlcnlJbmZvKVxuICAgICAgICAgICAgcXVlcnlJbmZvLnN0b3AoKTtcbiAgICB9O1xuICAgIFF1ZXJ5TWFuYWdlci5wcm90b3R5cGUuY2xlYXJTdG9yZSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGRpc2NhcmRXYXRjaGVzOiB0cnVlLFxuICAgICAgICB9OyB9XG4gICAgICAgIC8vIEJlZm9yZSB3ZSBoYXZlIHNlbnQgdGhlIHJlc2V0IGFjdGlvbiB0byB0aGUgc3RvcmUsIHdlIGNhbiBubyBsb25nZXJcbiAgICAgICAgLy8gcmVseSBvbiB0aGUgcmVzdWx0cyByZXR1cm5lZCBieSBpbi1mbGlnaHQgcmVxdWVzdHMgc2luY2UgdGhlc2UgbWF5XG4gICAgICAgIC8vIGRlcGVuZCBvbiB2YWx1ZXMgdGhhdCBwcmV2aW91c2x5IGV4aXN0ZWQgaW4gdGhlIGRhdGEgcG9ydGlvbiBvZiB0aGVcbiAgICAgICAgLy8gc3RvcmUuIFNvLCB3ZSBjYW5jZWwgdGhlIHByb21pc2VzIGFuZCBvYnNlcnZlcnMgdGhhdCB3ZSBoYXZlIGlzc3VlZFxuICAgICAgICAvLyBzbyBmYXIgYW5kIG5vdCB5ZXQgcmVzb2x2ZWQgKGluIHRoZSBjYXNlIG9mIHF1ZXJpZXMpLlxuICAgICAgICB0aGlzLmNhbmNlbFBlbmRpbmdGZXRjaGVzKG5ld0ludmFyaWFudEVycm9yKDQyKSk7XG4gICAgICAgIHRoaXMucXVlcmllcy5mb3JFYWNoKGZ1bmN0aW9uIChxdWVyeUluZm8pIHtcbiAgICAgICAgICAgIGlmIChxdWVyeUluZm8ub2JzZXJ2YWJsZVF1ZXJ5KSB7XG4gICAgICAgICAgICAgICAgLy8gU2V0IGxvYWRpbmcgdG8gdHJ1ZSBzbyBsaXN0ZW5lcnMgZG9uJ3QgdHJpZ2dlciB1bmxlc3MgdGhleSB3YW50XG4gICAgICAgICAgICAgICAgLy8gcmVzdWx0cyB3aXRoIHBhcnRpYWwgZGF0YS5cbiAgICAgICAgICAgICAgICBxdWVyeUluZm8ubmV0d29ya1N0YXR1cyA9IE5ldHdvcmtTdGF0dXMubG9hZGluZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHF1ZXJ5SW5mby5zdG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAodGhpcy5tdXRhdGlvblN0b3JlKSB7XG4gICAgICAgICAgICB0aGlzLm11dGF0aW9uU3RvcmUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGJlZ2luIHJlbW92aW5nIGRhdGEgZnJvbSB0aGUgc3RvcmVcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGUucmVzZXQob3B0aW9ucyk7XG4gICAgfTtcbiAgICBRdWVyeU1hbmFnZXIucHJvdG90eXBlLmdldE9ic2VydmFibGVRdWVyaWVzID0gZnVuY3Rpb24gKGluY2x1ZGUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKGluY2x1ZGUgPT09IHZvaWQgMCkgeyBpbmNsdWRlID0gXCJhY3RpdmVcIjsgfVxuICAgICAgICB2YXIgcXVlcmllcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgdmFyIHF1ZXJ5TmFtZXMgPSBuZXcgTWFwKCk7XG4gICAgICAgIHZhciBxdWVyeU5hbWVzQW5kUXVlcnlTdHJpbmdzID0gbmV3IE1hcCgpO1xuICAgICAgICB2YXIgbGVnYWN5UXVlcnlPcHRpb25zID0gbmV3IFNldCgpO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShpbmNsdWRlKSkge1xuICAgICAgICAgICAgaW5jbHVkZS5mb3JFYWNoKGZ1bmN0aW9uIChkZXNjKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkZXNjID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5TmFtZXMuc2V0KGRlc2MsIGRlc2MpO1xuICAgICAgICAgICAgICAgICAgICBxdWVyeU5hbWVzQW5kUXVlcnlTdHJpbmdzLnNldChkZXNjLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGlzRG9jdW1lbnROb2RlKGRlc2MpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBxdWVyeVN0cmluZyA9IHByaW50KF90aGlzLnRyYW5zZm9ybShkZXNjKSk7XG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5TmFtZXMuc2V0KHF1ZXJ5U3RyaW5nLCBnZXRPcGVyYXRpb25OYW1lKGRlc2MpKTtcbiAgICAgICAgICAgICAgICAgICAgcXVlcnlOYW1lc0FuZFF1ZXJ5U3RyaW5ncy5zZXQocXVlcnlTdHJpbmcsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaXNOb25OdWxsT2JqZWN0KGRlc2MpICYmIGRlc2MucXVlcnkpIHtcbiAgICAgICAgICAgICAgICAgICAgbGVnYWN5UXVlcnlPcHRpb25zLmFkZChkZXNjKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnF1ZXJpZXMuZm9yRWFjaChmdW5jdGlvbiAoX2EsIHF1ZXJ5SWQpIHtcbiAgICAgICAgICAgIHZhciBvcSA9IF9hLm9ic2VydmFibGVRdWVyeSwgZG9jdW1lbnQgPSBfYS5kb2N1bWVudDtcbiAgICAgICAgICAgIGlmIChvcSkge1xuICAgICAgICAgICAgICAgIGlmIChpbmNsdWRlID09PSBcImFsbFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHF1ZXJpZXMuc2V0KHF1ZXJ5SWQsIG9xKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgcXVlcnlOYW1lID0gb3EucXVlcnlOYW1lLCBmZXRjaFBvbGljeSA9IG9xLm9wdGlvbnMuZmV0Y2hQb2xpY3k7XG4gICAgICAgICAgICAgICAgaWYgKGZldGNoUG9saWN5ID09PSBcInN0YW5kYnlcIiB8fFxuICAgICAgICAgICAgICAgICAgICAoaW5jbHVkZSA9PT0gXCJhY3RpdmVcIiAmJiAhb3EuaGFzT2JzZXJ2ZXJzKCkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGluY2x1ZGUgPT09IFwiYWN0aXZlXCIgfHxcbiAgICAgICAgICAgICAgICAgICAgKHF1ZXJ5TmFtZSAmJiBxdWVyeU5hbWVzQW5kUXVlcnlTdHJpbmdzLmhhcyhxdWVyeU5hbWUpKSB8fFxuICAgICAgICAgICAgICAgICAgICAoZG9jdW1lbnQgJiYgcXVlcnlOYW1lc0FuZFF1ZXJ5U3RyaW5ncy5oYXMocHJpbnQoZG9jdW1lbnQpKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcXVlcmllcy5zZXQocXVlcnlJZCwgb3EpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocXVlcnlOYW1lKVxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlOYW1lc0FuZFF1ZXJ5U3RyaW5ncy5zZXQocXVlcnlOYW1lLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlOYW1lc0FuZFF1ZXJ5U3RyaW5ncy5zZXQocHJpbnQoZG9jdW1lbnQpLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAobGVnYWN5UXVlcnlPcHRpb25zLnNpemUpIHtcbiAgICAgICAgICAgIGxlZ2FjeVF1ZXJ5T3B0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgLy8gV2Ugd2lsbCBiZSBpc3N1aW5nIGEgZnJlc2ggbmV0d29yayByZXF1ZXN0IGZvciB0aGlzIHF1ZXJ5LCBzbyB3ZVxuICAgICAgICAgICAgICAgIC8vIHByZS1hbGxvY2F0ZSBhIG5ldyBxdWVyeSBJRCBoZXJlLCB1c2luZyBhIHNwZWNpYWwgcHJlZml4IHRvIGVuYWJsZVxuICAgICAgICAgICAgICAgIC8vIGNsZWFuaW5nIHVwIHRoZXNlIHRlbXBvcmFyeSBxdWVyaWVzIGxhdGVyLCBhZnRlciBmZXRjaGluZy5cbiAgICAgICAgICAgICAgICB2YXIgcXVlcnlJZCA9IG1ha2VVbmlxdWVJZChcImxlZ2FjeU9uZVRpbWVRdWVyeVwiKTtcbiAgICAgICAgICAgICAgICB2YXIgcXVlcnlJbmZvID0gX3RoaXMuZ2V0T3JDcmVhdGVRdWVyeShxdWVyeUlkKS5pbml0KHtcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQ6IG9wdGlvbnMucXVlcnksXG4gICAgICAgICAgICAgICAgICAgIHZhcmlhYmxlczogb3B0aW9ucy52YXJpYWJsZXMsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdmFyIG9xID0gbmV3IE9ic2VydmFibGVRdWVyeSh7XG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5TWFuYWdlcjogX3RoaXMsXG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5SW5mbzogcXVlcnlJbmZvLFxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgb3B0aW9ucyksIHsgZmV0Y2hQb2xpY3k6IFwibmV0d29yay1vbmx5XCIgfSksXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaW52YXJpYW50KG9xLnF1ZXJ5SWQgPT09IHF1ZXJ5SWQpO1xuICAgICAgICAgICAgICAgIHF1ZXJ5SW5mby5zZXRPYnNlcnZhYmxlUXVlcnkob3EpO1xuICAgICAgICAgICAgICAgIHF1ZXJpZXMuc2V0KHF1ZXJ5SWQsIG9xKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChnbG9iYWxUaGlzLl9fREVWX18gIT09IGZhbHNlICYmIHF1ZXJ5TmFtZXNBbmRRdWVyeVN0cmluZ3Muc2l6ZSkge1xuICAgICAgICAgICAgcXVlcnlOYW1lc0FuZFF1ZXJ5U3RyaW5ncy5mb3JFYWNoKGZ1bmN0aW9uIChpbmNsdWRlZCwgbmFtZU9yUXVlcnlTdHJpbmcpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWluY2x1ZGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBxdWVyeU5hbWUgPSBxdWVyeU5hbWVzLmdldChuYW1lT3JRdWVyeVN0cmluZyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChxdWVyeU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbFRoaXMuX19ERVZfXyAhPT0gZmFsc2UgJiYgaW52YXJpYW50Lndhcm4oNDMsIHF1ZXJ5TmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWxUaGlzLl9fREVWX18gIT09IGZhbHNlICYmIGludmFyaWFudC53YXJuKDQ0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBxdWVyaWVzO1xuICAgIH07XG4gICAgUXVlcnlNYW5hZ2VyLnByb3RvdHlwZS5yZUZldGNoT2JzZXJ2YWJsZVF1ZXJpZXMgPSBmdW5jdGlvbiAoaW5jbHVkZVN0YW5kYnkpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKGluY2x1ZGVTdGFuZGJ5ID09PSB2b2lkIDApIHsgaW5jbHVkZVN0YW5kYnkgPSBmYWxzZTsgfVxuICAgICAgICB2YXIgb2JzZXJ2YWJsZVF1ZXJ5UHJvbWlzZXMgPSBbXTtcbiAgICAgICAgdGhpcy5nZXRPYnNlcnZhYmxlUXVlcmllcyhpbmNsdWRlU3RhbmRieSA/IFwiYWxsXCIgOiBcImFjdGl2ZVwiKS5mb3JFYWNoKGZ1bmN0aW9uIChvYnNlcnZhYmxlUXVlcnksIHF1ZXJ5SWQpIHtcbiAgICAgICAgICAgIHZhciBmZXRjaFBvbGljeSA9IG9ic2VydmFibGVRdWVyeS5vcHRpb25zLmZldGNoUG9saWN5O1xuICAgICAgICAgICAgbXV0ZURlcHJlY2F0aW9ucyhcInJlc2V0TGFzdFJlc3VsdHNcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvYnNlcnZhYmxlUXVlcnkucmVzZXRMYXN0UmVzdWx0cygpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoaW5jbHVkZVN0YW5kYnkgfHxcbiAgICAgICAgICAgICAgICAoZmV0Y2hQb2xpY3kgIT09IFwic3RhbmRieVwiICYmIGZldGNoUG9saWN5ICE9PSBcImNhY2hlLW9ubHlcIikpIHtcbiAgICAgICAgICAgICAgICBvYnNlcnZhYmxlUXVlcnlQcm9taXNlcy5wdXNoKG9ic2VydmFibGVRdWVyeS5yZWZldGNoKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgKF90aGlzLnF1ZXJpZXMuZ2V0KHF1ZXJ5SWQpIHx8IG9ic2VydmFibGVRdWVyeVtcInF1ZXJ5SW5mb1wiXSkuc2V0RGlmZihudWxsKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuYnJvYWRjYXN0UXVlcmllcygpO1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwob2JzZXJ2YWJsZVF1ZXJ5UHJvbWlzZXMpO1xuICAgIH07XG4gICAgUXVlcnlNYW5hZ2VyLnByb3RvdHlwZS5zdGFydEdyYXBoUUxTdWJzY3JpcHRpb24gPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgcXVlcnkgPSBvcHRpb25zLnF1ZXJ5LCB2YXJpYWJsZXMgPSBvcHRpb25zLnZhcmlhYmxlcztcbiAgICAgICAgdmFyIGZldGNoUG9saWN5ID0gb3B0aW9ucy5mZXRjaFBvbGljeSwgX2EgPSBvcHRpb25zLmVycm9yUG9saWN5LCBlcnJvclBvbGljeSA9IF9hID09PSB2b2lkIDAgPyBcIm5vbmVcIiA6IF9hLCBfYiA9IG9wdGlvbnMuY29udGV4dCwgY29udGV4dCA9IF9iID09PSB2b2lkIDAgPyB7fSA6IF9iLCBfYyA9IG9wdGlvbnMuZXh0ZW5zaW9ucywgZXh0ZW5zaW9ucyA9IF9jID09PSB2b2lkIDAgPyB7fSA6IF9jO1xuICAgICAgICBxdWVyeSA9IHRoaXMudHJhbnNmb3JtKHF1ZXJ5KTtcbiAgICAgICAgdmFyaWFibGVzID0gdGhpcy5nZXRWYXJpYWJsZXMocXVlcnksIHZhcmlhYmxlcyk7XG4gICAgICAgIHZhciBtYWtlT2JzZXJ2YWJsZSA9IGZ1bmN0aW9uICh2YXJpYWJsZXMpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5nZXRPYnNlcnZhYmxlRnJvbUxpbmsocXVlcnksIGNvbnRleHQsIHZhcmlhYmxlcywgZXh0ZW5zaW9ucykubWFwKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICBpZiAoZmV0Y2hQb2xpY3kgIT09IFwibm8tY2FjaGVcIikge1xuICAgICAgICAgICAgICAgICAgICAvLyB0aGUgc3Vic2NyaXB0aW9uIGludGVyZmFjZSBzaG91bGQgaGFuZGxlIG5vdCBzZW5kaW5nIHVzIHJlc3VsdHMgd2Ugbm8gbG9uZ2VyIHN1YnNjcmliZSB0by5cbiAgICAgICAgICAgICAgICAgICAgLy8gWFhYIEkgZG9uJ3QgdGhpbmsgd2UgZXZlciBzZW5kIGluIGFuIG9iamVjdCB3aXRoIGVycm9ycywgYnV0IHdlIG1pZ2h0IGluIHRoZSBmdXR1cmUuLi5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNob3VsZFdyaXRlUmVzdWx0KHJlc3VsdCwgZXJyb3JQb2xpY3kpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5jYWNoZS53cml0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnk6IHF1ZXJ5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdDogcmVzdWx0LmRhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YUlkOiBcIlJPT1RfU1VCU0NSSVBUSU9OXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFibGVzOiB2YXJpYWJsZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5icm9hZGNhc3RRdWVyaWVzKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBoYXNFcnJvcnMgPSBncmFwaFFMUmVzdWx0SGFzRXJyb3IocmVzdWx0KTtcbiAgICAgICAgICAgICAgICB2YXIgaGFzUHJvdG9jb2xFcnJvcnMgPSBncmFwaFFMUmVzdWx0SGFzUHJvdG9jb2xFcnJvcnMocmVzdWx0KTtcbiAgICAgICAgICAgICAgICBpZiAoaGFzRXJyb3JzIHx8IGhhc1Byb3RvY29sRXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlcnJvcnMgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhhc0Vycm9ycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzLmdyYXBoUUxFcnJvcnMgPSByZXN1bHQuZXJyb3JzO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChoYXNQcm90b2NvbEVycm9ycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzLnByb3RvY29sRXJyb3JzID0gcmVzdWx0LmV4dGVuc2lvbnNbUFJPVE9DT0xfRVJST1JTX1NZTUJPTF07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gYGVycm9yUG9saWN5YCBpcyBhIG1lY2hhbmlzbSBmb3IgaGFuZGxpbmcgR3JhcGhRTCBlcnJvcnMsIGFjY29yZGluZ1xuICAgICAgICAgICAgICAgICAgICAvLyB0byBvdXIgZG9jdW1lbnRhdGlvbiwgc28gd2UgdGhyb3cgcHJvdG9jb2wgZXJyb3JzIHJlZ2FyZGxlc3Mgb2YgdGhlXG4gICAgICAgICAgICAgICAgICAgIC8vIHNldCBlcnJvciBwb2xpY3kuXG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnJvclBvbGljeSA9PT0gXCJub25lXCIgfHwgaGFzUHJvdG9jb2xFcnJvcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBBcG9sbG9FcnJvcihlcnJvcnMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChlcnJvclBvbGljeSA9PT0gXCJpZ25vcmVcIikge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgcmVzdWx0LmVycm9ycztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBpZiAodGhpcy5nZXREb2N1bWVudEluZm8ocXVlcnkpLmhhc0NsaWVudEV4cG9ydHMpIHtcbiAgICAgICAgICAgIHZhciBvYnNlcnZhYmxlUHJvbWlzZV8xID0gdGhpcy5sb2NhbFN0YXRlXG4gICAgICAgICAgICAgICAgLmFkZEV4cG9ydGVkVmFyaWFibGVzKHF1ZXJ5LCB2YXJpYWJsZXMsIGNvbnRleHQpXG4gICAgICAgICAgICAgICAgLnRoZW4obWFrZU9ic2VydmFibGUpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgICAgICAgICAgIHZhciBzdWIgPSBudWxsO1xuICAgICAgICAgICAgICAgIG9ic2VydmFibGVQcm9taXNlXzEudGhlbihmdW5jdGlvbiAob2JzZXJ2YWJsZSkgeyByZXR1cm4gKHN1YiA9IG9ic2VydmFibGUuc3Vic2NyaWJlKG9ic2VydmVyKSk7IH0sIG9ic2VydmVyLmVycm9yKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gc3ViICYmIHN1Yi51bnN1YnNjcmliZSgpOyB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1ha2VPYnNlcnZhYmxlKHZhcmlhYmxlcyk7XG4gICAgfTtcbiAgICBRdWVyeU1hbmFnZXIucHJvdG90eXBlLnN0b3BRdWVyeSA9IGZ1bmN0aW9uIChxdWVyeUlkKSB7XG4gICAgICAgIHRoaXMuc3RvcFF1ZXJ5Tm9Ccm9hZGNhc3QocXVlcnlJZCk7XG4gICAgICAgIHRoaXMuYnJvYWRjYXN0UXVlcmllcygpO1xuICAgIH07XG4gICAgUXVlcnlNYW5hZ2VyLnByb3RvdHlwZS5zdG9wUXVlcnlOb0Jyb2FkY2FzdCA9IGZ1bmN0aW9uIChxdWVyeUlkKSB7XG4gICAgICAgIHRoaXMuc3RvcFF1ZXJ5SW5TdG9yZU5vQnJvYWRjYXN0KHF1ZXJ5SWQpO1xuICAgICAgICB0aGlzLnJlbW92ZVF1ZXJ5KHF1ZXJ5SWQpO1xuICAgIH07XG4gICAgUXVlcnlNYW5hZ2VyLnByb3RvdHlwZS5yZW1vdmVRdWVyeSA9IGZ1bmN0aW9uIChxdWVyeUlkKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgLy8gdGVhcmRvd24gYWxsIGxpbmtzXG4gICAgICAgIC8vIEJvdGggYFF1ZXJ5TWFuYWdlci5mZXRjaFJlcXVlc3RgIGFuZCBgUXVlcnlNYW5hZ2VyLnF1ZXJ5YCBjcmVhdGUgc2VwYXJhdGUgcHJvbWlzZXNcbiAgICAgICAgLy8gdGhhdCBlYWNoIGFkZCB0aGVpciByZWplY3QgZnVuY3Rpb25zIHRvIGZldGNoQ2FuY2VsRm5zLlxuICAgICAgICAvLyBBIHF1ZXJ5IGNyZWF0ZWQgd2l0aCBgUXVlcnlNYW5hZ2VyLnF1ZXJ5KClgIGNvdWxkIHRyaWdnZXIgYSBgUXVlcnlNYW5hZ2VyLmZldGNoUmVxdWVzdGAuXG4gICAgICAgIC8vIFRoZSBzYW1lIHF1ZXJ5SWQgY291bGQgaGF2ZSB0d28gcmVqZWN0aW9uIGZucyBmb3IgdHdvIHByb21pc2VzXG4gICAgICAgIHRoaXMuZmV0Y2hDYW5jZWxGbnMuZGVsZXRlKHF1ZXJ5SWQpO1xuICAgICAgICBpZiAodGhpcy5xdWVyaWVzLmhhcyhxdWVyeUlkKSkge1xuICAgICAgICAgICAgKF9hID0gdGhpcy5xdWVyaWVzLmdldChxdWVyeUlkKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnN0b3AoKTtcbiAgICAgICAgICAgIHRoaXMucXVlcmllcy5kZWxldGUocXVlcnlJZCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFF1ZXJ5TWFuYWdlci5wcm90b3R5cGUuYnJvYWRjYXN0UXVlcmllcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMub25Ccm9hZGNhc3QpXG4gICAgICAgICAgICB0aGlzLm9uQnJvYWRjYXN0KCk7XG4gICAgICAgIHRoaXMucXVlcmllcy5mb3JFYWNoKGZ1bmN0aW9uIChpbmZvKSB7IHZhciBfYTsgcmV0dXJuIChfYSA9IGluZm8ub2JzZXJ2YWJsZVF1ZXJ5KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2FbXCJub3RpZnlcIl0oKTsgfSk7XG4gICAgfTtcbiAgICBRdWVyeU1hbmFnZXIucHJvdG90eXBlLmdldExvY2FsU3RhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsU3RhdGU7XG4gICAgfTtcbiAgICBRdWVyeU1hbmFnZXIucHJvdG90eXBlLmdldE9ic2VydmFibGVGcm9tTGluayA9IGZ1bmN0aW9uIChxdWVyeSwgY29udGV4dCwgdmFyaWFibGVzLCBleHRlbnNpb25zLCBcbiAgICAvLyBQcmVmZXIgY29udGV4dC5xdWVyeURlZHVwbGljYXRpb24gaWYgc3BlY2lmaWVkLlxuICAgIGRlZHVwbGljYXRpb24pIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAoZGVkdXBsaWNhdGlvbiA9PT0gdm9pZCAwKSB7IGRlZHVwbGljYXRpb24gPSAoX2EgPSBjb250ZXh0ID09PSBudWxsIHx8IGNvbnRleHQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNvbnRleHQucXVlcnlEZWR1cGxpY2F0aW9uKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB0aGlzLnF1ZXJ5RGVkdXBsaWNhdGlvbjsgfVxuICAgICAgICB2YXIgb2JzZXJ2YWJsZTtcbiAgICAgICAgdmFyIF9iID0gdGhpcy5nZXREb2N1bWVudEluZm8ocXVlcnkpLCBzZXJ2ZXJRdWVyeSA9IF9iLnNlcnZlclF1ZXJ5LCBjbGllbnRRdWVyeSA9IF9iLmNsaWVudFF1ZXJ5O1xuICAgICAgICBpZiAoc2VydmVyUXVlcnkpIHtcbiAgICAgICAgICAgIHZhciBfYyA9IHRoaXMsIGluRmxpZ2h0TGlua09ic2VydmFibGVzXzEgPSBfYy5pbkZsaWdodExpbmtPYnNlcnZhYmxlcywgbGluayA9IF9jLmxpbms7XG4gICAgICAgICAgICB2YXIgb3BlcmF0aW9uID0ge1xuICAgICAgICAgICAgICAgIHF1ZXJ5OiBzZXJ2ZXJRdWVyeSxcbiAgICAgICAgICAgICAgICB2YXJpYWJsZXM6IHZhcmlhYmxlcyxcbiAgICAgICAgICAgICAgICBvcGVyYXRpb25OYW1lOiBnZXRPcGVyYXRpb25OYW1lKHNlcnZlclF1ZXJ5KSB8fCB2b2lkIDAsXG4gICAgICAgICAgICAgICAgY29udGV4dDogdGhpcy5wcmVwYXJlQ29udGV4dChfX2Fzc2lnbihfX2Fzc2lnbih7fSwgY29udGV4dCksIHsgZm9yY2VGZXRjaDogIWRlZHVwbGljYXRpb24gfSkpLFxuICAgICAgICAgICAgICAgIGV4dGVuc2lvbnM6IGV4dGVuc2lvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29udGV4dCA9IG9wZXJhdGlvbi5jb250ZXh0O1xuICAgICAgICAgICAgaWYgKGRlZHVwbGljYXRpb24pIHtcbiAgICAgICAgICAgICAgICB2YXIgcHJpbnRlZFNlcnZlclF1ZXJ5XzEgPSBwcmludChzZXJ2ZXJRdWVyeSk7XG4gICAgICAgICAgICAgICAgdmFyIHZhckpzb25fMSA9IGNhbm9uaWNhbFN0cmluZ2lmeSh2YXJpYWJsZXMpO1xuICAgICAgICAgICAgICAgIHZhciBlbnRyeSA9IGluRmxpZ2h0TGlua09ic2VydmFibGVzXzEubG9va3VwKHByaW50ZWRTZXJ2ZXJRdWVyeV8xLCB2YXJKc29uXzEpO1xuICAgICAgICAgICAgICAgIG9ic2VydmFibGUgPSBlbnRyeS5vYnNlcnZhYmxlO1xuICAgICAgICAgICAgICAgIGlmICghb2JzZXJ2YWJsZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY29uY2FzdF8xID0gbmV3IENvbmNhc3QoW1xuICAgICAgICAgICAgICAgICAgICAgICAgZXhlY3V0ZShsaW5rLCBvcGVyYXRpb24pLFxuICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2YWJsZSA9IGVudHJ5Lm9ic2VydmFibGUgPSBjb25jYXN0XzE7XG4gICAgICAgICAgICAgICAgICAgIGNvbmNhc3RfMS5iZWZvcmVOZXh0KGZ1bmN0aW9uIGNiKG1ldGhvZCwgYXJnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWV0aG9kID09PSBcIm5leHRcIiAmJiBcImhhc05leHRcIiBpbiBhcmcgJiYgYXJnLmhhc05leHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25jYXN0XzEuYmVmb3JlTmV4dChjYik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbkZsaWdodExpbmtPYnNlcnZhYmxlc18xLnJlbW92ZShwcmludGVkU2VydmVyUXVlcnlfMSwgdmFySnNvbl8xKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgb2JzZXJ2YWJsZSA9IG5ldyBDb25jYXN0KFtcbiAgICAgICAgICAgICAgICAgICAgZXhlY3V0ZShsaW5rLCBvcGVyYXRpb24pLFxuICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb2JzZXJ2YWJsZSA9IG5ldyBDb25jYXN0KFtPYnNlcnZhYmxlLm9mKHsgZGF0YToge30gfSldKTtcbiAgICAgICAgICAgIGNvbnRleHQgPSB0aGlzLnByZXBhcmVDb250ZXh0KGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjbGllbnRRdWVyeSkge1xuICAgICAgICAgICAgb2JzZXJ2YWJsZSA9IGFzeW5jTWFwKG9ic2VydmFibGUsIGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMubG9jYWxTdGF0ZS5ydW5SZXNvbHZlcnMoe1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudDogY2xpZW50UXVlcnksXG4gICAgICAgICAgICAgICAgICAgIHJlbW90ZVJlc3VsdDogcmVzdWx0LFxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0OiBjb250ZXh0LFxuICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZXM6IHZhcmlhYmxlcyxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlO1xuICAgIH07XG4gICAgUXVlcnlNYW5hZ2VyLnByb3RvdHlwZS5nZXRSZXN1bHRzRnJvbUxpbmsgPSBmdW5jdGlvbiAocXVlcnlJbmZvLCBjYWNoZVdyaXRlQmVoYXZpb3IsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIHJlcXVlc3RJZCA9IChxdWVyeUluZm8ubGFzdFJlcXVlc3RJZCA9IHRoaXMuZ2VuZXJhdGVSZXF1ZXN0SWQoKSk7XG4gICAgICAgIC8vIFBlcmZvcm1pbmcgdHJhbnNmb3JtRm9yTGluayBoZXJlIGdpdmVzIHRoaXMuY2FjaGUgYSBjaGFuY2UgdG8gZmlsbCBpblxuICAgICAgICAvLyBtaXNzaW5nIGZyYWdtZW50IGRlZmluaXRpb25zIChmb3IgZXhhbXBsZSkgYmVmb3JlIHNlbmRpbmcgdGhpcyBkb2N1bWVudFxuICAgICAgICAvLyB0aHJvdWdoIHRoZSBsaW5rIGNoYWluLlxuICAgICAgICB2YXIgbGlua0RvY3VtZW50ID0gdGhpcy5jYWNoZS50cmFuc2Zvcm1Gb3JMaW5rKG9wdGlvbnMucXVlcnkpO1xuICAgICAgICByZXR1cm4gYXN5bmNNYXAodGhpcy5nZXRPYnNlcnZhYmxlRnJvbUxpbmsobGlua0RvY3VtZW50LCBvcHRpb25zLmNvbnRleHQsIG9wdGlvbnMudmFyaWFibGVzKSwgZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgdmFyIGdyYXBoUUxFcnJvcnMgPSBnZXRHcmFwaFFMRXJyb3JzRnJvbVJlc3VsdChyZXN1bHQpO1xuICAgICAgICAgICAgdmFyIGhhc0Vycm9ycyA9IGdyYXBoUUxFcnJvcnMubGVuZ3RoID4gMDtcbiAgICAgICAgICAgIHZhciBlcnJvclBvbGljeSA9IG9wdGlvbnMuZXJyb3JQb2xpY3k7XG4gICAgICAgICAgICAvLyBJZiB3ZSBpbnRlcnJ1cHRlZCB0aGlzIHJlcXVlc3QgYnkgY2FsbGluZyBnZXRSZXN1bHRzRnJvbUxpbmsgYWdhaW5cbiAgICAgICAgICAgIC8vIHdpdGggdGhlIHNhbWUgUXVlcnlJbmZvIG9iamVjdCwgd2UgaWdub3JlIHRoZSBvbGQgcmVzdWx0cy5cbiAgICAgICAgICAgIGlmIChyZXF1ZXN0SWQgPj0gcXVlcnlJbmZvLmxhc3RSZXF1ZXN0SWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoaGFzRXJyb3JzICYmIGVycm9yUG9saWN5ID09PSBcIm5vbmVcIikge1xuICAgICAgICAgICAgICAgICAgICAvLyBUaHJvd2luZyBoZXJlIGVmZmVjdGl2ZWx5IGNhbGxzIG9ic2VydmVyLmVycm9yLlxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBxdWVyeUluZm8ubWFya0Vycm9yKG5ldyBBcG9sbG9FcnJvcih7XG4gICAgICAgICAgICAgICAgICAgICAgICBncmFwaFFMRXJyb3JzOiBncmFwaFFMRXJyb3JzLFxuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFVzZSBsaW5rRG9jdW1lbnQgcmF0aGVyIHRoYW4gcXVlcnlJbmZvLmRvY3VtZW50IHNvIHRoZVxuICAgICAgICAgICAgICAgIC8vIG9wZXJhdGlvbi9mcmFnbWVudHMgdXNlZCB0byB3cml0ZSB0aGUgcmVzdWx0IGFyZSB0aGUgc2FtZSBhcyB0aGVcbiAgICAgICAgICAgICAgICAvLyBvbmVzIHVzZWQgdG8gb2J0YWluIGl0IGZyb20gdGhlIGxpbmsuXG4gICAgICAgICAgICAgICAgcXVlcnlJbmZvLm1hcmtSZXN1bHQocmVzdWx0LCBsaW5rRG9jdW1lbnQsIG9wdGlvbnMsIGNhY2hlV3JpdGVCZWhhdmlvcik7XG4gICAgICAgICAgICAgICAgcXVlcnlJbmZvLm1hcmtSZWFkeSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGFxciA9IHtcbiAgICAgICAgICAgICAgICBkYXRhOiByZXN1bHQuZGF0YSxcbiAgICAgICAgICAgICAgICBsb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBuZXR3b3JrU3RhdHVzOiBOZXR3b3JrU3RhdHVzLnJlYWR5LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vIEluIHRoZSBjYXNlIHdlIHN0YXJ0IG11bHRpcGxlIG5ldHdvcmsgcmVxdWVzdHMgc2ltdWxhdGVub3VzbHksIHdlXG4gICAgICAgICAgICAvLyB3YW50IHRvIGVuc3VyZSB3ZSBwcm9wZXJseSBzZXQgYGRhdGFgIGlmIHdlJ3JlIHJlcG9ydGluZyBvbiBhbiBvbGRcbiAgICAgICAgICAgIC8vIHJlc3VsdCB3aGljaCB3aWxsIG5vdCBiZSBjYXVnaHQgYnkgdGhlIGNvbmRpdGlvbmFsIGFib3ZlIHRoYXQgZW5kcyB1cFxuICAgICAgICAgICAgLy8gdGhyb3dpbmcgdGhlIG1hcmtFcnJvciByZXN1bHQuXG4gICAgICAgICAgICBpZiAoaGFzRXJyb3JzICYmIGVycm9yUG9saWN5ID09PSBcIm5vbmVcIikge1xuICAgICAgICAgICAgICAgIGFxci5kYXRhID0gdm9pZCAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGhhc0Vycm9ycyAmJiBlcnJvclBvbGljeSAhPT0gXCJpZ25vcmVcIikge1xuICAgICAgICAgICAgICAgIGFxci5lcnJvcnMgPSBncmFwaFFMRXJyb3JzO1xuICAgICAgICAgICAgICAgIGFxci5uZXR3b3JrU3RhdHVzID0gTmV0d29ya1N0YXR1cy5lcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhcXI7XG4gICAgICAgIH0sIGZ1bmN0aW9uIChuZXR3b3JrRXJyb3IpIHtcbiAgICAgICAgICAgIHZhciBlcnJvciA9IGlzQXBvbGxvRXJyb3IobmV0d29ya0Vycm9yKSA/IG5ldHdvcmtFcnJvciA6IChuZXcgQXBvbGxvRXJyb3IoeyBuZXR3b3JrRXJyb3I6IG5ldHdvcmtFcnJvciB9KSk7XG4gICAgICAgICAgICAvLyBBdm9pZCBzdG9yaW5nIGVycm9ycyBmcm9tIG9sZGVyIGludGVycnVwdGVkIHF1ZXJpZXMuXG4gICAgICAgICAgICBpZiAocmVxdWVzdElkID49IHF1ZXJ5SW5mby5sYXN0UmVxdWVzdElkKSB7XG4gICAgICAgICAgICAgICAgcXVlcnlJbmZvLm1hcmtFcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBRdWVyeU1hbmFnZXIucHJvdG90eXBlLmZldGNoQ29uY2FzdFdpdGhJbmZvID0gZnVuY3Rpb24gKHF1ZXJ5SW5mbywgb3B0aW9ucywgXG4gICAgLy8gVGhlIGluaXRpYWwgbmV0d29ya1N0YXR1cyBmb3IgdGhpcyBmZXRjaCwgbW9zdCBvZnRlblxuICAgIC8vIE5ldHdvcmtTdGF0dXMubG9hZGluZywgYnV0IGFsc28gcG9zc2libHkgZmV0Y2hNb3JlLCBwb2xsLCByZWZldGNoLFxuICAgIC8vIG9yIHNldFZhcmlhYmxlcy5cbiAgICBuZXR3b3JrU3RhdHVzLCBxdWVyeSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAobmV0d29ya1N0YXR1cyA9PT0gdm9pZCAwKSB7IG5ldHdvcmtTdGF0dXMgPSBOZXR3b3JrU3RhdHVzLmxvYWRpbmc7IH1cbiAgICAgICAgaWYgKHF1ZXJ5ID09PSB2b2lkIDApIHsgcXVlcnkgPSBvcHRpb25zLnF1ZXJ5OyB9XG4gICAgICAgIHZhciB2YXJpYWJsZXMgPSB0aGlzLmdldFZhcmlhYmxlcyhxdWVyeSwgb3B0aW9ucy52YXJpYWJsZXMpO1xuICAgICAgICB2YXIgZGVmYXVsdHMgPSB0aGlzLmRlZmF1bHRPcHRpb25zLndhdGNoUXVlcnk7XG4gICAgICAgIHZhciBfYSA9IG9wdGlvbnMuZmV0Y2hQb2xpY3ksIGZldGNoUG9saWN5ID0gX2EgPT09IHZvaWQgMCA/IChkZWZhdWx0cyAmJiBkZWZhdWx0cy5mZXRjaFBvbGljeSkgfHwgXCJjYWNoZS1maXJzdFwiIDogX2EsIF9iID0gb3B0aW9ucy5lcnJvclBvbGljeSwgZXJyb3JQb2xpY3kgPSBfYiA9PT0gdm9pZCAwID8gKGRlZmF1bHRzICYmIGRlZmF1bHRzLmVycm9yUG9saWN5KSB8fCBcIm5vbmVcIiA6IF9iLCBfYyA9IG9wdGlvbnMucmV0dXJuUGFydGlhbERhdGEsIHJldHVyblBhcnRpYWxEYXRhID0gX2MgPT09IHZvaWQgMCA/IGZhbHNlIDogX2MsIF9kID0gb3B0aW9ucy5ub3RpZnlPbk5ldHdvcmtTdGF0dXNDaGFuZ2UsIG5vdGlmeU9uTmV0d29ya1N0YXR1c0NoYW5nZSA9IF9kID09PSB2b2lkIDAgPyBmYWxzZSA6IF9kLCBfZSA9IG9wdGlvbnMuY29udGV4dCwgY29udGV4dCA9IF9lID09PSB2b2lkIDAgPyB7fSA6IF9lO1xuICAgICAgICB2YXIgbm9ybWFsaXplZCA9IE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMsIHtcbiAgICAgICAgICAgIHF1ZXJ5OiBxdWVyeSxcbiAgICAgICAgICAgIHZhcmlhYmxlczogdmFyaWFibGVzLFxuICAgICAgICAgICAgZmV0Y2hQb2xpY3k6IGZldGNoUG9saWN5LFxuICAgICAgICAgICAgZXJyb3JQb2xpY3k6IGVycm9yUG9saWN5LFxuICAgICAgICAgICAgcmV0dXJuUGFydGlhbERhdGE6IHJldHVyblBhcnRpYWxEYXRhLFxuICAgICAgICAgICAgbm90aWZ5T25OZXR3b3JrU3RhdHVzQ2hhbmdlOiBub3RpZnlPbk5ldHdvcmtTdGF0dXNDaGFuZ2UsXG4gICAgICAgICAgICBjb250ZXh0OiBjb250ZXh0LFxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGZyb21WYXJpYWJsZXMgPSBmdW5jdGlvbiAodmFyaWFibGVzKSB7XG4gICAgICAgICAgICAvLyBTaW5jZSBub3JtYWxpemVkIGlzIGFsd2F5cyBhIGZyZXNoIGNvcHkgb2Ygb3B0aW9ucywgaXQncyBzYWZlIHRvXG4gICAgICAgICAgICAvLyBtb2RpZnkgaXRzIHByb3BlcnRpZXMgaGVyZSwgcmF0aGVyIHRoYW4gY3JlYXRpbmcgeWV0IGFub3RoZXIgbmV3XG4gICAgICAgICAgICAvLyBXYXRjaFF1ZXJ5T3B0aW9ucyBvYmplY3QuXG4gICAgICAgICAgICBub3JtYWxpemVkLnZhcmlhYmxlcyA9IHZhcmlhYmxlcztcbiAgICAgICAgICAgIHZhciBzb3VyY2VzV2l0aEluZm8gPSBfdGhpcy5mZXRjaFF1ZXJ5QnlQb2xpY3kocXVlcnlJbmZvLCBub3JtYWxpemVkLCBuZXR3b3JrU3RhdHVzKTtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIC8vIElmIHdlJ3JlIGluIHN0YW5kYnksIHBvc3Rwb25lIGFkdmFuY2luZyBvcHRpb25zLmZldGNoUG9saWN5IHVzaW5nXG4gICAgICAgICAgICAvLyBhcHBseU5leHRGZXRjaFBvbGljeS5cbiAgICAgICAgICAgIG5vcm1hbGl6ZWQuZmV0Y2hQb2xpY3kgIT09IFwic3RhbmRieVwiICYmXG4gICAgICAgICAgICAgICAgLy8gVGhlIFwic3RhbmRieVwiIHBvbGljeSBjdXJyZW50bHkgcmV0dXJucyBbXSBmcm9tIGZldGNoUXVlcnlCeVBvbGljeSwgc29cbiAgICAgICAgICAgICAgICAvLyB0aGlzIGlzIGFub3RoZXIgd2F5IHRvIGRldGVjdCB3aGVuIG5vdGhpbmcgd2FzIGRvbmUvZmV0Y2hlZC5cbiAgICAgICAgICAgICAgICBzb3VyY2VzV2l0aEluZm8uc291cmNlcy5sZW5ndGggPiAwICYmXG4gICAgICAgICAgICAgICAgcXVlcnlJbmZvLm9ic2VydmFibGVRdWVyeSkge1xuICAgICAgICAgICAgICAgIHF1ZXJ5SW5mby5vYnNlcnZhYmxlUXVlcnlbXCJhcHBseU5leHRGZXRjaFBvbGljeVwiXShcImFmdGVyLWZldGNoXCIsIG9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHNvdXJjZXNXaXRoSW5mbztcbiAgICAgICAgfTtcbiAgICAgICAgLy8gVGhpcyBjYW5jZWwgZnVuY3Rpb24gbmVlZHMgdG8gYmUgc2V0IGJlZm9yZSB0aGUgY29uY2FzdCBpcyBjcmVhdGVkLFxuICAgICAgICAvLyBpbiBjYXNlIGNvbmNhc3QgY3JlYXRpb24gc3luY2hyb25vdXNseSBjYW5jZWxzIHRoZSByZXF1ZXN0LlxuICAgICAgICB2YXIgY2xlYW51cENhbmNlbEZuID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuZmV0Y2hDYW5jZWxGbnMuZGVsZXRlKHF1ZXJ5SW5mby5xdWVyeUlkKTsgfTtcbiAgICAgICAgdGhpcy5mZXRjaENhbmNlbEZucy5zZXQocXVlcnlJbmZvLnF1ZXJ5SWQsIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgICAgIGNsZWFudXBDYW5jZWxGbigpO1xuICAgICAgICAgICAgLy8gVGhpcyBkZWxheSBlbnN1cmVzIHRoZSBjb25jYXN0IHZhcmlhYmxlIGhhcyBiZWVuIGluaXRpYWxpemVkLlxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHJldHVybiBjb25jYXN0LmNhbmNlbChyZWFzb24pOyB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBjb25jYXN0LCBjb250YWluc0RhdGFGcm9tTGluaztcbiAgICAgICAgLy8gSWYgdGhlIHF1ZXJ5IGhhcyBAZXhwb3J0KGFzOiAuLi4pIGRpcmVjdGl2ZXMsIHRoZW4gd2UgbmVlZCB0b1xuICAgICAgICAvLyBwcm9jZXNzIHRob3NlIGRpcmVjdGl2ZXMgYXN5bmNocm9ub3VzbHkuIFdoZW4gdGhlcmUgYXJlIG5vXG4gICAgICAgIC8vIEBleHBvcnQgZGlyZWN0aXZlcyAodGhlIGNvbW1vbiBjYXNlKSwgd2UgZGVsaWJlcmF0ZWx5IGF2b2lkXG4gICAgICAgIC8vIHdyYXBwaW5nIHRoZSByZXN1bHQgb2YgdGhpcy5mZXRjaFF1ZXJ5QnlQb2xpY3kgaW4gYSBQcm9taXNlLFxuICAgICAgICAvLyBzaW5jZSB0aGUgdGltaW5nIG9mIHJlc3VsdCBkZWxpdmVyeSBpcyAodW5mb3J0dW5hdGVseSkgaW1wb3J0YW50XG4gICAgICAgIC8vIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS4gVE9ETyBUaGlzIGNvZGUgY291bGQgYmUgc2ltcGxlciBpZlxuICAgICAgICAvLyB3ZSBkZXByZWNhdGVkIGFuZCByZW1vdmVkIExvY2FsU3RhdGUuXG4gICAgICAgIGlmICh0aGlzLmdldERvY3VtZW50SW5mbyhub3JtYWxpemVkLnF1ZXJ5KS5oYXNDbGllbnRFeHBvcnRzKSB7XG4gICAgICAgICAgICBjb25jYXN0ID0gbmV3IENvbmNhc3QodGhpcy5sb2NhbFN0YXRlXG4gICAgICAgICAgICAgICAgLmFkZEV4cG9ydGVkVmFyaWFibGVzKG5vcm1hbGl6ZWQucXVlcnksIG5vcm1hbGl6ZWQudmFyaWFibGVzLCBub3JtYWxpemVkLmNvbnRleHQpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnJvbVZhcmlhYmxlcylcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoc291cmNlc1dpdGhJbmZvKSB7IHJldHVybiBzb3VyY2VzV2l0aEluZm8uc291cmNlczsgfSkpO1xuICAgICAgICAgICAgLy8gdGhlcmUgaXMganVzdCBubyB3YXkgd2UgY2FuIHN5bmNocm9ub3VzbHkgZ2V0IHRoZSAqcmlnaHQqIHZhbHVlIGhlcmUsXG4gICAgICAgICAgICAvLyBzbyB3ZSB3aWxsIGFzc3VtZSBgdHJ1ZWAsIHdoaWNoIGlzIHRoZSBiZWhhdmlvdXIgYmVmb3JlIHRoZSBidWcgZml4IGluXG4gICAgICAgICAgICAvLyAjMTA1OTcuIFRoaXMgbWVhbnMgdGhhdCBidWcgaXMgbm90IGZpeGVkIGluIHRoYXQgY2FzZSwgYW5kIGlzIHByb2JhYmx5XG4gICAgICAgICAgICAvLyB1bi1maXhhYmxlIHdpdGggcmVhc29uYWJsZSBlZmZvcnQgZm9yIHRoZSBlZGdlIGNhc2Ugb2YgQGV4cG9ydCBhc1xuICAgICAgICAgICAgLy8gZGlyZWN0aXZlcy5cbiAgICAgICAgICAgIGNvbnRhaW5zRGF0YUZyb21MaW5rID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBzb3VyY2VzV2l0aEluZm8gPSBmcm9tVmFyaWFibGVzKG5vcm1hbGl6ZWQudmFyaWFibGVzKTtcbiAgICAgICAgICAgIGNvbnRhaW5zRGF0YUZyb21MaW5rID0gc291cmNlc1dpdGhJbmZvLmZyb21MaW5rO1xuICAgICAgICAgICAgY29uY2FzdCA9IG5ldyBDb25jYXN0KHNvdXJjZXNXaXRoSW5mby5zb3VyY2VzKTtcbiAgICAgICAgfVxuICAgICAgICBjb25jYXN0LnByb21pc2UudGhlbihjbGVhbnVwQ2FuY2VsRm4sIGNsZWFudXBDYW5jZWxGbik7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjb25jYXN0OiBjb25jYXN0LFxuICAgICAgICAgICAgZnJvbUxpbms6IGNvbnRhaW5zRGF0YUZyb21MaW5rLFxuICAgICAgICB9O1xuICAgIH07XG4gICAgUXVlcnlNYW5hZ2VyLnByb3RvdHlwZS5yZWZldGNoUXVlcmllcyA9IGZ1bmN0aW9uIChfYSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgdXBkYXRlQ2FjaGUgPSBfYS51cGRhdGVDYWNoZSwgaW5jbHVkZSA9IF9hLmluY2x1ZGUsIF9iID0gX2Eub3B0aW1pc3RpYywgb3B0aW1pc3RpYyA9IF9iID09PSB2b2lkIDAgPyBmYWxzZSA6IF9iLCBfYyA9IF9hLnJlbW92ZU9wdGltaXN0aWMsIHJlbW92ZU9wdGltaXN0aWMgPSBfYyA9PT0gdm9pZCAwID8gb3B0aW1pc3RpYyA/IG1ha2VVbmlxdWVJZChcInJlZmV0Y2hRdWVyaWVzXCIpIDogdm9pZCAwIDogX2MsIG9uUXVlcnlVcGRhdGVkID0gX2Eub25RdWVyeVVwZGF0ZWQ7XG4gICAgICAgIHZhciBpbmNsdWRlZFF1ZXJpZXNCeUlkID0gbmV3IE1hcCgpO1xuICAgICAgICBpZiAoaW5jbHVkZSkge1xuICAgICAgICAgICAgdGhpcy5nZXRPYnNlcnZhYmxlUXVlcmllcyhpbmNsdWRlKS5mb3JFYWNoKGZ1bmN0aW9uIChvcSwgcXVlcnlJZCkge1xuICAgICAgICAgICAgICAgIGluY2x1ZGVkUXVlcmllc0J5SWQuc2V0KHF1ZXJ5SWQsIHtcbiAgICAgICAgICAgICAgICAgICAgb3E6IG9xLFxuICAgICAgICAgICAgICAgICAgICBsYXN0RGlmZjogKF90aGlzLnF1ZXJpZXMuZ2V0KHF1ZXJ5SWQpIHx8IG9xW1wicXVlcnlJbmZvXCJdKS5nZXREaWZmKCksXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVzdWx0cyA9IG5ldyBNYXAoKTtcbiAgICAgICAgaWYgKHVwZGF0ZUNhY2hlKSB7XG4gICAgICAgICAgICB0aGlzLmNhY2hlLmJhdGNoKHtcbiAgICAgICAgICAgICAgICB1cGRhdGU6IHVwZGF0ZUNhY2hlLFxuICAgICAgICAgICAgICAgIC8vIFNpbmNlIHlvdSBjYW4gcGVyZm9ybSBhbnkgY29tYmluYXRpb24gb2YgY2FjaGUgcmVhZHMgYW5kL29yIHdyaXRlcyBpblxuICAgICAgICAgICAgICAgIC8vIHRoZSBjYWNoZS5iYXRjaCB1cGRhdGUgZnVuY3Rpb24sIGl0cyBvcHRpbWlzdGljIG9wdGlvbiBjYW4gYmUgZWl0aGVyXG4gICAgICAgICAgICAgICAgLy8gYSBib29sZWFuIG9yIGEgc3RyaW5nLCByZXByZXNlbnRpbmcgdGhyZWUgZGlzdGluY3QgbW9kZXMgb2ZcbiAgICAgICAgICAgICAgICAvLyBvcGVyYXRpb246XG4gICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAvLyAqIGZhbHNlOiByZWFkL3dyaXRlIG9ubHkgdGhlIHJvb3QgbGF5ZXJcbiAgICAgICAgICAgICAgICAvLyAqIHRydWU6IHJlYWQvd3JpdGUgdGhlIHRvcG1vc3QgbGF5ZXJcbiAgICAgICAgICAgICAgICAvLyAqIHN0cmluZzogcmVhZC93cml0ZSBhIGZyZXNoIG9wdGltaXN0aWMgbGF5ZXIgd2l0aCB0aGF0IElEIHN0cmluZ1xuICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgLy8gV2hlbiB0eXBlb2Ygb3B0aW1pc3RpYyA9PT0gXCJzdHJpbmdcIiwgYSBuZXcgb3B0aW1pc3RpYyBsYXllciB3aWxsIGJlXG4gICAgICAgICAgICAgICAgLy8gdGVtcG9yYXJpbHkgY3JlYXRlZCB3aXRoaW4gY2FjaGUuYmF0Y2ggd2l0aCB0aGF0IHN0cmluZyBhcyBpdHMgSUQuIElmXG4gICAgICAgICAgICAgICAgLy8gd2UgdGhlbiBwYXNzIHRoYXQgc2FtZSBzdHJpbmcgYXMgdGhlIHJlbW92ZU9wdGltaXN0aWMgb3B0aW9uLCB3ZSBjYW5cbiAgICAgICAgICAgICAgICAvLyBtYWtlIGNhY2hlLmJhdGNoIGltbWVkaWF0ZWx5IHJlbW92ZSB0aGUgb3B0aW1pc3RpYyBsYXllciBhZnRlclxuICAgICAgICAgICAgICAgIC8vIHJ1bm5pbmcgdGhlIHVwZGF0ZUNhY2hlIGZ1bmN0aW9uLCB0cmlnZ2VyaW5nIG9ubHkgb25lIGJyb2FkY2FzdC5cbiAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgIC8vIEhvd2V2ZXIsIHRoZSByZWZldGNoUXVlcmllcyBtZXRob2QgYWNjZXB0cyBvbmx5IHRydWUgb3IgZmFsc2UgZm9yIGl0c1xuICAgICAgICAgICAgICAgIC8vIG9wdGltaXN0aWMgb3B0aW9uIChub3Qgc3RyaW5nKS4gV2UgaW50ZXJwcmV0IHRydWUgdG8gbWVhbiBhIHRlbXBvcmFyeVxuICAgICAgICAgICAgICAgIC8vIG9wdGltaXN0aWMgbGF5ZXIgc2hvdWxkIGJlIGNyZWF0ZWQsIHRvIGFsbG93IGVmZmljaWVudGx5IHJvbGxpbmcgYmFja1xuICAgICAgICAgICAgICAgIC8vIHRoZSBlZmZlY3Qgb2YgdGhlIHVwZGF0ZUNhY2hlIGZ1bmN0aW9uLCB3aGljaCBpbnZvbHZlcyBwYXNzaW5nIGFcbiAgICAgICAgICAgICAgICAvLyBzdHJpbmcgaW5zdGVhZCBvZiB0cnVlIGFzIHRoZSBvcHRpbWlzdGljIG9wdGlvbiB0byBjYWNoZS5iYXRjaCwgd2hlblxuICAgICAgICAgICAgICAgIC8vIHJlZmV0Y2hRdWVyaWVzIHJlY2VpdmVzIG9wdGltaXN0aWM6IHRydWUuXG4gICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAvLyBJbiBvdGhlciB3b3Jkcywgd2UgYXJlIGRlbGliZXJhdGVseSBub3Qgc3VwcG9ydGluZyB0aGUgdXNlIGNhc2Ugb2ZcbiAgICAgICAgICAgICAgICAvLyB3cml0aW5nIHRvIGFuICpleGlzdGluZyogb3B0aW1pc3RpYyBsYXllciAodXNpbmcgdGhlIHJlZmV0Y2hRdWVyaWVzXG4gICAgICAgICAgICAgICAgLy8gdXBkYXRlQ2FjaGUgZnVuY3Rpb24pLCBzaW5jZSB0aGF0IHdvdWxkIHBvdGVudGlhbGx5IGludGVyZmVyZSB3aXRoXG4gICAgICAgICAgICAgICAgLy8gb3RoZXIgb3B0aW1pc3RpYyB1cGRhdGVzIGluIHByb2dyZXNzLiBJbnN0ZWFkLCB5b3UgY2FuIHJlYWQvd3JpdGVcbiAgICAgICAgICAgICAgICAvLyBvbmx5IHRoZSByb290IGxheWVyIGJ5IHBhc3Npbmcgb3B0aW1pc3RpYzogZmFsc2UgdG8gcmVmZXRjaFF1ZXJpZXMsXG4gICAgICAgICAgICAgICAgLy8gb3IgeW91IGNhbiByZWFkL3dyaXRlIGEgYnJhbmQgbmV3IG9wdGltaXN0aWMgbGF5ZXIgdGhhdCB3aWxsIGJlXG4gICAgICAgICAgICAgICAgLy8gYXV0b21hdGljYWxseSByZW1vdmVkIGJ5IHBhc3Npbmcgb3B0aW1pc3RpYzogdHJ1ZS5cbiAgICAgICAgICAgICAgICBvcHRpbWlzdGljOiAob3B0aW1pc3RpYyAmJiByZW1vdmVPcHRpbWlzdGljKSB8fCBmYWxzZSxcbiAgICAgICAgICAgICAgICAvLyBUaGUgcmVtb3ZlT3B0aW1pc3RpYyBvcHRpb24gY2FuIGFsc28gYmUgcHJvdmlkZWQgYnkgaXRzZWxmLCBldmVuIGlmXG4gICAgICAgICAgICAgICAgLy8gb3B0aW1pc3RpYyA9PT0gZmFsc2UsIHRvIHJlbW92ZSBzb21lIHByZXZpb3VzbHktYWRkZWQgb3B0aW1pc3RpY1xuICAgICAgICAgICAgICAgIC8vIGxheWVyIHNhZmVseSBhbmQgZWZmaWNpZW50bHksIGxpa2Ugd2UgZG8gaW4gbWFya011dGF0aW9uUmVzdWx0LlxuICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgLy8gSWYgYW4gZXhwbGljaXQgcmVtb3ZlT3B0aW1pc3RpYyBzdHJpbmcgaXMgcHJvdmlkZWQgd2l0aCBvcHRpbWlzdGljOlxuICAgICAgICAgICAgICAgIC8vIHRydWUsIHRoZSByZW1vdmVPcHRpbWlzdGljIHN0cmluZyB3aWxsIGRldGVybWluZSB0aGUgSUQgb2YgdGhlXG4gICAgICAgICAgICAgICAgLy8gdGVtcG9yYXJ5IG9wdGltaXN0aWMgbGF5ZXIsIGluIGNhc2UgdGhhdCBldmVyIG1hdHRlcnMuXG4gICAgICAgICAgICAgICAgcmVtb3ZlT3B0aW1pc3RpYzogcmVtb3ZlT3B0aW1pc3RpYyxcbiAgICAgICAgICAgICAgICBvbldhdGNoVXBkYXRlZDogZnVuY3Rpb24gKHdhdGNoLCBkaWZmLCBsYXN0RGlmZikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgb3EgPSB3YXRjaC53YXRjaGVyIGluc3RhbmNlb2YgUXVlcnlJbmZvICYmIHdhdGNoLndhdGNoZXIub2JzZXJ2YWJsZVF1ZXJ5O1xuICAgICAgICAgICAgICAgICAgICBpZiAob3EpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvblF1ZXJ5VXBkYXRlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpbmNlIHdlJ3JlIGFib3V0IHRvIGhhbmRsZSB0aGlzIHF1ZXJ5IG5vdywgcmVtb3ZlIGl0IGZyb21cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpbmNsdWRlZFF1ZXJpZXNCeUlkLCBpbiBjYXNlIGl0IHdhcyBhZGRlZCBlYXJsaWVyIGJlY2F1c2Ugb2ZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBvcHRpb25zLmluY2x1ZGUuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5jbHVkZWRRdWVyaWVzQnlJZC5kZWxldGUob3EucXVlcnlJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IG9uUXVlcnlVcGRhdGVkKG9xLCBkaWZmLCBsYXN0RGlmZik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgb25RdWVyeVVwZGF0ZWQgZnVuY3Rpb24gcmVxdWVzdGVkIHRoZSBkZWZhdWx0IHJlZmV0Y2hpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYmVoYXZpb3IgYnkgcmV0dXJuaW5nIHRydWUuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IG9xLnJlZmV0Y2goKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVjb3JkIHRoZSByZXN1bHQgaW4gdGhlIHJlc3VsdHMgTWFwLCBhcyBsb25nIGFzIG9uUXVlcnlVcGRhdGVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGlkIG5vdCByZXR1cm4gZmFsc2UgdG8gc2tpcC9pZ25vcmUgdGhpcyByZXN1bHQuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0cy5zZXQob3EsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFsbG93IHRoZSBkZWZhdWx0IGNhY2hlIGJyb2FkY2FzdCB0byBoYXBwZW4sIGV4Y2VwdCB3aGVuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gb25RdWVyeVVwZGF0ZWQgcmV0dXJucyBmYWxzZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9uUXVlcnlVcGRhdGVkICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgd2UgZG9uJ3QgaGF2ZSBhbiBvblF1ZXJ5VXBkYXRlZCBmdW5jdGlvbiwgYW5kIG9uUXVlcnlVcGRhdGVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2FzIG5vdCBkaXNhYmxlZCBieSBwYXNzaW5nIG51bGwsIG1ha2Ugc3VyZSB0aGlzIHF1ZXJ5IGlzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gXCJpbmNsdWRlZFwiIGxpa2UgYW55IG90aGVyIG9wdGlvbnMuaW5jbHVkZS1zcGVjaWZpZWQgcXVlcnkuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5jbHVkZWRRdWVyaWVzQnlJZC5zZXQob3EucXVlcnlJZCwgeyBvcTogb3EsIGxhc3REaWZmOiBsYXN0RGlmZiwgZGlmZjogZGlmZiB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5jbHVkZWRRdWVyaWVzQnlJZC5zaXplKSB7XG4gICAgICAgICAgICBpbmNsdWRlZFF1ZXJpZXNCeUlkLmZvckVhY2goZnVuY3Rpb24gKF9hLCBxdWVyeUlkKSB7XG4gICAgICAgICAgICAgICAgdmFyIG9xID0gX2Eub3EsIGxhc3REaWZmID0gX2EubGFzdERpZmYsIGRpZmYgPSBfYS5kaWZmO1xuICAgICAgICAgICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgICAgICAgICAgLy8gSWYgb25RdWVyeVVwZGF0ZWQgaXMgcHJvdmlkZWQsIHdlIHdhbnQgdG8gdXNlIGl0IGZvciBhbGwgaW5jbHVkZWRcbiAgICAgICAgICAgICAgICAvLyBxdWVyaWVzLCBldmVuIHRoZSBRdWVyeU9wdGlvbnMgb25lcy5cbiAgICAgICAgICAgICAgICBpZiAob25RdWVyeVVwZGF0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkaWZmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaWZmID0gbXV0ZURlcHJlY2F0aW9ucyhcImNhbm9uaXplUmVzdWx0c1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNhY2hlLmRpZmYob3FbXCJxdWVyeUluZm9cIl1bXCJnZXREaWZmT3B0aW9uc1wiXSgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IG9uUXVlcnlVcGRhdGVkKG9xLCBkaWZmLCBsYXN0RGlmZik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIE90aGVyd2lzZSwgd2UgZmFsbCBiYWNrIHRvIHJlZmV0Y2hpbmcuXG4gICAgICAgICAgICAgICAgaWYgKCFvblF1ZXJ5VXBkYXRlZCB8fCByZXN1bHQgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gb3EucmVmZXRjaCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0ICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHRzLnNldChvcSwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHF1ZXJ5SWQuaW5kZXhPZihcImxlZ2FjeU9uZVRpbWVRdWVyeVwiKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnN0b3BRdWVyeU5vQnJvYWRjYXN0KHF1ZXJ5SWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZW1vdmVPcHRpbWlzdGljKSB7XG4gICAgICAgICAgICAvLyBJbiBjYXNlIG5vIHVwZGF0ZUNhY2hlIGNhbGxiYWNrIHdhcyBwcm92aWRlZCAoc28gY2FjaGUuYmF0Y2ggd2FzIG5vdFxuICAgICAgICAgICAgLy8gY2FsbGVkIGFib3ZlLCBhbmQgdGh1cyBkaWQgbm90IGFscmVhZHkgcmVtb3ZlIHRoZSBvcHRpbWlzdGljIGxheWVyKSxcbiAgICAgICAgICAgIC8vIHJlbW92ZSBpdCBoZXJlLiBTaW5jZSB0aGlzIGlzIGEgbm8tb3Agd2hlbiB0aGUgbGF5ZXIgaGFzIGFscmVhZHkgYmVlblxuICAgICAgICAgICAgLy8gcmVtb3ZlZCwgd2UgZG8gaXQgZXZlbiBpZiB3ZSBjYWxsZWQgY2FjaGUuYmF0Y2ggYWJvdmUsIHNpbmNlIGl0J3NcbiAgICAgICAgICAgIC8vIHBvc3NpYmxlIHRoaXMuY2FjaGUgaXMgYW4gaW5zdGFuY2Ugb2Ygc29tZSBBcG9sbG9DYWNoZSBzdWJjbGFzcyBvdGhlclxuICAgICAgICAgICAgLy8gdGhhbiBJbk1lbW9yeUNhY2hlLCBhbmQgZG9lcyBub3QgZnVsbHkgc3VwcG9ydCB0aGUgcmVtb3ZlT3B0aW1pc3RpY1xuICAgICAgICAgICAgLy8gb3B0aW9uIGZvciBjYWNoZS5iYXRjaC5cbiAgICAgICAgICAgIHRoaXMuY2FjaGUucmVtb3ZlT3B0aW1pc3RpYyhyZW1vdmVPcHRpbWlzdGljKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICB9O1xuICAgIFF1ZXJ5TWFuYWdlci5wcm90b3R5cGUubWFza09wZXJhdGlvbiA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgICB2YXIgZG9jdW1lbnQgPSBvcHRpb25zLmRvY3VtZW50LCBkYXRhID0gb3B0aW9ucy5kYXRhO1xuICAgICAgICBpZiAoZ2xvYmFsVGhpcy5fX0RFVl9fICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgdmFyIGZldGNoUG9saWN5ID0gb3B0aW9ucy5mZXRjaFBvbGljeSwgaWQgPSBvcHRpb25zLmlkO1xuICAgICAgICAgICAgdmFyIG9wZXJhdGlvblR5cGUgPSAoX2EgPSBnZXRPcGVyYXRpb25EZWZpbml0aW9uKGRvY3VtZW50KSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm9wZXJhdGlvbjtcbiAgICAgICAgICAgIHZhciBvcGVyYXRpb25JZCA9ICgoX2IgPSBvcGVyYXRpb25UeXBlID09PSBudWxsIHx8IG9wZXJhdGlvblR5cGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wZXJhdGlvblR5cGVbMF0pICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IFwib1wiKSArIGlkO1xuICAgICAgICAgICAgaWYgKHRoaXMuZGF0YU1hc2tpbmcgJiZcbiAgICAgICAgICAgICAgICBmZXRjaFBvbGljeSA9PT0gXCJuby1jYWNoZVwiICYmXG4gICAgICAgICAgICAgICAgIWlzRnVsbHlVbm1hc2tlZE9wZXJhdGlvbihkb2N1bWVudCkgJiZcbiAgICAgICAgICAgICAgICAhdGhpcy5ub0NhY2hlV2FybmluZ3NCeVF1ZXJ5SWQuaGFzKG9wZXJhdGlvbklkKSkge1xuICAgICAgICAgICAgICAgIHRoaXMubm9DYWNoZVdhcm5pbmdzQnlRdWVyeUlkLmFkZChvcGVyYXRpb25JZCk7XG4gICAgICAgICAgICAgICAgZ2xvYmFsVGhpcy5fX0RFVl9fICE9PSBmYWxzZSAmJiBpbnZhcmlhbnQud2FybihcbiAgICAgICAgICAgICAgICAgICAgNDUsXG4gICAgICAgICAgICAgICAgICAgIChfYyA9IGdldE9wZXJhdGlvbk5hbWUoZG9jdW1lbnQpKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiBcIlVubmFtZWQgXCIuY29uY2F0KG9wZXJhdGlvblR5cGUgIT09IG51bGwgJiYgb3BlcmF0aW9uVHlwZSAhPT0gdm9pZCAwID8gb3BlcmF0aW9uVHlwZSA6IFwib3BlcmF0aW9uXCIpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKHRoaXMuZGF0YU1hc2tpbmcgP1xuICAgICAgICAgICAgbWFza09wZXJhdGlvbihkYXRhLCBkb2N1bWVudCwgdGhpcy5jYWNoZSlcbiAgICAgICAgICAgIDogZGF0YSk7XG4gICAgfTtcbiAgICBRdWVyeU1hbmFnZXIucHJvdG90eXBlLm1hc2tGcmFnbWVudCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIHZhciBkYXRhID0gb3B0aW9ucy5kYXRhLCBmcmFnbWVudCA9IG9wdGlvbnMuZnJhZ21lbnQsIGZyYWdtZW50TmFtZSA9IG9wdGlvbnMuZnJhZ21lbnROYW1lO1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhTWFza2luZyA/XG4gICAgICAgICAgICBtYXNrRnJhZ21lbnQoZGF0YSwgZnJhZ21lbnQsIHRoaXMuY2FjaGUsIGZyYWdtZW50TmFtZSlcbiAgICAgICAgICAgIDogZGF0YTtcbiAgICB9O1xuICAgIFF1ZXJ5TWFuYWdlci5wcm90b3R5cGUuZmV0Y2hRdWVyeUJ5UG9saWN5ID0gZnVuY3Rpb24gKHF1ZXJ5SW5mbywgX2EsIFxuICAgIC8vIFRoZSBpbml0aWFsIG5ldHdvcmtTdGF0dXMgZm9yIHRoaXMgZmV0Y2gsIG1vc3Qgb2Z0ZW5cbiAgICAvLyBOZXR3b3JrU3RhdHVzLmxvYWRpbmcsIGJ1dCBhbHNvIHBvc3NpYmx5IGZldGNoTW9yZSwgcG9sbCwgcmVmZXRjaCxcbiAgICAvLyBvciBzZXRWYXJpYWJsZXMuXG4gICAgbmV0d29ya1N0YXR1cykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgcXVlcnkgPSBfYS5xdWVyeSwgdmFyaWFibGVzID0gX2EudmFyaWFibGVzLCBmZXRjaFBvbGljeSA9IF9hLmZldGNoUG9saWN5LCByZWZldGNoV3JpdGVQb2xpY3kgPSBfYS5yZWZldGNoV3JpdGVQb2xpY3ksIGVycm9yUG9saWN5ID0gX2EuZXJyb3JQb2xpY3ksIHJldHVyblBhcnRpYWxEYXRhID0gX2EucmV0dXJuUGFydGlhbERhdGEsIGNvbnRleHQgPSBfYS5jb250ZXh0LCBub3RpZnlPbk5ldHdvcmtTdGF0dXNDaGFuZ2UgPSBfYS5ub3RpZnlPbk5ldHdvcmtTdGF0dXNDaGFuZ2U7XG4gICAgICAgIHZhciBvbGROZXR3b3JrU3RhdHVzID0gcXVlcnlJbmZvLm5ldHdvcmtTdGF0dXM7XG4gICAgICAgIHF1ZXJ5SW5mby5pbml0KHtcbiAgICAgICAgICAgIGRvY3VtZW50OiBxdWVyeSxcbiAgICAgICAgICAgIHZhcmlhYmxlczogdmFyaWFibGVzLFxuICAgICAgICAgICAgbmV0d29ya1N0YXR1czogbmV0d29ya1N0YXR1cyxcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciByZWFkQ2FjaGUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBxdWVyeUluZm8uZ2V0RGlmZigpOyB9O1xuICAgICAgICB2YXIgcmVzdWx0c0Zyb21DYWNoZSA9IGZ1bmN0aW9uIChkaWZmLCBuZXR3b3JrU3RhdHVzKSB7XG4gICAgICAgICAgICBpZiAobmV0d29ya1N0YXR1cyA9PT0gdm9pZCAwKSB7IG5ldHdvcmtTdGF0dXMgPSBxdWVyeUluZm8ubmV0d29ya1N0YXR1cyB8fCBOZXR3b3JrU3RhdHVzLmxvYWRpbmc7IH1cbiAgICAgICAgICAgIHZhciBkYXRhID0gZGlmZi5yZXN1bHQ7XG4gICAgICAgICAgICBpZiAoZ2xvYmFsVGhpcy5fX0RFVl9fICE9PSBmYWxzZSAmJiAhcmV0dXJuUGFydGlhbERhdGEgJiYgIWVxdWFsKGRhdGEsIHt9KSkge1xuICAgICAgICAgICAgICAgIGxvZ01pc3NpbmdGaWVsZEVycm9ycyhkaWZmLm1pc3NpbmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGZyb21EYXRhID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZS5vZihfX2Fzc2lnbih7IGRhdGE6IGRhdGEsIGxvYWRpbmc6IGlzTmV0d29ya1JlcXVlc3RJbkZsaWdodChuZXR3b3JrU3RhdHVzKSwgbmV0d29ya1N0YXR1czogbmV0d29ya1N0YXR1cyB9LCAoZGlmZi5jb21wbGV0ZSA/IG51bGwgOiB7IHBhcnRpYWw6IHRydWUgfSkpKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoZGF0YSAmJiBfdGhpcy5nZXREb2N1bWVudEluZm8ocXVlcnkpLmhhc0ZvcmNlZFJlc29sdmVycykge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5sb2NhbFN0YXRlXG4gICAgICAgICAgICAgICAgICAgIC5ydW5SZXNvbHZlcnMoe1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudDogcXVlcnksXG4gICAgICAgICAgICAgICAgICAgIHJlbW90ZVJlc3VsdDogeyBkYXRhOiBkYXRhIH0sXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQ6IGNvbnRleHQsXG4gICAgICAgICAgICAgICAgICAgIHZhcmlhYmxlczogdmFyaWFibGVzLFxuICAgICAgICAgICAgICAgICAgICBvbmx5UnVuRm9yY2VkUmVzb2x2ZXJzOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNvbHZlZCkgeyByZXR1cm4gZnJvbURhdGEocmVzb2x2ZWQuZGF0YSB8fCB2b2lkIDApOyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFJlc29sdmVzIGh0dHBzOi8vZ2l0aHViLmNvbS9hcG9sbG9ncmFwaHFsL2Fwb2xsby1jbGllbnQvaXNzdWVzLzEwMzE3LlxuICAgICAgICAgICAgLy8gSWYgZXJyb3JQb2xpY3kgaXMgJ25vbmUnIGFuZCBub3RpZnlPbk5ldHdvcmtTdGF0dXNDaGFuZ2UgaXMgdHJ1ZSxcbiAgICAgICAgICAgIC8vIGRhdGEgd2FzIGluY29ycmVjdGx5IHJldHVybmVkIGZyb20gdGhlIGNhY2hlIG9uIHJlZmV0Y2g6XG4gICAgICAgICAgICAvLyBpZiBkaWZmLm1pc3NpbmcgZXhpc3RzLCB3ZSBzaG91bGQgbm90IHJldHVybiBjYWNoZSBkYXRhLlxuICAgICAgICAgICAgaWYgKGVycm9yUG9saWN5ID09PSBcIm5vbmVcIiAmJlxuICAgICAgICAgICAgICAgIG5ldHdvcmtTdGF0dXMgPT09IE5ldHdvcmtTdGF0dXMucmVmZXRjaCAmJlxuICAgICAgICAgICAgICAgIEFycmF5LmlzQXJyYXkoZGlmZi5taXNzaW5nKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmcm9tRGF0YSh2b2lkIDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZyb21EYXRhKGRhdGEpO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgY2FjaGVXcml0ZUJlaGF2aW9yID0gZmV0Y2hQb2xpY3kgPT09IFwibm8tY2FjaGVcIiA/IDAgLyogQ2FjaGVXcml0ZUJlaGF2aW9yLkZPUkJJRCAqL1xuICAgICAgICAgICAgLy8gV2F0Y2hlZCBxdWVyaWVzIG11c3Qgb3B0IGludG8gb3ZlcndyaXRpbmcgZXhpc3RpbmcgZGF0YSBvbiByZWZldGNoLFxuICAgICAgICAgICAgLy8gYnkgcGFzc2luZyByZWZldGNoV3JpdGVQb2xpY3k6IFwib3ZlcndyaXRlXCIgaW4gdGhlaXIgV2F0Y2hRdWVyeU9wdGlvbnMuXG4gICAgICAgICAgICA6IChuZXR3b3JrU3RhdHVzID09PSBOZXR3b3JrU3RhdHVzLnJlZmV0Y2ggJiZcbiAgICAgICAgICAgICAgICByZWZldGNoV3JpdGVQb2xpY3kgIT09IFwibWVyZ2VcIikgP1xuICAgICAgICAgICAgICAgIDEgLyogQ2FjaGVXcml0ZUJlaGF2aW9yLk9WRVJXUklURSAqL1xuICAgICAgICAgICAgICAgIDogMiAvKiBDYWNoZVdyaXRlQmVoYXZpb3IuTUVSR0UgKi87XG4gICAgICAgIHZhciByZXN1bHRzRnJvbUxpbmsgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuZ2V0UmVzdWx0c0Zyb21MaW5rKHF1ZXJ5SW5mbywgY2FjaGVXcml0ZUJlaGF2aW9yLCB7XG4gICAgICAgICAgICAgICAgcXVlcnk6IHF1ZXJ5LFxuICAgICAgICAgICAgICAgIHZhcmlhYmxlczogdmFyaWFibGVzLFxuICAgICAgICAgICAgICAgIGNvbnRleHQ6IGNvbnRleHQsXG4gICAgICAgICAgICAgICAgZmV0Y2hQb2xpY3k6IGZldGNoUG9saWN5LFxuICAgICAgICAgICAgICAgIGVycm9yUG9saWN5OiBlcnJvclBvbGljeSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgc2hvdWxkTm90aWZ5ID0gbm90aWZ5T25OZXR3b3JrU3RhdHVzQ2hhbmdlICYmXG4gICAgICAgICAgICB0eXBlb2Ygb2xkTmV0d29ya1N0YXR1cyA9PT0gXCJudW1iZXJcIiAmJlxuICAgICAgICAgICAgb2xkTmV0d29ya1N0YXR1cyAhPT0gbmV0d29ya1N0YXR1cyAmJlxuICAgICAgICAgICAgaXNOZXR3b3JrUmVxdWVzdEluRmxpZ2h0KG5ldHdvcmtTdGF0dXMpO1xuICAgICAgICBzd2l0Y2ggKGZldGNoUG9saWN5KSB7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgY2FzZSBcImNhY2hlLWZpcnN0XCI6IHtcbiAgICAgICAgICAgICAgICB2YXIgZGlmZiA9IHJlYWRDYWNoZSgpO1xuICAgICAgICAgICAgICAgIGlmIChkaWZmLmNvbXBsZXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmcm9tTGluazogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzOiBbcmVzdWx0c0Zyb21DYWNoZShkaWZmLCBxdWVyeUluZm8ubWFya1JlYWR5KCkpXSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHJldHVyblBhcnRpYWxEYXRhIHx8IHNob3VsZE5vdGlmeSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZnJvbUxpbms6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzOiBbcmVzdWx0c0Zyb21DYWNoZShkaWZmKSwgcmVzdWx0c0Zyb21MaW5rKCldLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4geyBmcm9tTGluazogdHJ1ZSwgc291cmNlczogW3Jlc3VsdHNGcm9tTGluaygpXSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBcImNhY2hlLWFuZC1uZXR3b3JrXCI6IHtcbiAgICAgICAgICAgICAgICB2YXIgZGlmZiA9IHJlYWRDYWNoZSgpO1xuICAgICAgICAgICAgICAgIGlmIChkaWZmLmNvbXBsZXRlIHx8IHJldHVyblBhcnRpYWxEYXRhIHx8IHNob3VsZE5vdGlmeSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZnJvbUxpbms6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzOiBbcmVzdWx0c0Zyb21DYWNoZShkaWZmKSwgcmVzdWx0c0Zyb21MaW5rKCldLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4geyBmcm9tTGluazogdHJ1ZSwgc291cmNlczogW3Jlc3VsdHNGcm9tTGluaygpXSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBcImNhY2hlLW9ubHlcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBmcm9tTGluazogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZXM6IFtyZXN1bHRzRnJvbUNhY2hlKHJlYWRDYWNoZSgpLCBxdWVyeUluZm8ubWFya1JlYWR5KCkpXSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgY2FzZSBcIm5ldHdvcmstb25seVwiOlxuICAgICAgICAgICAgICAgIGlmIChzaG91bGROb3RpZnkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyb21MaW5rOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlczogW3Jlc3VsdHNGcm9tQ2FjaGUocmVhZENhY2hlKCkpLCByZXN1bHRzRnJvbUxpbmsoKV0sXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB7IGZyb21MaW5rOiB0cnVlLCBzb3VyY2VzOiBbcmVzdWx0c0Zyb21MaW5rKCldIH07XG4gICAgICAgICAgICBjYXNlIFwibm8tY2FjaGVcIjpcbiAgICAgICAgICAgICAgICBpZiAoc2hvdWxkTm90aWZ5KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmcm9tTGluazogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vdGUgdGhhdCBxdWVyeUluZm8uZ2V0RGlmZigpIGZvciBuby1jYWNoZSBxdWVyaWVzIGRvZXMgbm90IGNhbGxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhY2hlLmRpZmYsIGJ1dCBpbnN0ZWFkIHJldHVybnMgYSB7IGNvbXBsZXRlOiBmYWxzZSB9IHN0dWIgcmVzdWx0XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB3aGVuIHRoZXJlIGlzIG5vIHF1ZXJ5SW5mby5kaWZmIGFscmVhZHkgZGVmaW5lZC5cbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZXM6IFtyZXN1bHRzRnJvbUNhY2hlKHF1ZXJ5SW5mby5nZXREaWZmKCkpLCByZXN1bHRzRnJvbUxpbmsoKV0sXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB7IGZyb21MaW5rOiB0cnVlLCBzb3VyY2VzOiBbcmVzdWx0c0Zyb21MaW5rKCldIH07XG4gICAgICAgICAgICBjYXNlIFwic3RhbmRieVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiB7IGZyb21MaW5rOiBmYWxzZSwgc291cmNlczogW10gfTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgUXVlcnlNYW5hZ2VyLnByb3RvdHlwZS5nZXRPckNyZWF0ZVF1ZXJ5ID0gZnVuY3Rpb24gKHF1ZXJ5SWQpIHtcbiAgICAgICAgaWYgKHF1ZXJ5SWQgJiYgIXRoaXMucXVlcmllcy5oYXMocXVlcnlJZCkpIHtcbiAgICAgICAgICAgIHRoaXMucXVlcmllcy5zZXQocXVlcnlJZCwgbmV3IFF1ZXJ5SW5mbyh0aGlzLCBxdWVyeUlkKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMucXVlcmllcy5nZXQocXVlcnlJZCk7XG4gICAgfTtcbiAgICBRdWVyeU1hbmFnZXIucHJvdG90eXBlLnByZXBhcmVDb250ZXh0ID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgaWYgKGNvbnRleHQgPT09IHZvaWQgMCkgeyBjb250ZXh0ID0ge307IH1cbiAgICAgICAgdmFyIG5ld0NvbnRleHQgPSB0aGlzLmxvY2FsU3RhdGUucHJlcGFyZUNvbnRleHQoY29udGV4dCk7XG4gICAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbihfX2Fzc2lnbih7fSwgdGhpcy5kZWZhdWx0Q29udGV4dCksIG5ld0NvbnRleHQpLCB7IGNsaWVudEF3YXJlbmVzczogdGhpcy5jbGllbnRBd2FyZW5lc3MgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gUXVlcnlNYW5hZ2VyO1xufSgpKTtcbmV4cG9ydCB7IFF1ZXJ5TWFuYWdlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UXVlcnlNYW5hZ2VyLmpzLm1hcCJdLCJuYW1lcyI6WyJfX2Fzc2lnbiIsIl9fYXdhaXRlciIsIl9fZ2VuZXJhdG9yIiwiaW52YXJpYW50IiwibmV3SW52YXJpYW50RXJyb3IiLCJlcXVhbCIsImV4ZWN1dGUiLCJhZGROb25SZWFjdGl2ZVRvTmFtZWRGcmFnbWVudHMiLCJoYXNEaXJlY3RpdmVzIiwiaXNFeGVjdXRpb25QYXRjaEluY3JlbWVudGFsUmVzdWx0IiwiaXNFeGVjdXRpb25QYXRjaFJlc3VsdCIsImlzRnVsbHlVbm1hc2tlZE9wZXJhdGlvbiIsInJlbW92ZURpcmVjdGl2ZXNGcm9tRG9jdW1lbnQiLCJjYW5vbmljYWxTdHJpbmdpZnkiLCJnZXREZWZhdWx0VmFsdWVzIiwiZ2V0T3BlcmF0aW9uRGVmaW5pdGlvbiIsImdldE9wZXJhdGlvbk5hbWUiLCJoYXNDbGllbnRFeHBvcnRzIiwiZ3JhcGhRTFJlc3VsdEhhc0Vycm9yIiwiZ2V0R3JhcGhRTEVycm9yc0Zyb21SZXN1bHQiLCJPYnNlcnZhYmxlIiwiYXN5bmNNYXAiLCJpc05vbkVtcHR5QXJyYXkiLCJDb25jYXN0IiwibWFrZVVuaXF1ZUlkIiwiaXNEb2N1bWVudE5vZGUiLCJpc05vbk51bGxPYmplY3QiLCJEb2N1bWVudFRyYW5zZm9ybSIsIm1lcmdlSW5jcmVtZW50YWxEYXRhIiwiQXBvbGxvRXJyb3IiLCJpc0Fwb2xsb0Vycm9yIiwiZ3JhcGhRTFJlc3VsdEhhc1Byb3RvY29sRXJyb3JzIiwiT2JzZXJ2YWJsZVF1ZXJ5IiwibG9nTWlzc2luZ0ZpZWxkRXJyb3JzIiwiTmV0d29ya1N0YXR1cyIsImlzTmV0d29ya1JlcXVlc3RJbkZsaWdodCIsIlF1ZXJ5SW5mbyIsInNob3VsZFdyaXRlUmVzdWx0IiwiUFJPVE9DT0xfRVJST1JTX1NZTUJPTCIsInByaW50IiwiaGFzT3duUHJvcGVydHkiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJJR05PUkUiLCJjcmVhdGUiLCJUcmllIiwiQXV0b0NsZWFuZWRXZWFrQ2FjaGUiLCJjYWNoZVNpemVzIiwibWFza0ZyYWdtZW50IiwibWFza09wZXJhdGlvbiIsIm11dGVEZXByZWNhdGlvbnMiLCJRdWVyeU1hbmFnZXIiLCJvcHRpb25zIiwiX3RoaXMiLCJjbGllbnRBd2FyZW5lc3MiLCJxdWVyaWVzIiwiTWFwIiwiZmV0Y2hDYW5jZWxGbnMiLCJ0cmFuc2Zvcm1DYWNoZSIsInF1ZXJ5SWRDb3VudGVyIiwicmVxdWVzdElkQ291bnRlciIsIm11dGF0aW9uSWRDb3VudGVyIiwiaW5GbGlnaHRMaW5rT2JzZXJ2YWJsZXMiLCJub0NhY2hlV2FybmluZ3NCeVF1ZXJ5SWQiLCJTZXQiLCJkZWZhdWx0RG9jdW1lbnRUcmFuc2Zvcm0iLCJkb2N1bWVudCIsImNhY2hlIiwidHJhbnNmb3JtRG9jdW1lbnQiLCJsaW5rIiwiZGVmYXVsdE9wdGlvbnMiLCJxdWVyeURlZHVwbGljYXRpb24iLCJsb2NhbFN0YXRlIiwic3NyTW9kZSIsImFzc3VtZUltbXV0YWJsZVJlc3VsdHMiLCJkYXRhTWFza2luZyIsImRvY3VtZW50VHJhbnNmb3JtIiwiY29uY2F0IiwiZGVmYXVsdENvbnRleHQiLCJvbkJyb2FkY2FzdCIsIm11dGF0aW9uU3RvcmUiLCJzdG9wIiwiZm9yRWFjaCIsIl9pbmZvIiwicXVlcnlJZCIsInN0b3BRdWVyeU5vQnJvYWRjYXN0IiwiY2FuY2VsUGVuZGluZ0ZldGNoZXMiLCJlcnJvciIsImNhbmNlbCIsImNsZWFyIiwibXV0YXRlIiwiX2EiLCJhcmd1bWVudHMiLCJfYiIsIm11dGF0aW9uSWQiLCJtdXRhdGlvblN0b3JlVmFsdWUiLCJpc09wdGltaXN0aWMiLCJzZWxmIiwiX2MiLCJfZCIsIm11dGF0aW9uIiwidmFyaWFibGVzIiwib3B0aW1pc3RpY1Jlc3BvbnNlIiwidXBkYXRlUXVlcmllcyIsIl9lIiwicmVmZXRjaFF1ZXJpZXMiLCJfZiIsImF3YWl0UmVmZXRjaFF1ZXJpZXMiLCJ1cGRhdGVXaXRoUHJveHlGbiIsInVwZGF0ZSIsIm9uUXVlcnlVcGRhdGVkIiwiX2ciLCJmZXRjaFBvbGljeSIsIl9oIiwiZXJyb3JQb2xpY3kiLCJrZWVwUm9vdEZpZWxkcyIsImNvbnRleHQiLCJfaiIsImxhYmVsIiwiZ2VuZXJhdGVNdXRhdGlvbklkIiwidHJhbnNmb3JtRm9yTGluayIsInRyYW5zZm9ybSIsImdldERvY3VtZW50SW5mbyIsImdldFZhcmlhYmxlcyIsImFkZEV4cG9ydGVkVmFyaWFibGVzIiwic2VudCIsImxvYWRpbmciLCJtYXJrTXV0YXRpb25PcHRpbWlzdGljIiwiYnJvYWRjYXN0UXVlcmllcyIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZ2V0T2JzZXJ2YWJsZUZyb21MaW5rIiwicmVzdWx0IiwiZ3JhcGhRTEVycm9ycyIsInN0b3JlUmVzdWx0IiwiZXJyb3JzIiwibWFya011dGF0aW9uUmVzdWx0IiwicmVtb3ZlT3B0aW1pc3RpYyIsInN1YnNjcmliZSIsIm5leHQiLCJoYXNOZXh0IiwiZGF0YSIsImlkIiwiZXJyIiwibmV0d29ya0Vycm9yIiwiY2FjaGVXcml0ZXMiLCJza2lwQ2FjaGUiLCJwdXNoIiwiZGF0YUlkIiwicXVlcnkiLCJpbmNyZW1lbnRhbCIsImRpZmYiLCJhc1F1ZXJ5Iiwib3B0aW1pc3RpYyIsInJldHVyblBhcnRpYWxEYXRhIiwibWVyZ2VkRGF0YSIsInVwZGF0ZVF1ZXJpZXNfMSIsIm9ic2VydmFibGVRdWVyeSIsInF1ZXJ5TmFtZSIsImNhbGwiLCJ1cGRhdGVyIiwiZ2V0IiwiY3VycmVudFF1ZXJ5UmVzdWx0IiwiY29tcGxldGUiLCJuZXh0UXVlcnlSZXN1bHQiLCJtdXRhdGlvblJlc3VsdCIsInF1ZXJ5VmFyaWFibGVzIiwibGVuZ3RoIiwicmVzdWx0c18xIiwidXBkYXRlQ2FjaGUiLCJ3cml0ZSIsImlzRmluYWxSZXN1bHQiLCJtb2RpZnkiLCJmaWVsZHMiLCJ2YWx1ZSIsImZpZWxkTmFtZSIsIkRFTEVURSIsImluY2x1ZGUiLCJhbGwiLCJ0aGVuIiwicmVjb3JkT3B0aW1pc3RpY1RyYW5zYWN0aW9uIiwiZ2xvYmFsVGhpcyIsIl9fREVWX18iLCJmZXRjaFF1ZXJ5IiwibmV0d29ya1N0YXR1cyIsImZldGNoQ29uY2FzdFdpdGhJbmZvIiwiZ2V0T3JDcmVhdGVRdWVyeSIsImNvbmNhc3QiLCJwcm9taXNlIiwiZ2V0UXVlcnlTdG9yZSIsInN0b3JlIiwiaW5mbyIsInJlc2V0RXJyb3JzIiwicXVlcnlJbmZvIiwidW5kZWZpbmVkIiwiaGFzIiwiY2FjaGVFbnRyeSIsImhhc0ZvcmNlZFJlc29sdmVycyIsInNob3VsZEZvcmNlUmVzb2x2ZXJzIiwiaGFzTm9ucmVhY3RpdmVEaXJlY3RpdmUiLCJub25SZWFjdGl2ZVF1ZXJ5IiwiY2xpZW50UXVlcnkiLCJzZXJ2ZXJRdWVyeSIsIm5hbWUiLCJyZW1vdmUiLCJkZWZhdWx0VmFycyIsImRlZmluaXRpb25zIiwibWFwIiwiZGVmIiwia2luZCIsIm9wZXJhdGlvbiIsInNldCIsIndhdGNoUXVlcnkiLCJub3RpZnlPbk5ldHdvcmtTdGF0dXNDaGFuZ2UiLCJvYnNlcnZhYmxlIiwicXVlcnlNYW5hZ2VyIiwiZ2V0VmFsdWUiLCJpbml0IiwiZ2VuZXJhdGVRdWVyeUlkIiwicG9sbEludGVydmFsIiwiZmluYWxseSIsInN0b3BRdWVyeSIsIlN0cmluZyIsImdlbmVyYXRlUmVxdWVzdElkIiwic3RvcFF1ZXJ5SW5TdG9yZSIsInN0b3BRdWVyeUluU3RvcmVOb0Jyb2FkY2FzdCIsImNsZWFyU3RvcmUiLCJkaXNjYXJkV2F0Y2hlcyIsInJlc2V0IiwiZ2V0T2JzZXJ2YWJsZVF1ZXJpZXMiLCJxdWVyeU5hbWVzIiwicXVlcnlOYW1lc0FuZFF1ZXJ5U3RyaW5ncyIsImxlZ2FjeVF1ZXJ5T3B0aW9ucyIsIkFycmF5IiwiaXNBcnJheSIsImRlc2MiLCJxdWVyeVN0cmluZyIsImFkZCIsIm9xIiwiaGFzT2JzZXJ2ZXJzIiwic2l6ZSIsInNldE9ic2VydmFibGVRdWVyeSIsImluY2x1ZGVkIiwibmFtZU9yUXVlcnlTdHJpbmciLCJ3YXJuIiwicmVGZXRjaE9ic2VydmFibGVRdWVyaWVzIiwiaW5jbHVkZVN0YW5kYnkiLCJvYnNlcnZhYmxlUXVlcnlQcm9taXNlcyIsInJlc2V0TGFzdFJlc3VsdHMiLCJyZWZldGNoIiwic2V0RGlmZiIsInN0YXJ0R3JhcGhRTFN1YnNjcmlwdGlvbiIsImV4dGVuc2lvbnMiLCJtYWtlT2JzZXJ2YWJsZSIsImhhc0Vycm9ycyIsImhhc1Byb3RvY29sRXJyb3JzIiwicHJvdG9jb2xFcnJvcnMiLCJvYnNlcnZhYmxlUHJvbWlzZV8xIiwib2JzZXJ2ZXIiLCJzdWIiLCJ1bnN1YnNjcmliZSIsInJlbW92ZVF1ZXJ5IiwiZGVsZXRlIiwiZ2V0TG9jYWxTdGF0ZSIsImRlZHVwbGljYXRpb24iLCJpbkZsaWdodExpbmtPYnNlcnZhYmxlc18xIiwib3BlcmF0aW9uTmFtZSIsInByZXBhcmVDb250ZXh0IiwiZm9yY2VGZXRjaCIsInByaW50ZWRTZXJ2ZXJRdWVyeV8xIiwidmFySnNvbl8xIiwiZW50cnkiLCJsb29rdXAiLCJjb25jYXN0XzEiLCJiZWZvcmVOZXh0IiwiY2IiLCJtZXRob2QiLCJhcmciLCJvZiIsInJ1blJlc29sdmVycyIsInJlbW90ZVJlc3VsdCIsImdldFJlc3VsdHNGcm9tTGluayIsImNhY2hlV3JpdGVCZWhhdmlvciIsInJlcXVlc3RJZCIsImxhc3RSZXF1ZXN0SWQiLCJsaW5rRG9jdW1lbnQiLCJtYXJrRXJyb3IiLCJtYXJrUmVzdWx0IiwibWFya1JlYWR5IiwiYXFyIiwicmVhZHkiLCJkZWZhdWx0cyIsIm5vcm1hbGl6ZWQiLCJhc3NpZ24iLCJmcm9tVmFyaWFibGVzIiwic291cmNlc1dpdGhJbmZvIiwiZmV0Y2hRdWVyeUJ5UG9saWN5Iiwic291cmNlcyIsImNsZWFudXBDYW5jZWxGbiIsInJlYXNvbiIsInNldFRpbWVvdXQiLCJjb250YWluc0RhdGFGcm9tTGluayIsImZyb21MaW5rIiwiaW5jbHVkZWRRdWVyaWVzQnlJZCIsImxhc3REaWZmIiwiZ2V0RGlmZiIsInJlc3VsdHMiLCJiYXRjaCIsIm9uV2F0Y2hVcGRhdGVkIiwid2F0Y2giLCJ3YXRjaGVyIiwiaW5kZXhPZiIsIm9wZXJhdGlvblR5cGUiLCJvcGVyYXRpb25JZCIsImZyYWdtZW50IiwiZnJhZ21lbnROYW1lIiwicmVmZXRjaFdyaXRlUG9saWN5Iiwib2xkTmV0d29ya1N0YXR1cyIsInJlYWRDYWNoZSIsInJlc3VsdHNGcm9tQ2FjaGUiLCJtaXNzaW5nIiwiZnJvbURhdGEiLCJwYXJ0aWFsIiwib25seVJ1bkZvcmNlZFJlc29sdmVycyIsInJlc29sdmVkIiwicmVzdWx0c0Zyb21MaW5rIiwic2hvdWxkTm90aWZ5IiwibmV3Q29udGV4dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/core/QueryManager.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/core/equalByQuery.js":
/*!**********************************************************!*\
  !*** ./node_modules/@apollo/client/core/equalByQuery.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   equalByQuery: () => (/* binding */ equalByQuery)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wry/equality */ \"(ssr)/./node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/fragments.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/directives.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n\n\n\n// Returns true if aResult and bResult are deeply equal according to the fields\n// selected by the given query, ignoring any fields marked as @nonreactive.\nfunction equalByQuery(query, _a, _b, variables) {\n    var aData = _a.data, aRest = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__rest)(_a, [\n        \"data\"\n    ]);\n    var bData = _b.data, bRest = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__rest)(_b, [\n        \"data\"\n    ]);\n    return (0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(aRest, bRest) && equalBySelectionSet((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.getMainDefinition)(query).selectionSet, aData, bData, {\n        fragmentMap: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.createFragmentMap)((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.getFragmentDefinitions)(query)),\n        variables: variables\n    });\n}\nfunction equalBySelectionSet(selectionSet, aResult, bResult, context) {\n    if (aResult === bResult) {\n        return true;\n    }\n    var seenSelections = new Set();\n    // Returning true from this Array.prototype.every callback function skips the\n    // current field/subtree. Returning false aborts the entire traversal\n    // immediately, causing equalBySelectionSet to return false.\n    return selectionSet.selections.every(function(selection) {\n        // Avoid re-processing the same selection at the same level of recursion, in\n        // case the same field gets included via multiple indirect fragment spreads.\n        if (seenSelections.has(selection)) return true;\n        seenSelections.add(selection);\n        // Ignore @skip(if: true) and @include(if: false) fields.\n        if (!(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.shouldInclude)(selection, context.variables)) return true;\n        // If the field or (named) fragment spread has a @nonreactive directive on\n        // it, we don't care if it's different, so we pretend it's the same.\n        if (selectionHasNonreactiveDirective(selection)) return true;\n        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isField)(selection)) {\n            var resultKey = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.resultKeyNameFromField)(selection);\n            var aResultChild = aResult && aResult[resultKey];\n            var bResultChild = bResult && bResult[resultKey];\n            var childSelectionSet = selection.selectionSet;\n            if (!childSelectionSet) {\n                // These are scalar values, so we can compare them with deep equal\n                // without redoing the main recursive work.\n                return (0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(aResultChild, bResultChild);\n            }\n            var aChildIsArray = Array.isArray(aResultChild);\n            var bChildIsArray = Array.isArray(bResultChild);\n            if (aChildIsArray !== bChildIsArray) return false;\n            if (aChildIsArray && bChildIsArray) {\n                var length_1 = aResultChild.length;\n                if (bResultChild.length !== length_1) {\n                    return false;\n                }\n                for(var i = 0; i < length_1; ++i){\n                    if (!equalBySelectionSet(childSelectionSet, aResultChild[i], bResultChild[i], context)) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n            return equalBySelectionSet(childSelectionSet, aResultChild, bResultChild, context);\n        } else {\n            var fragment = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.getFragmentFromSelection)(selection, context.fragmentMap);\n            if (fragment) {\n                // The fragment might === selection if it's an inline fragment, but\n                // could be !== if it's a named fragment ...spread.\n                if (selectionHasNonreactiveDirective(fragment)) return true;\n                return equalBySelectionSet(fragment.selectionSet, // Notice that we reuse the same aResult and bResult values here,\n                // since the fragment ...spread does not specify a field name, but\n                // consists of multiple fields (within the fragment's selection set)\n                // that should be applied to the current result value(s).\n                aResult, bResult, context);\n            }\n        }\n    });\n}\nfunction selectionHasNonreactiveDirective(selection) {\n    return !!selection.directives && selection.directives.some(directiveIsNonreactive);\n}\nfunction directiveIsNonreactive(dir) {\n    return dir.name.value === \"nonreactive\";\n} //# sourceMappingURL=equalByQuery.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/core/equalByQuery.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/core/networkStatus.js":
/*!***********************************************************!*\
  !*** ./node_modules/@apollo/client/core/networkStatus.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NetworkStatus: () => (/* binding */ NetworkStatus),\n/* harmony export */   isNetworkRequestInFlight: () => (/* binding */ isNetworkRequestInFlight),\n/* harmony export */   isNetworkRequestSettled: () => (/* binding */ isNetworkRequestSettled)\n/* harmony export */ });\n/**\n * The current status of a query’s execution in our system.\n */ var NetworkStatus;\n(function(NetworkStatus) {\n    /**\n     * The query has never been run before and the query is now currently running. A query will still\n     * have this network status even if a partial data result was returned from the cache, but a\n     * query was dispatched anyway.\n     */ NetworkStatus[NetworkStatus[\"loading\"] = 1] = \"loading\";\n    /**\n     * If `setVariables` was called and a query was fired because of that then the network status\n     * will be `setVariables` until the result of that query comes back.\n     */ NetworkStatus[NetworkStatus[\"setVariables\"] = 2] = \"setVariables\";\n    /**\n     * Indicates that `fetchMore` was called on this query and that the query created is currently in\n     * flight.\n     */ NetworkStatus[NetworkStatus[\"fetchMore\"] = 3] = \"fetchMore\";\n    /**\n     * Similar to the `setVariables` network status. It means that `refetch` was called on a query\n     * and the refetch request is currently in flight.\n     */ NetworkStatus[NetworkStatus[\"refetch\"] = 4] = \"refetch\";\n    /**\n     * Indicates that a polling query is currently in flight. So for example if you are polling a\n     * query every 10 seconds then the network status will switch to `poll` every 10 seconds whenever\n     * a poll request has been sent but not resolved.\n     */ NetworkStatus[NetworkStatus[\"poll\"] = 6] = \"poll\";\n    /**\n     * No request is in flight for this query, and no errors happened. Everything is OK.\n     */ NetworkStatus[NetworkStatus[\"ready\"] = 7] = \"ready\";\n    /**\n     * No request is in flight for this query, but one or more errors were detected.\n     */ NetworkStatus[NetworkStatus[\"error\"] = 8] = \"error\";\n})(NetworkStatus || (NetworkStatus = {}));\n/**\n * Returns true if there is currently a network request in flight according to a given network\n * status.\n */ function isNetworkRequestInFlight(networkStatus) {\n    return networkStatus ? networkStatus < 7 : false;\n}\n/**\n * Returns true if the network request is in ready or error state according to a given network\n * status.\n */ function isNetworkRequestSettled(networkStatus) {\n    return networkStatus === 7 || networkStatus === 8;\n} //# sourceMappingURL=networkStatus.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvY29yZS9uZXR3b3JrU3RhdHVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOztDQUVDLEdBQ00sSUFBSUEsY0FBYztBQUN4QixVQUFVQSxhQUFhO0lBQ3BCOzs7O0tBSUMsR0FDREEsYUFBYSxDQUFDQSxhQUFhLENBQUMsVUFBVSxHQUFHLEVBQUUsR0FBRztJQUM5Qzs7O0tBR0MsR0FDREEsYUFBYSxDQUFDQSxhQUFhLENBQUMsZUFBZSxHQUFHLEVBQUUsR0FBRztJQUNuRDs7O0tBR0MsR0FDREEsYUFBYSxDQUFDQSxhQUFhLENBQUMsWUFBWSxHQUFHLEVBQUUsR0FBRztJQUNoRDs7O0tBR0MsR0FDREEsYUFBYSxDQUFDQSxhQUFhLENBQUMsVUFBVSxHQUFHLEVBQUUsR0FBRztJQUM5Qzs7OztLQUlDLEdBQ0RBLGFBQWEsQ0FBQ0EsYUFBYSxDQUFDLE9BQU8sR0FBRyxFQUFFLEdBQUc7SUFDM0M7O0tBRUMsR0FDREEsYUFBYSxDQUFDQSxhQUFhLENBQUMsUUFBUSxHQUFHLEVBQUUsR0FBRztJQUM1Qzs7S0FFQyxHQUNEQSxhQUFhLENBQUNBLGFBQWEsQ0FBQyxRQUFRLEdBQUcsRUFBRSxHQUFHO0FBQ2hELEdBQUdBLGlCQUFrQkEsQ0FBQUEsZ0JBQWdCLENBQUM7QUFDdEM7OztDQUdDLEdBQ00sU0FBU0MseUJBQXlCQyxhQUFhO0lBQ2xELE9BQU9BLGdCQUFnQkEsZ0JBQWdCLElBQUk7QUFDL0M7QUFDQTs7O0NBR0MsR0FDTSxTQUFTQyx3QkFBd0JELGFBQWE7SUFDakQsT0FBT0Esa0JBQWtCLEtBQUtBLGtCQUFrQjtBQUNwRCxFQUNBLHlDQUF5QyIsInNvdXJjZXMiOlsid2VicGFjazovL3NsYWNrLWdyYXBocWwtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvY29yZS9uZXR3b3JrU3RhdHVzLmpzPzAyZDEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGUgY3VycmVudCBzdGF0dXMgb2YgYSBxdWVyeeKAmXMgZXhlY3V0aW9uIGluIG91ciBzeXN0ZW0uXG4gKi9cbmV4cG9ydCB2YXIgTmV0d29ya1N0YXR1cztcbihmdW5jdGlvbiAoTmV0d29ya1N0YXR1cykge1xuICAgIC8qKlxuICAgICAqIFRoZSBxdWVyeSBoYXMgbmV2ZXIgYmVlbiBydW4gYmVmb3JlIGFuZCB0aGUgcXVlcnkgaXMgbm93IGN1cnJlbnRseSBydW5uaW5nLiBBIHF1ZXJ5IHdpbGwgc3RpbGxcbiAgICAgKiBoYXZlIHRoaXMgbmV0d29yayBzdGF0dXMgZXZlbiBpZiBhIHBhcnRpYWwgZGF0YSByZXN1bHQgd2FzIHJldHVybmVkIGZyb20gdGhlIGNhY2hlLCBidXQgYVxuICAgICAqIHF1ZXJ5IHdhcyBkaXNwYXRjaGVkIGFueXdheS5cbiAgICAgKi9cbiAgICBOZXR3b3JrU3RhdHVzW05ldHdvcmtTdGF0dXNbXCJsb2FkaW5nXCJdID0gMV0gPSBcImxvYWRpbmdcIjtcbiAgICAvKipcbiAgICAgKiBJZiBgc2V0VmFyaWFibGVzYCB3YXMgY2FsbGVkIGFuZCBhIHF1ZXJ5IHdhcyBmaXJlZCBiZWNhdXNlIG9mIHRoYXQgdGhlbiB0aGUgbmV0d29yayBzdGF0dXNcbiAgICAgKiB3aWxsIGJlIGBzZXRWYXJpYWJsZXNgIHVudGlsIHRoZSByZXN1bHQgb2YgdGhhdCBxdWVyeSBjb21lcyBiYWNrLlxuICAgICAqL1xuICAgIE5ldHdvcmtTdGF0dXNbTmV0d29ya1N0YXR1c1tcInNldFZhcmlhYmxlc1wiXSA9IDJdID0gXCJzZXRWYXJpYWJsZXNcIjtcbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgdGhhdCBgZmV0Y2hNb3JlYCB3YXMgY2FsbGVkIG9uIHRoaXMgcXVlcnkgYW5kIHRoYXQgdGhlIHF1ZXJ5IGNyZWF0ZWQgaXMgY3VycmVudGx5IGluXG4gICAgICogZmxpZ2h0LlxuICAgICAqL1xuICAgIE5ldHdvcmtTdGF0dXNbTmV0d29ya1N0YXR1c1tcImZldGNoTW9yZVwiXSA9IDNdID0gXCJmZXRjaE1vcmVcIjtcbiAgICAvKipcbiAgICAgKiBTaW1pbGFyIHRvIHRoZSBgc2V0VmFyaWFibGVzYCBuZXR3b3JrIHN0YXR1cy4gSXQgbWVhbnMgdGhhdCBgcmVmZXRjaGAgd2FzIGNhbGxlZCBvbiBhIHF1ZXJ5XG4gICAgICogYW5kIHRoZSByZWZldGNoIHJlcXVlc3QgaXMgY3VycmVudGx5IGluIGZsaWdodC5cbiAgICAgKi9cbiAgICBOZXR3b3JrU3RhdHVzW05ldHdvcmtTdGF0dXNbXCJyZWZldGNoXCJdID0gNF0gPSBcInJlZmV0Y2hcIjtcbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgdGhhdCBhIHBvbGxpbmcgcXVlcnkgaXMgY3VycmVudGx5IGluIGZsaWdodC4gU28gZm9yIGV4YW1wbGUgaWYgeW91IGFyZSBwb2xsaW5nIGFcbiAgICAgKiBxdWVyeSBldmVyeSAxMCBzZWNvbmRzIHRoZW4gdGhlIG5ldHdvcmsgc3RhdHVzIHdpbGwgc3dpdGNoIHRvIGBwb2xsYCBldmVyeSAxMCBzZWNvbmRzIHdoZW5ldmVyXG4gICAgICogYSBwb2xsIHJlcXVlc3QgaGFzIGJlZW4gc2VudCBidXQgbm90IHJlc29sdmVkLlxuICAgICAqL1xuICAgIE5ldHdvcmtTdGF0dXNbTmV0d29ya1N0YXR1c1tcInBvbGxcIl0gPSA2XSA9IFwicG9sbFwiO1xuICAgIC8qKlxuICAgICAqIE5vIHJlcXVlc3QgaXMgaW4gZmxpZ2h0IGZvciB0aGlzIHF1ZXJ5LCBhbmQgbm8gZXJyb3JzIGhhcHBlbmVkLiBFdmVyeXRoaW5nIGlzIE9LLlxuICAgICAqL1xuICAgIE5ldHdvcmtTdGF0dXNbTmV0d29ya1N0YXR1c1tcInJlYWR5XCJdID0gN10gPSBcInJlYWR5XCI7XG4gICAgLyoqXG4gICAgICogTm8gcmVxdWVzdCBpcyBpbiBmbGlnaHQgZm9yIHRoaXMgcXVlcnksIGJ1dCBvbmUgb3IgbW9yZSBlcnJvcnMgd2VyZSBkZXRlY3RlZC5cbiAgICAgKi9cbiAgICBOZXR3b3JrU3RhdHVzW05ldHdvcmtTdGF0dXNbXCJlcnJvclwiXSA9IDhdID0gXCJlcnJvclwiO1xufSkoTmV0d29ya1N0YXR1cyB8fCAoTmV0d29ya1N0YXR1cyA9IHt9KSk7XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGVyZSBpcyBjdXJyZW50bHkgYSBuZXR3b3JrIHJlcXVlc3QgaW4gZmxpZ2h0IGFjY29yZGluZyB0byBhIGdpdmVuIG5ldHdvcmtcbiAqIHN0YXR1cy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzTmV0d29ya1JlcXVlc3RJbkZsaWdodChuZXR3b3JrU3RhdHVzKSB7XG4gICAgcmV0dXJuIG5ldHdvcmtTdGF0dXMgPyBuZXR3b3JrU3RhdHVzIDwgNyA6IGZhbHNlO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIG5ldHdvcmsgcmVxdWVzdCBpcyBpbiByZWFkeSBvciBlcnJvciBzdGF0ZSBhY2NvcmRpbmcgdG8gYSBnaXZlbiBuZXR3b3JrXG4gKiBzdGF0dXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc05ldHdvcmtSZXF1ZXN0U2V0dGxlZChuZXR3b3JrU3RhdHVzKSB7XG4gICAgcmV0dXJuIG5ldHdvcmtTdGF0dXMgPT09IDcgfHwgbmV0d29ya1N0YXR1cyA9PT0gODtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5ldHdvcmtTdGF0dXMuanMubWFwIl0sIm5hbWVzIjpbIk5ldHdvcmtTdGF0dXMiLCJpc05ldHdvcmtSZXF1ZXN0SW5GbGlnaHQiLCJuZXR3b3JrU3RhdHVzIiwiaXNOZXR3b3JrUmVxdWVzdFNldHRsZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/core/networkStatus.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/errors/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@apollo/client/errors/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApolloError: () => (/* binding */ ApolloError),\n/* harmony export */   PROTOCOL_ERRORS_SYMBOL: () => (/* binding */ PROTOCOL_ERRORS_SYMBOL),\n/* harmony export */   graphQLResultHasProtocolErrors: () => (/* binding */ graphQLResultHasProtocolErrors),\n/* harmony export */   isApolloError: () => (/* binding */ isApolloError)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/objects.js\");\n\n\n\n// This Symbol allows us to pass transport-specific errors from the link chain\n// into QueryManager/client internals without risking a naming collision within\n// extensions (which implementers can use as they see fit).\nvar PROTOCOL_ERRORS_SYMBOL = Symbol();\nfunction graphQLResultHasProtocolErrors(result) {\n    if (result.extensions) {\n        return Array.isArray(result.extensions[PROTOCOL_ERRORS_SYMBOL]);\n    }\n    return false;\n}\n/**\n * @deprecated `isApolloError` will be removed with Apollo Client 4.0. This\n * function is safe to use in Apollo Client 3.x.\n *\n * **Recommended now**\n *\n * No action needed\n *\n * **When migrating**\n *\n * Errors are no longer wrapped in Apollo Client 4.0. To check if an error is an\n * instance of an error provided by Apollo Client, use the static `.is` method\n * on the error class you want to test against.\n *\n * ```ts\n * // Test if an error is an instance of `CombinedGraphQLErrors`\n * const isGraphQLErrors = CombinedGraphQLErrors.is(error);\n * ```\n */ function isApolloError(err) {\n    return err.hasOwnProperty(\"graphQLErrors\");\n}\n// Sets the error message on this error according to the\n// the GraphQL and network errors that are present.\n// If the error message has already been set through the\n// constructor or otherwise, this function is a nop.\nvar generateErrorMessage = function(err) {\n    var errors = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([], err.graphQLErrors, true), err.clientErrors, true), err.protocolErrors, true);\n    if (err.networkError) errors.push(err.networkError);\n    return errors// The rest of the code sometimes unsafely types non-Error objects as GraphQLErrors\n    .map(function(err) {\n        return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.isNonNullObject)(err) && err.message || \"Error message not found.\";\n    }).join(\"\\n\");\n};\nvar ApolloError = /** @class */ function(_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__extends)(ApolloError, _super);\n    // Constructs an instance of ApolloError given serialized GraphQL errors,\n    // client errors, protocol errors or network errors.\n    // Note that one of these has to be a valid\n    // value or the constructed error will be meaningless.\n    function ApolloError(_a) {\n        var graphQLErrors = _a.graphQLErrors, protocolErrors = _a.protocolErrors, clientErrors = _a.clientErrors, networkError = _a.networkError, errorMessage = _a.errorMessage, extraInfo = _a.extraInfo;\n        var _this = _super.call(this, errorMessage) || this;\n        _this.name = \"ApolloError\";\n        _this.graphQLErrors = graphQLErrors || [];\n        _this.protocolErrors = protocolErrors || [];\n        _this.clientErrors = clientErrors || [];\n        _this.networkError = networkError || null;\n        _this.message = errorMessage || generateErrorMessage(_this);\n        _this.extraInfo = extraInfo;\n        _this.cause = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([\n            networkError\n        ], graphQLErrors || [], true), protocolErrors || [], true), clientErrors || [], true).find(function(e) {\n            return !!e;\n        }) || null;\n        // We're not using `Object.setPrototypeOf` here as it isn't fully\n        // supported on Android (see issue #3236).\n        _this.__proto__ = ApolloError.prototype;\n        return _this;\n    }\n    return ApolloError;\n}(Error);\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvZXJyb3JzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBaUQ7QUFDVjtBQUNpQjtBQUN4RCw4RUFBOEU7QUFDOUUsK0VBQStFO0FBQy9FLDJEQUEyRDtBQUNwRCxJQUFJRyx5QkFBeUJDLFNBQVM7QUFDdEMsU0FBU0MsK0JBQStCQyxNQUFNO0lBQ2pELElBQUlBLE9BQU9DLFVBQVUsRUFBRTtRQUNuQixPQUFPQyxNQUFNQyxPQUFPLENBQUNILE9BQU9DLFVBQVUsQ0FBQ0osdUJBQXVCO0lBQ2xFO0lBQ0EsT0FBTztBQUNYO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQWtCQyxHQUNNLFNBQVNPLGNBQWNDLEdBQUc7SUFDN0IsT0FBT0EsSUFBSUMsY0FBYyxDQUFDO0FBQzlCO0FBQ0Esd0RBQXdEO0FBQ3hELG1EQUFtRDtBQUNuRCx3REFBd0Q7QUFDeEQsb0RBQW9EO0FBQ3BELElBQUlDLHVCQUF1QixTQUFVRixHQUFHO0lBQ3BDLElBQUlHLFNBQVNiLG9EQUFhQSxDQUFDQSxvREFBYUEsQ0FBQ0Esb0RBQWFBLENBQUMsRUFBRSxFQUFFVSxJQUFJSSxhQUFhLEVBQUUsT0FBT0osSUFBSUssWUFBWSxFQUFFLE9BQU9MLElBQUlNLGNBQWMsRUFBRTtJQUNsSSxJQUFJTixJQUFJTyxZQUFZLEVBQ2hCSixPQUFPSyxJQUFJLENBQUNSLElBQUlPLFlBQVk7SUFDaEMsT0FBUUosTUFDSixtRkFBbUY7S0FDbEZNLEdBQUcsQ0FBQyxTQUFVVCxHQUFHO1FBQ2xCLE9BQU8scUVBQWlCQSxRQUFRQSxJQUFJVSxPQUFPLElBQUs7SUFDcEQsR0FDS0MsSUFBSSxDQUFDO0FBQ2Q7QUFDQSxJQUFJQyxjQUFjLFdBQVcsR0FBSSxTQUFVQyxNQUFNO0lBQzdDeEIsZ0RBQVNBLENBQUN1QixhQUFhQztJQUN2Qix5RUFBeUU7SUFDekUsb0RBQW9EO0lBQ3BELDJDQUEyQztJQUMzQyxzREFBc0Q7SUFDdEQsU0FBU0QsWUFBWUUsRUFBRTtRQUNuQixJQUFJVixnQkFBZ0JVLEdBQUdWLGFBQWEsRUFBRUUsaUJBQWlCUSxHQUFHUixjQUFjLEVBQUVELGVBQWVTLEdBQUdULFlBQVksRUFBRUUsZUFBZU8sR0FBR1AsWUFBWSxFQUFFUSxlQUFlRCxHQUFHQyxZQUFZLEVBQUVDLFlBQVlGLEdBQUdFLFNBQVM7UUFDbE0sSUFBSUMsUUFBUUosT0FBT0ssSUFBSSxDQUFDLElBQUksRUFBRUgsaUJBQWlCLElBQUk7UUFDbkRFLE1BQU1FLElBQUksR0FBRztRQUNiRixNQUFNYixhQUFhLEdBQUdBLGlCQUFpQixFQUFFO1FBQ3pDYSxNQUFNWCxjQUFjLEdBQUdBLGtCQUFrQixFQUFFO1FBQzNDVyxNQUFNWixZQUFZLEdBQUdBLGdCQUFnQixFQUFFO1FBQ3ZDWSxNQUFNVixZQUFZLEdBQUdBLGdCQUFnQjtRQUNyQ1UsTUFBTVAsT0FBTyxHQUFHSyxnQkFBZ0JiLHFCQUFxQmU7UUFDckRBLE1BQU1ELFNBQVMsR0FBR0E7UUFDbEJDLE1BQU1HLEtBQUssR0FDUDlCLG9EQUFhQSxDQUFDQSxvREFBYUEsQ0FBQ0Esb0RBQWFBLENBQUM7WUFDdENpQjtTQUNILEVBQUdILGlCQUFpQixFQUFFLEVBQUcsT0FBUUUsa0JBQWtCLEVBQUUsRUFBRyxPQUFRRCxnQkFBZ0IsRUFBRSxFQUFHLE1BQU1nQixJQUFJLENBQUMsU0FBVUMsQ0FBQztZQUFJLE9BQU8sQ0FBQyxDQUFDQTtRQUFHLE1BQU07UUFDdEksaUVBQWlFO1FBQ2pFLDBDQUEwQztRQUMxQ0wsTUFBTU0sU0FBUyxHQUFHWCxZQUFZWSxTQUFTO1FBQ3ZDLE9BQU9QO0lBQ1g7SUFDQSxPQUFPTDtBQUNYLEVBQUVhO0FBQ3FCLENBQ3ZCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3NsYWNrLWdyYXBocWwtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvZXJyb3JzL2luZGV4LmpzPzI5NTkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX19leHRlbmRzLCBfX3NwcmVhZEFycmF5IH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgXCIuLi91dGlsaXRpZXMvZ2xvYmFscy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgaXNOb25OdWxsT2JqZWN0IH0gZnJvbSBcIi4uL3V0aWxpdGllcy9pbmRleC5qc1wiO1xuLy8gVGhpcyBTeW1ib2wgYWxsb3dzIHVzIHRvIHBhc3MgdHJhbnNwb3J0LXNwZWNpZmljIGVycm9ycyBmcm9tIHRoZSBsaW5rIGNoYWluXG4vLyBpbnRvIFF1ZXJ5TWFuYWdlci9jbGllbnQgaW50ZXJuYWxzIHdpdGhvdXQgcmlza2luZyBhIG5hbWluZyBjb2xsaXNpb24gd2l0aGluXG4vLyBleHRlbnNpb25zICh3aGljaCBpbXBsZW1lbnRlcnMgY2FuIHVzZSBhcyB0aGV5IHNlZSBmaXQpLlxuZXhwb3J0IHZhciBQUk9UT0NPTF9FUlJPUlNfU1lNQk9MID0gU3ltYm9sKCk7XG5leHBvcnQgZnVuY3Rpb24gZ3JhcGhRTFJlc3VsdEhhc1Byb3RvY29sRXJyb3JzKHJlc3VsdCkge1xuICAgIGlmIChyZXN1bHQuZXh0ZW5zaW9ucykge1xuICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheShyZXN1bHQuZXh0ZW5zaW9uc1tQUk9UT0NPTF9FUlJPUlNfU1lNQk9MXSk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbi8qKlxuICogQGRlcHJlY2F0ZWQgYGlzQXBvbGxvRXJyb3JgIHdpbGwgYmUgcmVtb3ZlZCB3aXRoIEFwb2xsbyBDbGllbnQgNC4wLiBUaGlzXG4gKiBmdW5jdGlvbiBpcyBzYWZlIHRvIHVzZSBpbiBBcG9sbG8gQ2xpZW50IDMueC5cbiAqXG4gKiAqKlJlY29tbWVuZGVkIG5vdyoqXG4gKlxuICogTm8gYWN0aW9uIG5lZWRlZFxuICpcbiAqICoqV2hlbiBtaWdyYXRpbmcqKlxuICpcbiAqIEVycm9ycyBhcmUgbm8gbG9uZ2VyIHdyYXBwZWQgaW4gQXBvbGxvIENsaWVudCA0LjAuIFRvIGNoZWNrIGlmIGFuIGVycm9yIGlzIGFuXG4gKiBpbnN0YW5jZSBvZiBhbiBlcnJvciBwcm92aWRlZCBieSBBcG9sbG8gQ2xpZW50LCB1c2UgdGhlIHN0YXRpYyBgLmlzYCBtZXRob2RcbiAqIG9uIHRoZSBlcnJvciBjbGFzcyB5b3Ugd2FudCB0byB0ZXN0IGFnYWluc3QuXG4gKlxuICogYGBgdHNcbiAqIC8vIFRlc3QgaWYgYW4gZXJyb3IgaXMgYW4gaW5zdGFuY2Ugb2YgYENvbWJpbmVkR3JhcGhRTEVycm9yc2BcbiAqIGNvbnN0IGlzR3JhcGhRTEVycm9ycyA9IENvbWJpbmVkR3JhcGhRTEVycm9ycy5pcyhlcnJvcik7XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzQXBvbGxvRXJyb3IoZXJyKSB7XG4gICAgcmV0dXJuIGVyci5oYXNPd25Qcm9wZXJ0eShcImdyYXBoUUxFcnJvcnNcIik7XG59XG4vLyBTZXRzIHRoZSBlcnJvciBtZXNzYWdlIG9uIHRoaXMgZXJyb3IgYWNjb3JkaW5nIHRvIHRoZVxuLy8gdGhlIEdyYXBoUUwgYW5kIG5ldHdvcmsgZXJyb3JzIHRoYXQgYXJlIHByZXNlbnQuXG4vLyBJZiB0aGUgZXJyb3IgbWVzc2FnZSBoYXMgYWxyZWFkeSBiZWVuIHNldCB0aHJvdWdoIHRoZVxuLy8gY29uc3RydWN0b3Igb3Igb3RoZXJ3aXNlLCB0aGlzIGZ1bmN0aW9uIGlzIGEgbm9wLlxudmFyIGdlbmVyYXRlRXJyb3JNZXNzYWdlID0gZnVuY3Rpb24gKGVycikge1xuICAgIHZhciBlcnJvcnMgPSBfX3NwcmVhZEFycmF5KF9fc3ByZWFkQXJyYXkoX19zcHJlYWRBcnJheShbXSwgZXJyLmdyYXBoUUxFcnJvcnMsIHRydWUpLCBlcnIuY2xpZW50RXJyb3JzLCB0cnVlKSwgZXJyLnByb3RvY29sRXJyb3JzLCB0cnVlKTtcbiAgICBpZiAoZXJyLm5ldHdvcmtFcnJvcilcbiAgICAgICAgZXJyb3JzLnB1c2goZXJyLm5ldHdvcmtFcnJvcik7XG4gICAgcmV0dXJuIChlcnJvcnNcbiAgICAgICAgLy8gVGhlIHJlc3Qgb2YgdGhlIGNvZGUgc29tZXRpbWVzIHVuc2FmZWx5IHR5cGVzIG5vbi1FcnJvciBvYmplY3RzIGFzIEdyYXBoUUxFcnJvcnNcbiAgICAgICAgLm1hcChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHJldHVybiAoaXNOb25OdWxsT2JqZWN0KGVycikgJiYgZXJyLm1lc3NhZ2UpIHx8IFwiRXJyb3IgbWVzc2FnZSBub3QgZm91bmQuXCI7XG4gICAgfSlcbiAgICAgICAgLmpvaW4oXCJcXG5cIikpO1xufTtcbnZhciBBcG9sbG9FcnJvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQXBvbGxvRXJyb3IsIF9zdXBlcik7XG4gICAgLy8gQ29uc3RydWN0cyBhbiBpbnN0YW5jZSBvZiBBcG9sbG9FcnJvciBnaXZlbiBzZXJpYWxpemVkIEdyYXBoUUwgZXJyb3JzLFxuICAgIC8vIGNsaWVudCBlcnJvcnMsIHByb3RvY29sIGVycm9ycyBvciBuZXR3b3JrIGVycm9ycy5cbiAgICAvLyBOb3RlIHRoYXQgb25lIG9mIHRoZXNlIGhhcyB0byBiZSBhIHZhbGlkXG4gICAgLy8gdmFsdWUgb3IgdGhlIGNvbnN0cnVjdGVkIGVycm9yIHdpbGwgYmUgbWVhbmluZ2xlc3MuXG4gICAgZnVuY3Rpb24gQXBvbGxvRXJyb3IoX2EpIHtcbiAgICAgICAgdmFyIGdyYXBoUUxFcnJvcnMgPSBfYS5ncmFwaFFMRXJyb3JzLCBwcm90b2NvbEVycm9ycyA9IF9hLnByb3RvY29sRXJyb3JzLCBjbGllbnRFcnJvcnMgPSBfYS5jbGllbnRFcnJvcnMsIG5ldHdvcmtFcnJvciA9IF9hLm5ldHdvcmtFcnJvciwgZXJyb3JNZXNzYWdlID0gX2EuZXJyb3JNZXNzYWdlLCBleHRyYUluZm8gPSBfYS5leHRyYUluZm87XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGVycm9yTWVzc2FnZSkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMubmFtZSA9IFwiQXBvbGxvRXJyb3JcIjtcbiAgICAgICAgX3RoaXMuZ3JhcGhRTEVycm9ycyA9IGdyYXBoUUxFcnJvcnMgfHwgW107XG4gICAgICAgIF90aGlzLnByb3RvY29sRXJyb3JzID0gcHJvdG9jb2xFcnJvcnMgfHwgW107XG4gICAgICAgIF90aGlzLmNsaWVudEVycm9ycyA9IGNsaWVudEVycm9ycyB8fCBbXTtcbiAgICAgICAgX3RoaXMubmV0d29ya0Vycm9yID0gbmV0d29ya0Vycm9yIHx8IG51bGw7XG4gICAgICAgIF90aGlzLm1lc3NhZ2UgPSBlcnJvck1lc3NhZ2UgfHwgZ2VuZXJhdGVFcnJvck1lc3NhZ2UoX3RoaXMpO1xuICAgICAgICBfdGhpcy5leHRyYUluZm8gPSBleHRyYUluZm87XG4gICAgICAgIF90aGlzLmNhdXNlID1cbiAgICAgICAgICAgIF9fc3ByZWFkQXJyYXkoX19zcHJlYWRBcnJheShfX3NwcmVhZEFycmF5KFtcbiAgICAgICAgICAgICAgICBuZXR3b3JrRXJyb3JcbiAgICAgICAgICAgIF0sIChncmFwaFFMRXJyb3JzIHx8IFtdKSwgdHJ1ZSksIChwcm90b2NvbEVycm9ycyB8fCBbXSksIHRydWUpLCAoY2xpZW50RXJyb3JzIHx8IFtdKSwgdHJ1ZSkuZmluZChmdW5jdGlvbiAoZSkgeyByZXR1cm4gISFlOyB9KSB8fCBudWxsO1xuICAgICAgICAvLyBXZSdyZSBub3QgdXNpbmcgYE9iamVjdC5zZXRQcm90b3R5cGVPZmAgaGVyZSBhcyBpdCBpc24ndCBmdWxseVxuICAgICAgICAvLyBzdXBwb3J0ZWQgb24gQW5kcm9pZCAoc2VlIGlzc3VlICMzMjM2KS5cbiAgICAgICAgX3RoaXMuX19wcm90b19fID0gQXBvbGxvRXJyb3IucHJvdG90eXBlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBBcG9sbG9FcnJvcjtcbn0oRXJyb3IpKTtcbmV4cG9ydCB7IEFwb2xsb0Vycm9yIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiX19leHRlbmRzIiwiX19zcHJlYWRBcnJheSIsImlzTm9uTnVsbE9iamVjdCIsIlBST1RPQ09MX0VSUk9SU19TWU1CT0wiLCJTeW1ib2wiLCJncmFwaFFMUmVzdWx0SGFzUHJvdG9jb2xFcnJvcnMiLCJyZXN1bHQiLCJleHRlbnNpb25zIiwiQXJyYXkiLCJpc0FycmF5IiwiaXNBcG9sbG9FcnJvciIsImVyciIsImhhc093blByb3BlcnR5IiwiZ2VuZXJhdGVFcnJvck1lc3NhZ2UiLCJlcnJvcnMiLCJncmFwaFFMRXJyb3JzIiwiY2xpZW50RXJyb3JzIiwicHJvdG9jb2xFcnJvcnMiLCJuZXR3b3JrRXJyb3IiLCJwdXNoIiwibWFwIiwibWVzc2FnZSIsImpvaW4iLCJBcG9sbG9FcnJvciIsIl9zdXBlciIsIl9hIiwiZXJyb3JNZXNzYWdlIiwiZXh0cmFJbmZvIiwiX3RoaXMiLCJjYWxsIiwibmFtZSIsImNhdXNlIiwiZmluZCIsImUiLCJfX3Byb3RvX18iLCJwcm90b3R5cGUiLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/errors/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/context/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@apollo/client/link/context/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   setContext: () => (/* binding */ setContext)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _core_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/index.js */ \"(ssr)/./node_modules/@apollo/client/link/core/ApolloLink.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/zen-observable-ts/module.js\");\n\n\n\nfunction setContext(setter) {\n    return new _core_index_js__WEBPACK_IMPORTED_MODULE_0__.ApolloLink(function(operation, forward) {\n        var request = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__rest)(operation, []);\n        return new _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.Observable(function(observer) {\n            var handle;\n            var closed = false;\n            Promise.resolve(request).then(function(req) {\n                return setter(req, operation.getContext());\n            }).then(operation.setContext).then(function() {\n                // if the observer is already closed, no need to subscribe.\n                if (closed) return;\n                handle = forward(operation).subscribe({\n                    next: observer.next.bind(observer),\n                    error: observer.error.bind(observer),\n                    complete: observer.complete.bind(observer)\n                });\n            }).catch(observer.error.bind(observer));\n            return function() {\n                closed = true;\n                if (handle) handle.unsubscribe();\n            };\n        });\n    });\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9jb250ZXh0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBK0I7QUFDZTtBQUNRO0FBQy9DLFNBQVNHLFdBQVdDLE1BQU07SUFDN0IsT0FBTyxJQUFJSCxzREFBVUEsQ0FBQyxTQUFVSSxTQUFTLEVBQUVDLE9BQU87UUFDOUMsSUFBSUMsVUFBVVAsNkNBQU1BLENBQUNLLFdBQVcsRUFBRTtRQUNsQyxPQUFPLElBQUlILDJEQUFVQSxDQUFDLFNBQVVNLFFBQVE7WUFDcEMsSUFBSUM7WUFDSixJQUFJQyxTQUFTO1lBQ2JDLFFBQVFDLE9BQU8sQ0FBQ0wsU0FDWE0sSUFBSSxDQUFDLFNBQVVDLEdBQUc7Z0JBQUksT0FBT1YsT0FBT1UsS0FBS1QsVUFBVVUsVUFBVTtZQUFLLEdBQ2xFRixJQUFJLENBQUNSLFVBQVVGLFVBQVUsRUFDekJVLElBQUksQ0FBQztnQkFDTiwyREFBMkQ7Z0JBQzNELElBQUlILFFBQ0E7Z0JBQ0pELFNBQVNILFFBQVFELFdBQVdXLFNBQVMsQ0FBQztvQkFDbENDLE1BQU1ULFNBQVNTLElBQUksQ0FBQ0MsSUFBSSxDQUFDVjtvQkFDekJXLE9BQU9YLFNBQVNXLEtBQUssQ0FBQ0QsSUFBSSxDQUFDVjtvQkFDM0JZLFVBQVVaLFNBQVNZLFFBQVEsQ0FBQ0YsSUFBSSxDQUFDVjtnQkFDckM7WUFDSixHQUNLYSxLQUFLLENBQUNiLFNBQVNXLEtBQUssQ0FBQ0QsSUFBSSxDQUFDVjtZQUMvQixPQUFPO2dCQUNIRSxTQUFTO2dCQUNULElBQUlELFFBQ0FBLE9BQU9hLFdBQVc7WUFDMUI7UUFDSjtJQUNKO0FBQ0osRUFDQSxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbGFjay1ncmFwaHFsLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L2xpbmsvY29udGV4dC9pbmRleC5qcz9lNDJlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fcmVzdCB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgQXBvbGxvTGluayB9IGZyb20gXCIuLi9jb3JlL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcIi4uLy4uL3V0aWxpdGllcy9pbmRleC5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHNldENvbnRleHQoc2V0dGVyKSB7XG4gICAgcmV0dXJuIG5ldyBBcG9sbG9MaW5rKGZ1bmN0aW9uIChvcGVyYXRpb24sIGZvcndhcmQpIHtcbiAgICAgICAgdmFyIHJlcXVlc3QgPSBfX3Jlc3Qob3BlcmF0aW9uLCBbXSk7XG4gICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgICAgIHZhciBoYW5kbGU7XG4gICAgICAgICAgICB2YXIgY2xvc2VkID0gZmFsc2U7XG4gICAgICAgICAgICBQcm9taXNlLnJlc29sdmUocmVxdWVzdClcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVxKSB7IHJldHVybiBzZXR0ZXIocmVxLCBvcGVyYXRpb24uZ2V0Q29udGV4dCgpKTsgfSlcbiAgICAgICAgICAgICAgICAudGhlbihvcGVyYXRpb24uc2V0Q29udGV4dClcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgLy8gaWYgdGhlIG9ic2VydmVyIGlzIGFscmVhZHkgY2xvc2VkLCBubyBuZWVkIHRvIHN1YnNjcmliZS5cbiAgICAgICAgICAgICAgICBpZiAoY2xvc2VkKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgaGFuZGxlID0gZm9yd2FyZChvcGVyYXRpb24pLnN1YnNjcmliZSh7XG4gICAgICAgICAgICAgICAgICAgIG5leHQ6IG9ic2VydmVyLm5leHQuYmluZChvYnNlcnZlciksXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBvYnNlcnZlci5lcnJvci5iaW5kKG9ic2VydmVyKSxcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGU6IG9ic2VydmVyLmNvbXBsZXRlLmJpbmQob2JzZXJ2ZXIpLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuY2F0Y2gob2JzZXJ2ZXIuZXJyb3IuYmluZChvYnNlcnZlcikpO1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBjbG9zZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGlmIChoYW5kbGUpXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZS51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiX19yZXN0IiwiQXBvbGxvTGluayIsIk9ic2VydmFibGUiLCJzZXRDb250ZXh0Iiwic2V0dGVyIiwib3BlcmF0aW9uIiwiZm9yd2FyZCIsInJlcXVlc3QiLCJvYnNlcnZlciIsImhhbmRsZSIsImNsb3NlZCIsIlByb21pc2UiLCJyZXNvbHZlIiwidGhlbiIsInJlcSIsImdldENvbnRleHQiLCJzdWJzY3JpYmUiLCJuZXh0IiwiYmluZCIsImVycm9yIiwiY29tcGxldGUiLCJjYXRjaCIsInVuc3Vic2NyaWJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/context/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/core/ApolloLink.js":
/*!*************************************************************!*\
  !*** ./node_modules/@apollo/client/link/core/ApolloLink.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApolloLink: () => (/* binding */ ApolloLink)\n/* harmony export */ });\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/zen-observable-ts/module.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/index.js */ \"(ssr)/./node_modules/@apollo/client/link/utils/createOperation.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/index.js */ \"(ssr)/./node_modules/@apollo/client/link/utils/transformOperation.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/index.js */ \"(ssr)/./node_modules/@apollo/client/link/utils/validateOperation.js\");\n/* harmony import */ var _utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utilities/deprecation/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/deprecation/index.js\");\n\n\n\n\nfunction passthrough(op, forward) {\n    return forward ? forward(op) : _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.Observable.of();\n}\nfunction toLink(handler) {\n    return typeof handler === \"function\" ? new ApolloLink(handler) : handler;\n}\nfunction isTerminating(link) {\n    return link.request.length <= 1;\n}\nvar ApolloLink = /** @class */ function() {\n    function ApolloLink(request) {\n        if (request) this.request = request;\n    }\n    ApolloLink.empty = function() {\n        return new ApolloLink(function() {\n            return _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.Observable.of();\n        });\n    };\n    ApolloLink.from = function(links) {\n        if (links.length === 0) return ApolloLink.empty();\n        return links.map(toLink).reduce(function(x, y) {\n            return x.concat(y);\n        });\n    };\n    ApolloLink.split = function(test, left, right) {\n        var leftLink = toLink(left);\n        var rightLink = toLink(right || new ApolloLink(passthrough));\n        var ret;\n        if (isTerminating(leftLink) && isTerminating(rightLink)) {\n            ret = new ApolloLink(function(operation) {\n                return test(operation) ? leftLink.request(operation) || _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.Observable.of() : rightLink.request(operation) || _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.Observable.of();\n            });\n        } else {\n            ret = new ApolloLink(function(operation, forward) {\n                return test(operation) ? leftLink.request(operation, forward) || _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.Observable.of() : rightLink.request(operation, forward) || _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.Observable.of();\n            });\n        }\n        return Object.assign(ret, {\n            left: leftLink,\n            right: rightLink\n        });\n    };\n    ApolloLink.execute = function(link, operation) {\n        return link.request((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.createOperation)(operation.context, (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.transformOperation)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.validateOperation)(operation)))) || _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.Observable.of();\n    };\n    ApolloLink.concat = function(first, second) {\n        var firstLink = toLink(first);\n        if (isTerminating(firstLink)) {\n            globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(47, firstLink);\n            return firstLink;\n        }\n        var nextLink = toLink(second);\n        var ret;\n        if (isTerminating(nextLink)) {\n            ret = new ApolloLink(function(operation) {\n                return firstLink.request(operation, function(op) {\n                    return nextLink.request(op) || _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.Observable.of();\n                }) || _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.Observable.of();\n            });\n        } else {\n            ret = new ApolloLink(function(operation, forward) {\n                return firstLink.request(operation, function(op) {\n                    return nextLink.request(op, forward) || _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.Observable.of();\n                }) || _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.Observable.of();\n            });\n        }\n        return Object.assign(ret, {\n            left: firstLink,\n            right: nextLink\n        });\n    };\n    ApolloLink.prototype.split = function(test, left, right) {\n        return this.concat(ApolloLink.split(test, left, right || new ApolloLink(passthrough)));\n    };\n    ApolloLink.prototype.concat = function(next) {\n        return ApolloLink.concat(this, next);\n    };\n    ApolloLink.prototype.request = function(operation, forward) {\n        throw (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(48);\n    };\n    /**\n     * @deprecated `onError` will be removed with Apollo Client 4.0. Please\n     * discontinue using this method.\n     */ ApolloLink.prototype.onError = function(error, observer) {\n        if (globalThis.__DEV__ !== false) {\n            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_5__.warnDeprecated)(\"onError\", function() {\n                globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(49);\n            });\n        }\n        if (observer && observer.error) {\n            observer.error(error);\n            // Returning false indicates that observer.error does not need to be\n            // called again, since it was already called (on the previous line).\n            // Calling observer.error again would not cause any real problems,\n            // since only the first call matters, but custom onError functions\n            // might have other reasons for wanting to prevent the default\n            // behavior by returning false.\n            return false;\n        }\n        // Throw errors will be passed to observer.error.\n        throw error;\n    };\n    /**\n     * @deprecated `setOnError` will be removed with Apollo Client 4.0. Please\n     * discontinue using this method.\n     */ ApolloLink.prototype.setOnError = function(fn) {\n        if (globalThis.__DEV__ !== false) {\n            globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(50);\n        }\n        this.onError = fn;\n        return this;\n    };\n    return ApolloLink;\n}();\n //# sourceMappingURL=ApolloLink.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/core/ApolloLink.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/core/execute.js":
/*!**********************************************************!*\
  !*** ./node_modules/@apollo/client/link/core/execute.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   execute: () => (/* binding */ execute)\n/* harmony export */ });\n/* harmony import */ var _ApolloLink_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ApolloLink.js */ \"(ssr)/./node_modules/@apollo/client/link/core/ApolloLink.js\");\n\nvar execute = _ApolloLink_js__WEBPACK_IMPORTED_MODULE_0__.ApolloLink.execute; //# sourceMappingURL=execute.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9jb3JlL2V4ZWN1dGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBNkM7QUFDdEMsSUFBSUMsVUFBVUQsc0RBQVVBLENBQUNDLE9BQU8sQ0FBQyxDQUN4QyxtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbGFjay1ncmFwaHFsLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L2xpbmsvY29yZS9leGVjdXRlLmpzPzIzNTAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBvbGxvTGluayB9IGZyb20gXCIuL0Fwb2xsb0xpbmsuanNcIjtcbmV4cG9ydCB2YXIgZXhlY3V0ZSA9IEFwb2xsb0xpbmsuZXhlY3V0ZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV4ZWN1dGUuanMubWFwIl0sIm5hbWVzIjpbIkFwb2xsb0xpbmsiLCJleGVjdXRlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/core/execute.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/http/HttpLink.js":
/*!***********************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/HttpLink.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HttpLink: () => (/* binding */ HttpLink)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _core_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/index.js */ \"(ssr)/./node_modules/@apollo/client/link/core/ApolloLink.js\");\n/* harmony import */ var _createHttpLink_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./createHttpLink.js */ \"(ssr)/./node_modules/@apollo/client/link/http/createHttpLink.js\");\n\n\n\nvar HttpLink = /** @class */ function(_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(HttpLink, _super);\n    function HttpLink(options) {\n        if (options === void 0) {\n            options = {};\n        }\n        var _this = _super.call(this, (0,_createHttpLink_js__WEBPACK_IMPORTED_MODULE_1__.createHttpLink)(options).request) || this;\n        _this.options = options;\n        return _this;\n    }\n    return HttpLink;\n}(_core_index_js__WEBPACK_IMPORTED_MODULE_2__.ApolloLink);\n //# sourceMappingURL=HttpLink.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL0h0dHBMaW5rLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBa0M7QUFDWTtBQUNPO0FBQ3JELElBQUlHLFdBQVcsV0FBVyxHQUFJLFNBQVVDLE1BQU07SUFDMUNKLGdEQUFTQSxDQUFDRyxVQUFVQztJQUNwQixTQUFTRCxTQUFTRSxPQUFPO1FBQ3JCLElBQUlBLFlBQVksS0FBSyxHQUFHO1lBQUVBLFVBQVUsQ0FBQztRQUFHO1FBQ3hDLElBQUlDLFFBQVFGLE9BQU9HLElBQUksQ0FBQyxJQUFJLEVBQUVMLGtFQUFjQSxDQUFDRyxTQUFTRyxPQUFPLEtBQUssSUFBSTtRQUN0RUYsTUFBTUQsT0FBTyxHQUFHQTtRQUNoQixPQUFPQztJQUNYO0lBQ0EsT0FBT0g7QUFDWCxFQUFFRixzREFBVUE7QUFDUSxDQUNwQixvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbGFjay1ncmFwaHFsLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L2xpbmsvaHR0cC9IdHRwTGluay5qcz9lYzQ3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgQXBvbGxvTGluayB9IGZyb20gXCIuLi9jb3JlL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBjcmVhdGVIdHRwTGluayB9IGZyb20gXCIuL2NyZWF0ZUh0dHBMaW5rLmpzXCI7XG52YXIgSHR0cExpbmsgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEh0dHBMaW5rLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEh0dHBMaW5rKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgY3JlYXRlSHR0cExpbmsob3B0aW9ucykucmVxdWVzdCkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIEh0dHBMaW5rO1xufShBcG9sbG9MaW5rKSk7XG5leHBvcnQgeyBIdHRwTGluayB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SHR0cExpbmsuanMubWFwIl0sIm5hbWVzIjpbIl9fZXh0ZW5kcyIsIkFwb2xsb0xpbmsiLCJjcmVhdGVIdHRwTGluayIsIkh0dHBMaW5rIiwiX3N1cGVyIiwib3B0aW9ucyIsIl90aGlzIiwiY2FsbCIsInJlcXVlc3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/http/HttpLink.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/http/checkFetcher.js":
/*!***************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/checkFetcher.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkFetcher: () => (/* binding */ checkFetcher)\n/* harmony export */ });\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n\nvar checkFetcher = function(fetcher) {\n    if (!fetcher && typeof fetch === \"undefined\") {\n        throw (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(51);\n    }\n}; //# sourceMappingURL=checkFetcher.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL2NoZWNrRmV0Y2hlci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFxRTtBQUM5RCxJQUFJQyxlQUFlLFNBQVVDLE9BQU87SUFDdkMsSUFBSSxDQUFDQSxXQUFXLE9BQU9DLFVBQVUsYUFBYTtRQUMxQyxNQUFNSCw4RUFBaUJBLENBQUM7SUFDNUI7QUFDSixFQUFFLENBQ0Ysd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2xhY2stZ3JhcGhxbC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9saW5rL2h0dHAvY2hlY2tGZXRjaGVyLmpzPzQwYzIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbmV3SW52YXJpYW50RXJyb3IgfSBmcm9tIFwiLi4vLi4vdXRpbGl0aWVzL2dsb2JhbHMvaW5kZXguanNcIjtcbmV4cG9ydCB2YXIgY2hlY2tGZXRjaGVyID0gZnVuY3Rpb24gKGZldGNoZXIpIHtcbiAgICBpZiAoIWZldGNoZXIgJiYgdHlwZW9mIGZldGNoID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHRocm93IG5ld0ludmFyaWFudEVycm9yKDUxKTtcbiAgICB9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2hlY2tGZXRjaGVyLmpzLm1hcCJdLCJuYW1lcyI6WyJuZXdJbnZhcmlhbnRFcnJvciIsImNoZWNrRmV0Y2hlciIsImZldGNoZXIiLCJmZXRjaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/http/checkFetcher.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/http/createHttpLink.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/createHttpLink.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createHttpLink: () => (/* binding */ createHttpLink)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _core_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../core/index.js */ \"(ssr)/./node_modules/@apollo/client/link/core/ApolloLink.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/directives.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/zen-observable-ts/module.js\");\n/* harmony import */ var _serializeFetchParameter_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./serializeFetchParameter.js */ \"(ssr)/./node_modules/@apollo/client/link/http/serializeFetchParameter.js\");\n/* harmony import */ var _selectURI_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./selectURI.js */ \"(ssr)/./node_modules/@apollo/client/link/http/selectURI.js\");\n/* harmony import */ var _parseAndCheckHttpResponse_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./parseAndCheckHttpResponse.js */ \"(ssr)/./node_modules/@apollo/client/link/http/parseAndCheckHttpResponse.js\");\n/* harmony import */ var _checkFetcher_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./checkFetcher.js */ \"(ssr)/./node_modules/@apollo/client/link/http/checkFetcher.js\");\n/* harmony import */ var _selectHttpOptionsAndBody_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./selectHttpOptionsAndBody.js */ \"(ssr)/./node_modules/@apollo/client/link/http/selectHttpOptionsAndBody.js\");\n/* harmony import */ var _rewriteURIForGET_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./rewriteURIForGET.js */ \"(ssr)/./node_modules/@apollo/client/link/http/rewriteURIForGET.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/index.js */ \"(ssr)/./node_modules/@apollo/client/link/utils/fromError.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/index.js */ \"(ssr)/./node_modules/@apollo/client/link/utils/filterOperationVariables.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/transform.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n\n\n\n\n\n\n\n\n\n\n\n\nvar backupFetch = (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function() {\n    return fetch;\n});\nvar createHttpLink = function(linkOptions) {\n    if (linkOptions === void 0) {\n        linkOptions = {};\n    }\n    var _a = linkOptions.uri, uri = _a === void 0 ? \"/graphql\" : _a, // use default global fetch if nothing passed in\n    preferredFetch = linkOptions.fetch, _b = linkOptions.print, print = _b === void 0 ? _selectHttpOptionsAndBody_js__WEBPACK_IMPORTED_MODULE_1__.defaultPrinter : _b, includeExtensions = linkOptions.includeExtensions, preserveHeaderCase = linkOptions.preserveHeaderCase, useGETForQueries = linkOptions.useGETForQueries, _c = linkOptions.includeUnusedVariables, includeUnusedVariables = _c === void 0 ? false : _c, requestOptions = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__rest)(linkOptions, [\n        \"uri\",\n        \"fetch\",\n        \"print\",\n        \"includeExtensions\",\n        \"preserveHeaderCase\",\n        \"useGETForQueries\",\n        \"includeUnusedVariables\"\n    ]);\n    if (globalThis.__DEV__ !== false) {\n        // Make sure at least one of preferredFetch, window.fetch, or backupFetch is\n        // defined, so requests won't fail at runtime.\n        (0,_checkFetcher_js__WEBPACK_IMPORTED_MODULE_3__.checkFetcher)(preferredFetch || backupFetch);\n    }\n    var linkConfig = {\n        http: {\n            includeExtensions: includeExtensions,\n            preserveHeaderCase: preserveHeaderCase\n        },\n        options: requestOptions.fetchOptions,\n        credentials: requestOptions.credentials,\n        headers: requestOptions.headers\n    };\n    return new _core_index_js__WEBPACK_IMPORTED_MODULE_4__.ApolloLink(function(operation) {\n        var chosenURI = (0,_selectURI_js__WEBPACK_IMPORTED_MODULE_5__.selectURI)(operation, uri);\n        var context = operation.getContext();\n        // `apollographql-client-*` headers are automatically set if a\n        // `clientAwareness` object is found in the context. These headers are\n        // set first, followed by the rest of the headers pulled from\n        // `context.headers`. If desired, `apollographql-client-*` headers set by\n        // the `clientAwareness` object can be overridden by\n        // `apollographql-client-*` headers set in `context.headers`.\n        var clientAwarenessHeaders = {};\n        if (context.clientAwareness) {\n            var _a = context.clientAwareness, name_1 = _a.name, version = _a.version;\n            if (name_1) {\n                clientAwarenessHeaders[\"apollographql-client-name\"] = name_1;\n            }\n            if (version) {\n                clientAwarenessHeaders[\"apollographql-client-version\"] = version;\n            }\n        }\n        var contextHeaders = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, clientAwarenessHeaders), context.headers);\n        var contextConfig = {\n            http: context.http,\n            options: context.fetchOptions,\n            credentials: context.credentials,\n            headers: contextHeaders\n        };\n        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_6__.hasDirectives)([\n            \"client\"\n        ], operation.query)) {\n            if (globalThis.__DEV__ !== false) {\n                globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(52);\n            }\n            var transformedQuery = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.removeClientSetsFromDocument)(operation.query);\n            if (!transformedQuery) {\n                return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_8__.fromError)(new Error(\"HttpLink: Trying to send a client-only query to the server. To send to the server, ensure a non-client field is added to the query or set the `transformOptions.removeClientFields` option to `true`.\"));\n            }\n            operation.query = transformedQuery;\n        }\n        //uses fallback, link, and then context to build options\n        var _b = (0,_selectHttpOptionsAndBody_js__WEBPACK_IMPORTED_MODULE_1__.selectHttpOptionsAndBodyInternal)(operation, print, _selectHttpOptionsAndBody_js__WEBPACK_IMPORTED_MODULE_1__.fallbackHttpConfig, linkConfig, contextConfig), options = _b.options, body = _b.body;\n        if (body.variables && !includeUnusedVariables) {\n            body.variables = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_9__.filterOperationVariables)(body.variables, operation.query);\n        }\n        var controller;\n        if (!options.signal && typeof AbortController !== \"undefined\") {\n            controller = new AbortController();\n            options.signal = controller.signal;\n        }\n        // If requested, set method to GET if there are no mutations.\n        var definitionIsMutation = function(d) {\n            return d.kind === \"OperationDefinition\" && d.operation === \"mutation\";\n        };\n        var definitionIsSubscription = function(d) {\n            return d.kind === \"OperationDefinition\" && d.operation === \"subscription\";\n        };\n        var isSubscription = definitionIsSubscription((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_10__.getMainDefinition)(operation.query));\n        // does not match custom directives beginning with @defer\n        var hasDefer = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_6__.hasDirectives)([\n            \"defer\"\n        ], operation.query);\n        if (useGETForQueries && !operation.query.definitions.some(definitionIsMutation)) {\n            options.method = \"GET\";\n        }\n        if (hasDefer || isSubscription) {\n            options.headers = options.headers || {};\n            var acceptHeader = \"multipart/mixed;\";\n            // Omit defer-specific headers if the user attempts to defer a selection\n            // set on a subscription and log a warning.\n            if (isSubscription && hasDefer) {\n                globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(53);\n            }\n            if (isSubscription) {\n                acceptHeader += \"boundary=graphql;subscriptionSpec=1.0,application/json\";\n            } else if (hasDefer) {\n                acceptHeader += \"deferSpec=20220824,application/json\";\n            }\n            options.headers.accept = acceptHeader;\n        }\n        if (options.method === \"GET\") {\n            var _c = (0,_rewriteURIForGET_js__WEBPACK_IMPORTED_MODULE_11__.rewriteURIForGET)(chosenURI, body), newURI = _c.newURI, parseError = _c.parseError;\n            if (parseError) {\n                return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_8__.fromError)(parseError);\n            }\n            chosenURI = newURI;\n        } else {\n            try {\n                options.body = (0,_serializeFetchParameter_js__WEBPACK_IMPORTED_MODULE_12__.serializeFetchParameter)(body, \"Payload\");\n            } catch (parseError) {\n                return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_8__.fromError)(parseError);\n            }\n        }\n        return new _utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.Observable(function(observer) {\n            // Prefer linkOptions.fetch (preferredFetch) if provided, and otherwise\n            // fall back to the *current* global window.fetch function (see issue\n            // #7832), or (if all else fails) the backupFetch function we saved when\n            // this module was first evaluated. This last option protects against the\n            // removal of window.fetch, which is unlikely but not impossible.\n            var currentFetch = preferredFetch || (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function() {\n                return fetch;\n            }) || backupFetch;\n            var observerNext = observer.next.bind(observer);\n            currentFetch(chosenURI, options).then(function(response) {\n                var _a;\n                operation.setContext({\n                    response: response\n                });\n                var ctype = (_a = response.headers) === null || _a === void 0 ? void 0 : _a.get(\"content-type\");\n                if (ctype !== null && /^multipart\\/mixed/i.test(ctype)) {\n                    return (0,_parseAndCheckHttpResponse_js__WEBPACK_IMPORTED_MODULE_14__.readMultipartBody)(response, observerNext);\n                } else {\n                    return (0,_parseAndCheckHttpResponse_js__WEBPACK_IMPORTED_MODULE_14__.parseAndCheckHttpResponse)(operation)(response).then(observerNext);\n                }\n            }).then(function() {\n                controller = undefined;\n                observer.complete();\n            }).catch(function(err) {\n                controller = undefined;\n                (0,_parseAndCheckHttpResponse_js__WEBPACK_IMPORTED_MODULE_14__.handleError)(err, observer);\n            });\n            return function() {\n                // XXX support canceling this request\n                // https://developers.google.com/web/updates/2017/09/abortable-fetch\n                if (controller) controller.abort();\n            };\n        });\n    });\n}; //# sourceMappingURL=createHttpLink.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/http/createHttpLink.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/http/iterators/async.js":
/*!******************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/iterators/async.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ asyncIterator)\n/* harmony export */ });\n/**\n * Original source:\n * https://github.com/kmalakoff/response-iterator/blob/master/src/iterators/async.ts\n */ function asyncIterator(source) {\n    var _a;\n    var iterator = source[Symbol.asyncIterator]();\n    return _a = {\n        next: function() {\n            return iterator.next();\n        }\n    }, _a[Symbol.asyncIterator] = function() {\n        return this;\n    }, _a;\n} //# sourceMappingURL=async.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL2l0ZXJhdG9ycy9hc3luYy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7OztDQUdDLEdBQ2MsU0FBU0EsY0FBY0MsTUFBTTtJQUN4QyxJQUFJQztJQUNKLElBQUlDLFdBQVdGLE1BQU0sQ0FBQ0csT0FBT0osYUFBYSxDQUFDO0lBQzNDLE9BQU9FLEtBQUs7UUFDSkcsTUFBTTtZQUNGLE9BQU9GLFNBQVNFLElBQUk7UUFDeEI7SUFDSixHQUNBSCxFQUFFLENBQUNFLE9BQU9KLGFBQWEsQ0FBQyxHQUFHO1FBQ3ZCLE9BQU8sSUFBSTtJQUNmLEdBQ0FFO0FBQ1IsRUFDQSxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbGFjay1ncmFwaHFsLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L2xpbmsvaHR0cC9pdGVyYXRvcnMvYXN5bmMuanM/ODM2YyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE9yaWdpbmFsIHNvdXJjZTpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9rbWFsYWtvZmYvcmVzcG9uc2UtaXRlcmF0b3IvYmxvYi9tYXN0ZXIvc3JjL2l0ZXJhdG9ycy9hc3luYy50c1xuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhc3luY0l0ZXJhdG9yKHNvdXJjZSkge1xuICAgIHZhciBfYTtcbiAgICB2YXIgaXRlcmF0b3IgPSBzb3VyY2VbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCk7XG4gICAgcmV0dXJuIF9hID0ge1xuICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIF9hW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICBfYTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFzeW5jLmpzLm1hcCJdLCJuYW1lcyI6WyJhc3luY0l0ZXJhdG9yIiwic291cmNlIiwiX2EiLCJpdGVyYXRvciIsIlN5bWJvbCIsIm5leHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/http/iterators/async.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/http/iterators/nodeStream.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/iterators/nodeStream.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ nodeStreamIterator)\n/* harmony export */ });\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n/**\n * Original source:\n * https://github.com/kmalakoff/response-iterator/blob/master/src/iterators/nodeStream.ts\n */ \nfunction nodeStreamIterator(stream) {\n    var cleanup = null;\n    var error = null;\n    var done = false;\n    var data = [];\n    var waiting = [];\n    function onData(chunk) {\n        if (error) return;\n        if (waiting.length) {\n            var shiftedArr = waiting.shift();\n            if (Array.isArray(shiftedArr) && shiftedArr[0]) {\n                return shiftedArr[0]({\n                    value: chunk,\n                    done: false\n                });\n            }\n        }\n        data.push(chunk);\n    }\n    function onError(err) {\n        error = err;\n        var all = waiting.slice();\n        all.forEach(function(pair) {\n            pair[1](err);\n        });\n        !cleanup || cleanup();\n    }\n    function onEnd() {\n        done = true;\n        var all = waiting.slice();\n        all.forEach(function(pair) {\n            pair[0]({\n                value: undefined,\n                done: true\n            });\n        });\n        !cleanup || cleanup();\n    }\n    cleanup = function() {\n        cleanup = null;\n        stream.removeListener(\"data\", onData);\n        stream.removeListener(\"error\", onError);\n        stream.removeListener(\"end\", onEnd);\n        stream.removeListener(\"finish\", onEnd);\n        stream.removeListener(\"close\", onEnd);\n    };\n    stream.on(\"data\", onData);\n    stream.on(\"error\", onError);\n    stream.on(\"end\", onEnd);\n    stream.on(\"finish\", onEnd);\n    stream.on(\"close\", onEnd);\n    function getNext() {\n        return new Promise(function(resolve, reject) {\n            if (error) return reject(error);\n            if (data.length) return resolve({\n                value: data.shift(),\n                done: false\n            });\n            if (done) return resolve({\n                value: undefined,\n                done: true\n            });\n            waiting.push([\n                resolve,\n                reject\n            ]);\n        });\n    }\n    var iterator = {\n        next: function() {\n            return getNext();\n        }\n    };\n    if (_utilities_index_js__WEBPACK_IMPORTED_MODULE_0__.canUseAsyncIteratorSymbol) {\n        iterator[Symbol.asyncIterator] = function() {\n            return this;\n        };\n    }\n    return iterator;\n} //# sourceMappingURL=nodeStream.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL2l0ZXJhdG9ycy9ub2RlU3RyZWFtLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7OztDQUdDLEdBQ3VFO0FBQ3pELFNBQVNDLG1CQUFtQkMsTUFBTTtJQUM3QyxJQUFJQyxVQUFVO0lBQ2QsSUFBSUMsUUFBUTtJQUNaLElBQUlDLE9BQU87SUFDWCxJQUFJQyxPQUFPLEVBQUU7SUFDYixJQUFJQyxVQUFVLEVBQUU7SUFDaEIsU0FBU0MsT0FBT0MsS0FBSztRQUNqQixJQUFJTCxPQUNBO1FBQ0osSUFBSUcsUUFBUUcsTUFBTSxFQUFFO1lBQ2hCLElBQUlDLGFBQWFKLFFBQVFLLEtBQUs7WUFDOUIsSUFBSUMsTUFBTUMsT0FBTyxDQUFDSCxlQUFlQSxVQUFVLENBQUMsRUFBRSxFQUFFO2dCQUM1QyxPQUFPQSxVQUFVLENBQUMsRUFBRSxDQUFDO29CQUFFSSxPQUFPTjtvQkFBT0osTUFBTTtnQkFBTTtZQUNyRDtRQUNKO1FBQ0FDLEtBQUtVLElBQUksQ0FBQ1A7SUFDZDtJQUNBLFNBQVNRLFFBQVFDLEdBQUc7UUFDaEJkLFFBQVFjO1FBQ1IsSUFBSUMsTUFBTVosUUFBUWEsS0FBSztRQUN2QkQsSUFBSUUsT0FBTyxDQUFDLFNBQVVDLElBQUk7WUFDdEJBLElBQUksQ0FBQyxFQUFFLENBQUNKO1FBQ1o7UUFDQSxDQUFDZixXQUFXQTtJQUNoQjtJQUNBLFNBQVNvQjtRQUNMbEIsT0FBTztRQUNQLElBQUljLE1BQU1aLFFBQVFhLEtBQUs7UUFDdkJELElBQUlFLE9BQU8sQ0FBQyxTQUFVQyxJQUFJO1lBQ3RCQSxJQUFJLENBQUMsRUFBRSxDQUFDO2dCQUFFUCxPQUFPUztnQkFBV25CLE1BQU07WUFBSztRQUMzQztRQUNBLENBQUNGLFdBQVdBO0lBQ2hCO0lBQ0FBLFVBQVU7UUFDTkEsVUFBVTtRQUNWRCxPQUFPdUIsY0FBYyxDQUFDLFFBQVFqQjtRQUM5Qk4sT0FBT3VCLGNBQWMsQ0FBQyxTQUFTUjtRQUMvQmYsT0FBT3VCLGNBQWMsQ0FBQyxPQUFPRjtRQUM3QnJCLE9BQU91QixjQUFjLENBQUMsVUFBVUY7UUFDaENyQixPQUFPdUIsY0FBYyxDQUFDLFNBQVNGO0lBQ25DO0lBQ0FyQixPQUFPd0IsRUFBRSxDQUFDLFFBQVFsQjtJQUNsQk4sT0FBT3dCLEVBQUUsQ0FBQyxTQUFTVDtJQUNuQmYsT0FBT3dCLEVBQUUsQ0FBQyxPQUFPSDtJQUNqQnJCLE9BQU93QixFQUFFLENBQUMsVUFBVUg7SUFDcEJyQixPQUFPd0IsRUFBRSxDQUFDLFNBQVNIO0lBQ25CLFNBQVNJO1FBQ0wsT0FBTyxJQUFJQyxRQUFRLFNBQVVDLE9BQU8sRUFBRUMsTUFBTTtZQUN4QyxJQUFJMUIsT0FDQSxPQUFPMEIsT0FBTzFCO1lBQ2xCLElBQUlFLEtBQUtJLE1BQU0sRUFDWCxPQUFPbUIsUUFBUTtnQkFBRWQsT0FBT1QsS0FBS00sS0FBSztnQkFBSVAsTUFBTTtZQUFNO1lBQ3RELElBQUlBLE1BQ0EsT0FBT3dCLFFBQVE7Z0JBQUVkLE9BQU9TO2dCQUFXbkIsTUFBTTtZQUFLO1lBQ2xERSxRQUFRUyxJQUFJLENBQUM7Z0JBQUNhO2dCQUFTQzthQUFPO1FBQ2xDO0lBQ0o7SUFDQSxJQUFJQyxXQUFXO1FBQ1hDLE1BQU07WUFDRixPQUFPTDtRQUNYO0lBQ0o7SUFDQSxJQUFJM0IsMEVBQXlCQSxFQUFFO1FBQzNCK0IsUUFBUSxDQUFDRSxPQUFPQyxhQUFhLENBQUMsR0FBRztZQUM3QixPQUFPLElBQUk7UUFDZjtJQUNKO0lBQ0EsT0FBT0g7QUFDWCxFQUNBLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL3NsYWNrLWdyYXBocWwtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL2l0ZXJhdG9ycy9ub2RlU3RyZWFtLmpzPzI3MjQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBPcmlnaW5hbCBzb3VyY2U6XG4gKiBodHRwczovL2dpdGh1Yi5jb20va21hbGFrb2ZmL3Jlc3BvbnNlLWl0ZXJhdG9yL2Jsb2IvbWFzdGVyL3NyYy9pdGVyYXRvcnMvbm9kZVN0cmVhbS50c1xuICovXG5pbXBvcnQgeyBjYW5Vc2VBc3luY0l0ZXJhdG9yU3ltYm9sIH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxpdGllcy9pbmRleC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbm9kZVN0cmVhbUl0ZXJhdG9yKHN0cmVhbSkge1xuICAgIHZhciBjbGVhbnVwID0gbnVsbDtcbiAgICB2YXIgZXJyb3IgPSBudWxsO1xuICAgIHZhciBkb25lID0gZmFsc2U7XG4gICAgdmFyIGRhdGEgPSBbXTtcbiAgICB2YXIgd2FpdGluZyA9IFtdO1xuICAgIGZ1bmN0aW9uIG9uRGF0YShjaHVuaykge1xuICAgICAgICBpZiAoZXJyb3IpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmICh3YWl0aW5nLmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIHNoaWZ0ZWRBcnIgPSB3YWl0aW5nLnNoaWZ0KCk7XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShzaGlmdGVkQXJyKSAmJiBzaGlmdGVkQXJyWzBdKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNoaWZ0ZWRBcnJbMF0oeyB2YWx1ZTogY2h1bmssIGRvbmU6IGZhbHNlIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGRhdGEucHVzaChjaHVuayk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uRXJyb3IoZXJyKSB7XG4gICAgICAgIGVycm9yID0gZXJyO1xuICAgICAgICB2YXIgYWxsID0gd2FpdGluZy5zbGljZSgpO1xuICAgICAgICBhbGwuZm9yRWFjaChmdW5jdGlvbiAocGFpcikge1xuICAgICAgICAgICAgcGFpclsxXShlcnIpO1xuICAgICAgICB9KTtcbiAgICAgICAgIWNsZWFudXAgfHwgY2xlYW51cCgpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvbkVuZCgpIHtcbiAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICAgIHZhciBhbGwgPSB3YWl0aW5nLnNsaWNlKCk7XG4gICAgICAgIGFsbC5mb3JFYWNoKGZ1bmN0aW9uIChwYWlyKSB7XG4gICAgICAgICAgICBwYWlyWzBdKHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgICFjbGVhbnVwIHx8IGNsZWFudXAoKTtcbiAgICB9XG4gICAgY2xlYW51cCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2xlYW51cCA9IG51bGw7XG4gICAgICAgIHN0cmVhbS5yZW1vdmVMaXN0ZW5lcihcImRhdGFcIiwgb25EYXRhKTtcbiAgICAgICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKFwiZXJyb3JcIiwgb25FcnJvcik7XG4gICAgICAgIHN0cmVhbS5yZW1vdmVMaXN0ZW5lcihcImVuZFwiLCBvbkVuZCk7XG4gICAgICAgIHN0cmVhbS5yZW1vdmVMaXN0ZW5lcihcImZpbmlzaFwiLCBvbkVuZCk7XG4gICAgICAgIHN0cmVhbS5yZW1vdmVMaXN0ZW5lcihcImNsb3NlXCIsIG9uRW5kKTtcbiAgICB9O1xuICAgIHN0cmVhbS5vbihcImRhdGFcIiwgb25EYXRhKTtcbiAgICBzdHJlYW0ub24oXCJlcnJvclwiLCBvbkVycm9yKTtcbiAgICBzdHJlYW0ub24oXCJlbmRcIiwgb25FbmQpO1xuICAgIHN0cmVhbS5vbihcImZpbmlzaFwiLCBvbkVuZCk7XG4gICAgc3RyZWFtLm9uKFwiY2xvc2VcIiwgb25FbmQpO1xuICAgIGZ1bmN0aW9uIGdldE5leHQoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICBpZiAoZXJyb3IpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICBpZiAoZGF0YS5sZW5ndGgpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoeyB2YWx1ZTogZGF0YS5zaGlmdCgpLCBkb25lOiBmYWxzZSB9KTtcbiAgICAgICAgICAgIGlmIChkb25lKVxuICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9KTtcbiAgICAgICAgICAgIHdhaXRpbmcucHVzaChbcmVzb2x2ZSwgcmVqZWN0XSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB2YXIgaXRlcmF0b3IgPSB7XG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXROZXh0KCk7XG4gICAgICAgIH0sXG4gICAgfTtcbiAgICBpZiAoY2FuVXNlQXN5bmNJdGVyYXRvclN5bWJvbCkge1xuICAgICAgICBpdGVyYXRvcltTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIGl0ZXJhdG9yO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bm9kZVN0cmVhbS5qcy5tYXAiXSwibmFtZXMiOlsiY2FuVXNlQXN5bmNJdGVyYXRvclN5bWJvbCIsIm5vZGVTdHJlYW1JdGVyYXRvciIsInN0cmVhbSIsImNsZWFudXAiLCJlcnJvciIsImRvbmUiLCJkYXRhIiwid2FpdGluZyIsIm9uRGF0YSIsImNodW5rIiwibGVuZ3RoIiwic2hpZnRlZEFyciIsInNoaWZ0IiwiQXJyYXkiLCJpc0FycmF5IiwidmFsdWUiLCJwdXNoIiwib25FcnJvciIsImVyciIsImFsbCIsInNsaWNlIiwiZm9yRWFjaCIsInBhaXIiLCJvbkVuZCIsInVuZGVmaW5lZCIsInJlbW92ZUxpc3RlbmVyIiwib24iLCJnZXROZXh0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJpdGVyYXRvciIsIm5leHQiLCJTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/http/iterators/nodeStream.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/http/iterators/promise.js":
/*!********************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/iterators/promise.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ promiseIterator)\n/* harmony export */ });\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n/**\n * Original source:\n * https://github.com/kmalakoff/response-iterator/blob/master/src/iterators/promise.ts\n */ \nfunction promiseIterator(promise) {\n    var resolved = false;\n    var iterator = {\n        next: function() {\n            if (resolved) return Promise.resolve({\n                value: undefined,\n                done: true\n            });\n            resolved = true;\n            return new Promise(function(resolve, reject) {\n                promise.then(function(value) {\n                    resolve({\n                        value: value,\n                        done: false\n                    });\n                }).catch(reject);\n            });\n        }\n    };\n    if (_utilities_index_js__WEBPACK_IMPORTED_MODULE_0__.canUseAsyncIteratorSymbol) {\n        iterator[Symbol.asyncIterator] = function() {\n            return this;\n        };\n    }\n    return iterator;\n} //# sourceMappingURL=promise.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL2l0ZXJhdG9ycy9wcm9taXNlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7OztDQUdDLEdBQ3VFO0FBQ3pELFNBQVNDLGdCQUFnQkMsT0FBTztJQUMzQyxJQUFJQyxXQUFXO0lBQ2YsSUFBSUMsV0FBVztRQUNYQyxNQUFNO1lBQ0YsSUFBSUYsVUFDQSxPQUFPRyxRQUFRQyxPQUFPLENBQUM7Z0JBQ25CQyxPQUFPQztnQkFDUEMsTUFBTTtZQUNWO1lBQ0pQLFdBQVc7WUFDWCxPQUFPLElBQUlHLFFBQVEsU0FBVUMsT0FBTyxFQUFFSSxNQUFNO2dCQUN4Q1QsUUFDS1UsSUFBSSxDQUFDLFNBQVVKLEtBQUs7b0JBQ3JCRCxRQUFRO3dCQUFFQyxPQUFPQTt3QkFBT0UsTUFBTTtvQkFBTTtnQkFDeEMsR0FDS0csS0FBSyxDQUFDRjtZQUNmO1FBQ0o7SUFDSjtJQUNBLElBQUlYLDBFQUF5QkEsRUFBRTtRQUMzQkksUUFBUSxDQUFDVSxPQUFPQyxhQUFhLENBQUMsR0FBRztZQUM3QixPQUFPLElBQUk7UUFDZjtJQUNKO0lBQ0EsT0FBT1g7QUFDWCxFQUNBLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL3NsYWNrLWdyYXBocWwtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL2l0ZXJhdG9ycy9wcm9taXNlLmpzPzA5NzkiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBPcmlnaW5hbCBzb3VyY2U6XG4gKiBodHRwczovL2dpdGh1Yi5jb20va21hbGFrb2ZmL3Jlc3BvbnNlLWl0ZXJhdG9yL2Jsb2IvbWFzdGVyL3NyYy9pdGVyYXRvcnMvcHJvbWlzZS50c1xuICovXG5pbXBvcnQgeyBjYW5Vc2VBc3luY0l0ZXJhdG9yU3ltYm9sIH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxpdGllcy9pbmRleC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcHJvbWlzZUl0ZXJhdG9yKHByb21pc2UpIHtcbiAgICB2YXIgcmVzb2x2ZWQgPSBmYWxzZTtcbiAgICB2YXIgaXRlcmF0b3IgPSB7XG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChyZXNvbHZlZClcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgZG9uZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJlc29sdmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgcHJvbWlzZVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh7IHZhbHVlOiB2YWx1ZSwgZG9uZTogZmFsc2UgfSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKHJlamVjdCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICB9O1xuICAgIGlmIChjYW5Vc2VBc3luY0l0ZXJhdG9yU3ltYm9sKSB7XG4gICAgICAgIGl0ZXJhdG9yW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gaXRlcmF0b3I7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm9taXNlLmpzLm1hcCJdLCJuYW1lcyI6WyJjYW5Vc2VBc3luY0l0ZXJhdG9yU3ltYm9sIiwicHJvbWlzZUl0ZXJhdG9yIiwicHJvbWlzZSIsInJlc29sdmVkIiwiaXRlcmF0b3IiLCJuZXh0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJ2YWx1ZSIsInVuZGVmaW5lZCIsImRvbmUiLCJyZWplY3QiLCJ0aGVuIiwiY2F0Y2giLCJTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/http/iterators/promise.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/http/iterators/reader.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/iterators/reader.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ readerIterator)\n/* harmony export */ });\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n/**\n * Original source:\n * https://github.com/kmalakoff/response-iterator/blob/master/src/iterators/reader.ts\n */ \nfunction readerIterator(reader) {\n    var iterator = {\n        next: function() {\n            return reader.read();\n        }\n    };\n    if (_utilities_index_js__WEBPACK_IMPORTED_MODULE_0__.canUseAsyncIteratorSymbol) {\n        iterator[Symbol.asyncIterator] = function() {\n            return this;\n        };\n    }\n    return iterator;\n} //# sourceMappingURL=reader.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL2l0ZXJhdG9ycy9yZWFkZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7O0NBR0MsR0FDdUU7QUFDekQsU0FBU0MsZUFBZUMsTUFBTTtJQUN6QyxJQUFJQyxXQUFXO1FBQ1hDLE1BQU07WUFDRixPQUFPRixPQUFPRyxJQUFJO1FBQ3RCO0lBQ0o7SUFDQSxJQUFJTCwwRUFBeUJBLEVBQUU7UUFDM0JHLFFBQVEsQ0FBQ0csT0FBT0MsYUFBYSxDQUFDLEdBQUc7WUFDN0IsT0FBTyxJQUFJO1FBQ2Y7SUFDSjtJQUNBLE9BQU9KO0FBQ1gsRUFDQSxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbGFjay1ncmFwaHFsLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L2xpbmsvaHR0cC9pdGVyYXRvcnMvcmVhZGVyLmpzPzhlMjUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBPcmlnaW5hbCBzb3VyY2U6XG4gKiBodHRwczovL2dpdGh1Yi5jb20va21hbGFrb2ZmL3Jlc3BvbnNlLWl0ZXJhdG9yL2Jsb2IvbWFzdGVyL3NyYy9pdGVyYXRvcnMvcmVhZGVyLnRzXG4gKi9cbmltcG9ydCB7IGNhblVzZUFzeW5jSXRlcmF0b3JTeW1ib2wgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbGl0aWVzL2luZGV4LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZWFkZXJJdGVyYXRvcihyZWFkZXIpIHtcbiAgICB2YXIgaXRlcmF0b3IgPSB7XG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiByZWFkZXIucmVhZCgpO1xuICAgICAgICB9LFxuICAgIH07XG4gICAgaWYgKGNhblVzZUFzeW5jSXRlcmF0b3JTeW1ib2wpIHtcbiAgICAgICAgaXRlcmF0b3JbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBpdGVyYXRvcjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlYWRlci5qcy5tYXAiXSwibmFtZXMiOlsiY2FuVXNlQXN5bmNJdGVyYXRvclN5bWJvbCIsInJlYWRlckl0ZXJhdG9yIiwicmVhZGVyIiwiaXRlcmF0b3IiLCJuZXh0IiwicmVhZCIsIlN5bWJvbCIsImFzeW5jSXRlcmF0b3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/http/iterators/reader.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/http/parseAndCheckHttpResponse.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/parseAndCheckHttpResponse.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handleError: () => (/* binding */ handleError),\n/* harmony export */   parseAndCheckHttpResponse: () => (/* binding */ parseAndCheckHttpResponse),\n/* harmony export */   parseHeaders: () => (/* binding */ parseHeaders),\n/* harmony export */   parseJsonBody: () => (/* binding */ parseJsonBody),\n/* harmony export */   readMultipartBody: () => (/* binding */ readMultipartBody)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _responseIterator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./responseIterator.js */ \"(ssr)/./node_modules/@apollo/client/link/http/responseIterator.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/index.js */ \"(ssr)/./node_modules/@apollo/client/link/utils/throwServerError.js\");\n/* harmony import */ var _errors_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../errors/index.js */ \"(ssr)/./node_modules/@apollo/client/errors/index.js\");\n/* harmony import */ var _utilities_common_incrementalResult_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utilities/common/incrementalResult.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/incrementalResult.js\");\n\n\n\n\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction readMultipartBody(response, nextValue) {\n    return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function() {\n        var decoder, contentType, delimiter, boundaryVal, boundary, buffer, iterator, running, _a, value, done, chunk, searchFrom, bi, message, i, headers, contentType_1, body, result, next;\n        var _b, _c;\n        var _d;\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function(_e) {\n            switch(_e.label){\n                case 0:\n                    if (TextDecoder === undefined) {\n                        throw new Error(\"TextDecoder must be defined in the environment: please import a polyfill.\");\n                    }\n                    decoder = new TextDecoder(\"utf-8\");\n                    contentType = (_d = response.headers) === null || _d === void 0 ? void 0 : _d.get(\"content-type\");\n                    delimiter = \"boundary=\";\n                    boundaryVal = (contentType === null || contentType === void 0 ? void 0 : contentType.includes(delimiter)) ? contentType === null || contentType === void 0 ? void 0 : contentType.substring((contentType === null || contentType === void 0 ? void 0 : contentType.indexOf(delimiter)) + delimiter.length).replace(/['\"]/g, \"\").replace(/\\;(.*)/gm, \"\").trim() : \"-\";\n                    boundary = \"\\r\\n--\".concat(boundaryVal);\n                    buffer = \"\";\n                    iterator = (0,_responseIterator_js__WEBPACK_IMPORTED_MODULE_1__.responseIterator)(response);\n                    running = true;\n                    _e.label = 1;\n                case 1:\n                    if (!running) return [\n                        3 /*break*/ ,\n                        3\n                    ];\n                    return [\n                        4 /*yield*/ ,\n                        iterator.next()\n                    ];\n                case 2:\n                    _a = _e.sent(), value = _a.value, done = _a.done;\n                    chunk = typeof value === \"string\" ? value : decoder.decode(value);\n                    searchFrom = buffer.length - boundary.length + 1;\n                    running = !done;\n                    buffer += chunk;\n                    bi = buffer.indexOf(boundary, searchFrom);\n                    while(bi > -1){\n                        message = void 0;\n                        _b = [\n                            buffer.slice(0, bi),\n                            buffer.slice(bi + boundary.length)\n                        ], message = _b[0], buffer = _b[1];\n                        i = message.indexOf(\"\\r\\n\\r\\n\");\n                        headers = parseHeaders(message.slice(0, i));\n                        contentType_1 = headers[\"content-type\"];\n                        if (contentType_1 && contentType_1.toLowerCase().indexOf(\"application/json\") === -1) {\n                            throw new Error(\"Unsupported patch content type: application/json is required.\");\n                        }\n                        body = message.slice(i);\n                        if (body) {\n                            result = parseJsonBody(response, body);\n                            if (Object.keys(result).length > 1 || \"data\" in result || \"incremental\" in result || \"errors\" in result || \"payload\" in result) {\n                                if ((0,_utilities_common_incrementalResult_js__WEBPACK_IMPORTED_MODULE_2__.isApolloPayloadResult)(result)) {\n                                    next = {};\n                                    if (\"payload\" in result) {\n                                        if (Object.keys(result).length === 1 && result.payload === null) {\n                                            return [\n                                                2 /*return*/ \n                                            ];\n                                        }\n                                        next = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, result.payload);\n                                    }\n                                    if (\"errors\" in result) {\n                                        next = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, next), {\n                                            extensions: (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, \"extensions\" in next ? next.extensions : null), (_c = {}, _c[_errors_index_js__WEBPACK_IMPORTED_MODULE_3__.PROTOCOL_ERRORS_SYMBOL] = result.errors, _c))\n                                        });\n                                    }\n                                    nextValue(next);\n                                } else {\n                                    // for the last chunk with only `hasNext: false`\n                                    // we don't need to call observer.next as there is no data/errors\n                                    nextValue(result);\n                                }\n                            } else if (// If the chunk contains only a \"hasNext: false\", we can call\n                            // observer.complete() immediately.\n                            Object.keys(result).length === 1 && \"hasNext\" in result && !result.hasNext) {\n                                return [\n                                    2 /*return*/ \n                                ];\n                            }\n                        }\n                        bi = buffer.indexOf(boundary);\n                    }\n                    return [\n                        3 /*break*/ ,\n                        1\n                    ];\n                case 3:\n                    return [\n                        2 /*return*/ \n                    ];\n            }\n        });\n    });\n}\nfunction parseHeaders(headerText) {\n    var headersInit = {};\n    headerText.split(\"\\n\").forEach(function(line) {\n        var i = line.indexOf(\":\");\n        if (i > -1) {\n            // normalize headers to lowercase\n            var name_1 = line.slice(0, i).trim().toLowerCase();\n            var value = line.slice(i + 1).trim();\n            headersInit[name_1] = value;\n        }\n    });\n    return headersInit;\n}\nfunction parseJsonBody(response, bodyText) {\n    if (response.status >= 300) {\n        // Network error\n        var getResult = function() {\n            try {\n                return JSON.parse(bodyText);\n            } catch (err) {\n                return bodyText;\n            }\n        };\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.throwServerError)(response, getResult(), \"Response not successful: Received status code \".concat(response.status));\n    }\n    try {\n        return JSON.parse(bodyText);\n    } catch (err) {\n        var parseError = err;\n        parseError.name = \"ServerParseError\";\n        parseError.response = response;\n        parseError.statusCode = response.status;\n        parseError.bodyText = bodyText;\n        throw parseError;\n    }\n}\nfunction handleError(err, observer) {\n    // if it is a network error, BUT there is graphql result info fire\n    // the next observer before calling error this gives apollo-client\n    // (and react-apollo) the `graphqlErrors` and `networkErrors` to\n    // pass to UI this should only happen if we *also* have data as\n    // part of the response key per the spec\n    if (err.result && err.result.errors && err.result.data) {\n        // if we don't call next, the UI can only show networkError\n        // because AC didn't get any graphqlErrors this is graphql\n        // execution result info (i.e errors and possibly data) this is\n        // because there is no formal spec how errors should translate to\n        // http status codes. So an auth error (401) could have both data\n        // from a public field, errors from a private field, and a status\n        // of 401\n        // {\n        //  user { // this will have errors\n        //    firstName\n        //  }\n        //  products { // this is public so will have data\n        //    cost\n        //  }\n        // }\n        //\n        // the result of above *could* look like this:\n        // {\n        //   data: { products: [{ cost: \"$10\" }] },\n        //   errors: [{\n        //      message: 'your session has timed out',\n        //      path: []\n        //   }]\n        // }\n        // status code of above would be a 401\n        // in the UI you want to show data where you can, errors as data where you can\n        // and use correct http status codes\n        observer.next(err.result);\n    }\n    observer.error(err);\n}\nfunction parseAndCheckHttpResponse(operations) {\n    return function(response) {\n        return response.text().then(function(bodyText) {\n            return parseJsonBody(response, bodyText);\n        }).then(function(result) {\n            if (!Array.isArray(result) && !hasOwnProperty.call(result, \"data\") && !hasOwnProperty.call(result, \"errors\")) {\n                // Data error\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.throwServerError)(response, result, \"Server response was missing for query '\".concat(Array.isArray(operations) ? operations.map(function(op) {\n                    return op.operationName;\n                }) : operations.operationName, \"'.\"));\n            }\n            return result;\n        });\n    };\n} //# sourceMappingURL=parseAndCheckHttpResponse.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/http/parseAndCheckHttpResponse.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/http/responseIterator.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/responseIterator.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   responseIterator: () => (/* binding */ responseIterator)\n/* harmony export */ });\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n/* harmony import */ var _iterators_async_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./iterators/async.js */ \"(ssr)/./node_modules/@apollo/client/link/http/iterators/async.js\");\n/* harmony import */ var _iterators_nodeStream_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./iterators/nodeStream.js */ \"(ssr)/./node_modules/@apollo/client/link/http/iterators/nodeStream.js\");\n/* harmony import */ var _iterators_promise_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./iterators/promise.js */ \"(ssr)/./node_modules/@apollo/client/link/http/iterators/promise.js\");\n/* harmony import */ var _iterators_reader_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./iterators/reader.js */ \"(ssr)/./node_modules/@apollo/client/link/http/iterators/reader.js\");\n/**\n * Original source:\n * https://github.com/kmalakoff/response-iterator/blob/master/src/index.ts\n */ \n\n\n\n\nfunction isNodeResponse(value) {\n    return !!value.body;\n}\nfunction isReadableStream(value) {\n    return !!value.getReader;\n}\nfunction isAsyncIterableIterator(value) {\n    return !!(_utilities_index_js__WEBPACK_IMPORTED_MODULE_0__.canUseAsyncIteratorSymbol && value[Symbol.asyncIterator]);\n}\nfunction isStreamableBlob(value) {\n    return !!value.stream;\n}\nfunction isBlob(value) {\n    return !!value.arrayBuffer;\n}\nfunction isNodeReadableStream(value) {\n    return !!value.pipe;\n}\nfunction responseIterator(response) {\n    var body = response;\n    if (isNodeResponse(response)) body = response.body;\n    if (isAsyncIterableIterator(body)) return (0,_iterators_async_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(body);\n    if (isReadableStream(body)) return (0,_iterators_reader_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(body.getReader());\n    // this errors without casting to ReadableStream<T>\n    // because Blob.stream() returns a NodeJS ReadableStream\n    if (isStreamableBlob(body)) {\n        return (0,_iterators_reader_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(body.stream().getReader());\n    }\n    if (isBlob(body)) return (0,_iterators_promise_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(body.arrayBuffer());\n    if (isNodeReadableStream(body)) return (0,_iterators_nodeStream_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(body);\n    throw new Error(\"Unknown body type for responseIterator. Please pass a streamable response.\");\n} //# sourceMappingURL=responseIterator.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL3Jlc3BvbnNlSXRlcmF0b3IuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7OztDQUdDLEdBQ29FO0FBQ3BCO0FBQ1U7QUFDTjtBQUNGO0FBQ25ELFNBQVNLLGVBQWVDLEtBQUs7SUFDekIsT0FBTyxDQUFDLENBQUNBLE1BQU1DLElBQUk7QUFDdkI7QUFDQSxTQUFTQyxpQkFBaUJGLEtBQUs7SUFDM0IsT0FBTyxDQUFDLENBQUNBLE1BQU1HLFNBQVM7QUFDNUI7QUFDQSxTQUFTQyx3QkFBd0JKLEtBQUs7SUFDbEMsT0FBTyxDQUFDLENBQUVOLENBQUFBLDBFQUF5QkEsSUFDL0JNLEtBQUssQ0FBQ0ssT0FBT1YsYUFBYSxDQUFDO0FBQ25DO0FBQ0EsU0FBU1csaUJBQWlCTixLQUFLO0lBQzNCLE9BQU8sQ0FBQyxDQUFDQSxNQUFNTyxNQUFNO0FBQ3pCO0FBQ0EsU0FBU0MsT0FBT1IsS0FBSztJQUNqQixPQUFPLENBQUMsQ0FBQ0EsTUFBTVMsV0FBVztBQUM5QjtBQUNBLFNBQVNDLHFCQUFxQlYsS0FBSztJQUMvQixPQUFPLENBQUMsQ0FBQ0EsTUFBTVcsSUFBSTtBQUN2QjtBQUNPLFNBQVNDLGlCQUFpQkMsUUFBUTtJQUNyQyxJQUFJWixPQUFPWTtJQUNYLElBQUlkLGVBQWVjLFdBQ2ZaLE9BQU9ZLFNBQVNaLElBQUk7SUFDeEIsSUFBSUcsd0JBQXdCSCxPQUN4QixPQUFPTiwrREFBYUEsQ0FBQ007SUFDekIsSUFBSUMsaUJBQWlCRCxPQUNqQixPQUFPSCxnRUFBY0EsQ0FBQ0csS0FBS0UsU0FBUztJQUN4QyxtREFBbUQ7SUFDbkQsd0RBQXdEO0lBQ3hELElBQUlHLGlCQUFpQkwsT0FBTztRQUN4QixPQUFPSCxnRUFBY0EsQ0FBQ0csS0FBS00sTUFBTSxHQUFHSixTQUFTO0lBQ2pEO0lBQ0EsSUFBSUssT0FBT1AsT0FDUCxPQUFPSixpRUFBZUEsQ0FBQ0ksS0FBS1EsV0FBVztJQUMzQyxJQUFJQyxxQkFBcUJULE9BQ3JCLE9BQU9MLG9FQUFrQkEsQ0FBQ0s7SUFDOUIsTUFBTSxJQUFJYSxNQUFNO0FBQ3BCLEVBQ0EsNENBQTRDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2xhY2stZ3JhcGhxbC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9saW5rL2h0dHAvcmVzcG9uc2VJdGVyYXRvci5qcz83ZjM0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogT3JpZ2luYWwgc291cmNlOlxuICogaHR0cHM6Ly9naXRodWIuY29tL2ttYWxha29mZi9yZXNwb25zZS1pdGVyYXRvci9ibG9iL21hc3Rlci9zcmMvaW5kZXgudHNcbiAqL1xuaW1wb3J0IHsgY2FuVXNlQXN5bmNJdGVyYXRvclN5bWJvbCB9IGZyb20gXCIuLi8uLi91dGlsaXRpZXMvaW5kZXguanNcIjtcbmltcG9ydCBhc3luY0l0ZXJhdG9yIGZyb20gXCIuL2l0ZXJhdG9ycy9hc3luYy5qc1wiO1xuaW1wb3J0IG5vZGVTdHJlYW1JdGVyYXRvciBmcm9tIFwiLi9pdGVyYXRvcnMvbm9kZVN0cmVhbS5qc1wiO1xuaW1wb3J0IHByb21pc2VJdGVyYXRvciBmcm9tIFwiLi9pdGVyYXRvcnMvcHJvbWlzZS5qc1wiO1xuaW1wb3J0IHJlYWRlckl0ZXJhdG9yIGZyb20gXCIuL2l0ZXJhdG9ycy9yZWFkZXIuanNcIjtcbmZ1bmN0aW9uIGlzTm9kZVJlc3BvbnNlKHZhbHVlKSB7XG4gICAgcmV0dXJuICEhdmFsdWUuYm9keTtcbn1cbmZ1bmN0aW9uIGlzUmVhZGFibGVTdHJlYW0odmFsdWUpIHtcbiAgICByZXR1cm4gISF2YWx1ZS5nZXRSZWFkZXI7XG59XG5mdW5jdGlvbiBpc0FzeW5jSXRlcmFibGVJdGVyYXRvcih2YWx1ZSkge1xuICAgIHJldHVybiAhIShjYW5Vc2VBc3luY0l0ZXJhdG9yU3ltYm9sICYmXG4gICAgICAgIHZhbHVlW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSk7XG59XG5mdW5jdGlvbiBpc1N0cmVhbWFibGVCbG9iKHZhbHVlKSB7XG4gICAgcmV0dXJuICEhdmFsdWUuc3RyZWFtO1xufVxuZnVuY3Rpb24gaXNCbG9iKHZhbHVlKSB7XG4gICAgcmV0dXJuICEhdmFsdWUuYXJyYXlCdWZmZXI7XG59XG5mdW5jdGlvbiBpc05vZGVSZWFkYWJsZVN0cmVhbSh2YWx1ZSkge1xuICAgIHJldHVybiAhIXZhbHVlLnBpcGU7XG59XG5leHBvcnQgZnVuY3Rpb24gcmVzcG9uc2VJdGVyYXRvcihyZXNwb25zZSkge1xuICAgIHZhciBib2R5ID0gcmVzcG9uc2U7XG4gICAgaWYgKGlzTm9kZVJlc3BvbnNlKHJlc3BvbnNlKSlcbiAgICAgICAgYm9keSA9IHJlc3BvbnNlLmJvZHk7XG4gICAgaWYgKGlzQXN5bmNJdGVyYWJsZUl0ZXJhdG9yKGJvZHkpKVxuICAgICAgICByZXR1cm4gYXN5bmNJdGVyYXRvcihib2R5KTtcbiAgICBpZiAoaXNSZWFkYWJsZVN0cmVhbShib2R5KSlcbiAgICAgICAgcmV0dXJuIHJlYWRlckl0ZXJhdG9yKGJvZHkuZ2V0UmVhZGVyKCkpO1xuICAgIC8vIHRoaXMgZXJyb3JzIHdpdGhvdXQgY2FzdGluZyB0byBSZWFkYWJsZVN0cmVhbTxUPlxuICAgIC8vIGJlY2F1c2UgQmxvYi5zdHJlYW0oKSByZXR1cm5zIGEgTm9kZUpTIFJlYWRhYmxlU3RyZWFtXG4gICAgaWYgKGlzU3RyZWFtYWJsZUJsb2IoYm9keSkpIHtcbiAgICAgICAgcmV0dXJuIHJlYWRlckl0ZXJhdG9yKGJvZHkuc3RyZWFtKCkuZ2V0UmVhZGVyKCkpO1xuICAgIH1cbiAgICBpZiAoaXNCbG9iKGJvZHkpKVxuICAgICAgICByZXR1cm4gcHJvbWlzZUl0ZXJhdG9yKGJvZHkuYXJyYXlCdWZmZXIoKSk7XG4gICAgaWYgKGlzTm9kZVJlYWRhYmxlU3RyZWFtKGJvZHkpKVxuICAgICAgICByZXR1cm4gbm9kZVN0cmVhbUl0ZXJhdG9yKGJvZHkpO1xuICAgIHRocm93IG5ldyBFcnJvcihcIlVua25vd24gYm9keSB0eXBlIGZvciByZXNwb25zZUl0ZXJhdG9yLiBQbGVhc2UgcGFzcyBhIHN0cmVhbWFibGUgcmVzcG9uc2UuXCIpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVzcG9uc2VJdGVyYXRvci5qcy5tYXAiXSwibmFtZXMiOlsiY2FuVXNlQXN5bmNJdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3IiLCJub2RlU3RyZWFtSXRlcmF0b3IiLCJwcm9taXNlSXRlcmF0b3IiLCJyZWFkZXJJdGVyYXRvciIsImlzTm9kZVJlc3BvbnNlIiwidmFsdWUiLCJib2R5IiwiaXNSZWFkYWJsZVN0cmVhbSIsImdldFJlYWRlciIsImlzQXN5bmNJdGVyYWJsZUl0ZXJhdG9yIiwiU3ltYm9sIiwiaXNTdHJlYW1hYmxlQmxvYiIsInN0cmVhbSIsImlzQmxvYiIsImFycmF5QnVmZmVyIiwiaXNOb2RlUmVhZGFibGVTdHJlYW0iLCJwaXBlIiwicmVzcG9uc2VJdGVyYXRvciIsInJlc3BvbnNlIiwiRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/http/responseIterator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/http/rewriteURIForGET.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/rewriteURIForGET.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   rewriteURIForGET: () => (/* binding */ rewriteURIForGET)\n/* harmony export */ });\n/* harmony import */ var _serializeFetchParameter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./serializeFetchParameter.js */ \"(ssr)/./node_modules/@apollo/client/link/http/serializeFetchParameter.js\");\n\n// For GET operations, returns the given URI rewritten with parameters, or a\n// parse error.\nfunction rewriteURIForGET(chosenURI, body) {\n    // Implement the standard HTTP GET serialization, plus 'extensions'. Note\n    // the extra level of JSON serialization!\n    var queryParams = [];\n    var addQueryParam = function(key, value) {\n        queryParams.push(\"\".concat(key, \"=\").concat(encodeURIComponent(value)));\n    };\n    if (\"query\" in body) {\n        addQueryParam(\"query\", body.query);\n    }\n    if (body.operationName) {\n        addQueryParam(\"operationName\", body.operationName);\n    }\n    if (body.variables) {\n        var serializedVariables = void 0;\n        try {\n            serializedVariables = (0,_serializeFetchParameter_js__WEBPACK_IMPORTED_MODULE_0__.serializeFetchParameter)(body.variables, \"Variables map\");\n        } catch (parseError) {\n            return {\n                parseError: parseError\n            };\n        }\n        addQueryParam(\"variables\", serializedVariables);\n    }\n    if (body.extensions) {\n        var serializedExtensions = void 0;\n        try {\n            serializedExtensions = (0,_serializeFetchParameter_js__WEBPACK_IMPORTED_MODULE_0__.serializeFetchParameter)(body.extensions, \"Extensions map\");\n        } catch (parseError) {\n            return {\n                parseError: parseError\n            };\n        }\n        addQueryParam(\"extensions\", serializedExtensions);\n    }\n    // Reconstruct the URI with added query params.\n    // XXX This assumes that the URI is well-formed and that it doesn't\n    //     already contain any of these query params. We could instead use the\n    //     URL API and take a polyfill (whatwg-url@6) for older browsers that\n    //     don't support URLSearchParams. Note that some browsers (and\n    //     versions of whatwg-url) support URL but not URLSearchParams!\n    var fragment = \"\", preFragment = chosenURI;\n    var fragmentStart = chosenURI.indexOf(\"#\");\n    if (fragmentStart !== -1) {\n        fragment = chosenURI.substr(fragmentStart);\n        preFragment = chosenURI.substr(0, fragmentStart);\n    }\n    var queryParamsPrefix = preFragment.indexOf(\"?\") === -1 ? \"?\" : \"&\";\n    var newURI = preFragment + queryParamsPrefix + queryParams.join(\"&\") + fragment;\n    return {\n        newURI: newURI\n    };\n} //# sourceMappingURL=rewriteURIForGET.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL3Jld3JpdGVVUklGb3JHRVQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBdUU7QUFDdkUsNEVBQTRFO0FBQzVFLGVBQWU7QUFDUixTQUFTQyxpQkFBaUJDLFNBQVMsRUFBRUMsSUFBSTtJQUM1Qyx5RUFBeUU7SUFDekUseUNBQXlDO0lBQ3pDLElBQUlDLGNBQWMsRUFBRTtJQUNwQixJQUFJQyxnQkFBZ0IsU0FBVUMsR0FBRyxFQUFFQyxLQUFLO1FBQ3BDSCxZQUFZSSxJQUFJLENBQUMsR0FBR0MsTUFBTSxDQUFDSCxLQUFLLEtBQUtHLE1BQU0sQ0FBQ0MsbUJBQW1CSDtJQUNuRTtJQUNBLElBQUksV0FBV0osTUFBTTtRQUNqQkUsY0FBYyxTQUFTRixLQUFLUSxLQUFLO0lBQ3JDO0lBQ0EsSUFBSVIsS0FBS1MsYUFBYSxFQUFFO1FBQ3BCUCxjQUFjLGlCQUFpQkYsS0FBS1MsYUFBYTtJQUNyRDtJQUNBLElBQUlULEtBQUtVLFNBQVMsRUFBRTtRQUNoQixJQUFJQyxzQkFBc0IsS0FBSztRQUMvQixJQUFJO1lBQ0FBLHNCQUFzQmQsb0ZBQXVCQSxDQUFDRyxLQUFLVSxTQUFTLEVBQUU7UUFDbEUsRUFDQSxPQUFPRSxZQUFZO1lBQ2YsT0FBTztnQkFBRUEsWUFBWUE7WUFBVztRQUNwQztRQUNBVixjQUFjLGFBQWFTO0lBQy9CO0lBQ0EsSUFBSVgsS0FBS2EsVUFBVSxFQUFFO1FBQ2pCLElBQUlDLHVCQUF1QixLQUFLO1FBQ2hDLElBQUk7WUFDQUEsdUJBQXVCakIsb0ZBQXVCQSxDQUFDRyxLQUFLYSxVQUFVLEVBQUU7UUFDcEUsRUFDQSxPQUFPRCxZQUFZO1lBQ2YsT0FBTztnQkFBRUEsWUFBWUE7WUFBVztRQUNwQztRQUNBVixjQUFjLGNBQWNZO0lBQ2hDO0lBQ0EsK0NBQStDO0lBQy9DLG1FQUFtRTtJQUNuRSwwRUFBMEU7SUFDMUUseUVBQXlFO0lBQ3pFLGtFQUFrRTtJQUNsRSxtRUFBbUU7SUFDbkUsSUFBSUMsV0FBVyxJQUFJQyxjQUFjakI7SUFDakMsSUFBSWtCLGdCQUFnQmxCLFVBQVVtQixPQUFPLENBQUM7SUFDdEMsSUFBSUQsa0JBQWtCLENBQUMsR0FBRztRQUN0QkYsV0FBV2hCLFVBQVVvQixNQUFNLENBQUNGO1FBQzVCRCxjQUFjakIsVUFBVW9CLE1BQU0sQ0FBQyxHQUFHRjtJQUN0QztJQUNBLElBQUlHLG9CQUFvQkosWUFBWUUsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLE1BQU07SUFDaEUsSUFBSUcsU0FBU0wsY0FBY0ksb0JBQW9CbkIsWUFBWXFCLElBQUksQ0FBQyxPQUFPUDtJQUN2RSxPQUFPO1FBQUVNLFFBQVFBO0lBQU87QUFDNUIsRUFDQSw0Q0FBNEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbGFjay1ncmFwaHFsLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L2xpbmsvaHR0cC9yZXdyaXRlVVJJRm9yR0VULmpzPzY1NzAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc2VyaWFsaXplRmV0Y2hQYXJhbWV0ZXIgfSBmcm9tIFwiLi9zZXJpYWxpemVGZXRjaFBhcmFtZXRlci5qc1wiO1xuLy8gRm9yIEdFVCBvcGVyYXRpb25zLCByZXR1cm5zIHRoZSBnaXZlbiBVUkkgcmV3cml0dGVuIHdpdGggcGFyYW1ldGVycywgb3IgYVxuLy8gcGFyc2UgZXJyb3IuXG5leHBvcnQgZnVuY3Rpb24gcmV3cml0ZVVSSUZvckdFVChjaG9zZW5VUkksIGJvZHkpIHtcbiAgICAvLyBJbXBsZW1lbnQgdGhlIHN0YW5kYXJkIEhUVFAgR0VUIHNlcmlhbGl6YXRpb24sIHBsdXMgJ2V4dGVuc2lvbnMnLiBOb3RlXG4gICAgLy8gdGhlIGV4dHJhIGxldmVsIG9mIEpTT04gc2VyaWFsaXphdGlvbiFcbiAgICB2YXIgcXVlcnlQYXJhbXMgPSBbXTtcbiAgICB2YXIgYWRkUXVlcnlQYXJhbSA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgIHF1ZXJ5UGFyYW1zLnB1c2goXCJcIi5jb25jYXQoa2V5LCBcIj1cIikuY29uY2F0KGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpKTtcbiAgICB9O1xuICAgIGlmIChcInF1ZXJ5XCIgaW4gYm9keSkge1xuICAgICAgICBhZGRRdWVyeVBhcmFtKFwicXVlcnlcIiwgYm9keS5xdWVyeSk7XG4gICAgfVxuICAgIGlmIChib2R5Lm9wZXJhdGlvbk5hbWUpIHtcbiAgICAgICAgYWRkUXVlcnlQYXJhbShcIm9wZXJhdGlvbk5hbWVcIiwgYm9keS5vcGVyYXRpb25OYW1lKTtcbiAgICB9XG4gICAgaWYgKGJvZHkudmFyaWFibGVzKSB7XG4gICAgICAgIHZhciBzZXJpYWxpemVkVmFyaWFibGVzID0gdm9pZCAwO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgc2VyaWFsaXplZFZhcmlhYmxlcyA9IHNlcmlhbGl6ZUZldGNoUGFyYW1ldGVyKGJvZHkudmFyaWFibGVzLCBcIlZhcmlhYmxlcyBtYXBcIik7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKHBhcnNlRXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHBhcnNlRXJyb3I6IHBhcnNlRXJyb3IgfTtcbiAgICAgICAgfVxuICAgICAgICBhZGRRdWVyeVBhcmFtKFwidmFyaWFibGVzXCIsIHNlcmlhbGl6ZWRWYXJpYWJsZXMpO1xuICAgIH1cbiAgICBpZiAoYm9keS5leHRlbnNpb25zKSB7XG4gICAgICAgIHZhciBzZXJpYWxpemVkRXh0ZW5zaW9ucyA9IHZvaWQgMDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHNlcmlhbGl6ZWRFeHRlbnNpb25zID0gc2VyaWFsaXplRmV0Y2hQYXJhbWV0ZXIoYm9keS5leHRlbnNpb25zLCBcIkV4dGVuc2lvbnMgbWFwXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChwYXJzZUVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4geyBwYXJzZUVycm9yOiBwYXJzZUVycm9yIH07XG4gICAgICAgIH1cbiAgICAgICAgYWRkUXVlcnlQYXJhbShcImV4dGVuc2lvbnNcIiwgc2VyaWFsaXplZEV4dGVuc2lvbnMpO1xuICAgIH1cbiAgICAvLyBSZWNvbnN0cnVjdCB0aGUgVVJJIHdpdGggYWRkZWQgcXVlcnkgcGFyYW1zLlxuICAgIC8vIFhYWCBUaGlzIGFzc3VtZXMgdGhhdCB0aGUgVVJJIGlzIHdlbGwtZm9ybWVkIGFuZCB0aGF0IGl0IGRvZXNuJ3RcbiAgICAvLyAgICAgYWxyZWFkeSBjb250YWluIGFueSBvZiB0aGVzZSBxdWVyeSBwYXJhbXMuIFdlIGNvdWxkIGluc3RlYWQgdXNlIHRoZVxuICAgIC8vICAgICBVUkwgQVBJIGFuZCB0YWtlIGEgcG9seWZpbGwgKHdoYXR3Zy11cmxANikgZm9yIG9sZGVyIGJyb3dzZXJzIHRoYXRcbiAgICAvLyAgICAgZG9uJ3Qgc3VwcG9ydCBVUkxTZWFyY2hQYXJhbXMuIE5vdGUgdGhhdCBzb21lIGJyb3dzZXJzIChhbmRcbiAgICAvLyAgICAgdmVyc2lvbnMgb2Ygd2hhdHdnLXVybCkgc3VwcG9ydCBVUkwgYnV0IG5vdCBVUkxTZWFyY2hQYXJhbXMhXG4gICAgdmFyIGZyYWdtZW50ID0gXCJcIiwgcHJlRnJhZ21lbnQgPSBjaG9zZW5VUkk7XG4gICAgdmFyIGZyYWdtZW50U3RhcnQgPSBjaG9zZW5VUkkuaW5kZXhPZihcIiNcIik7XG4gICAgaWYgKGZyYWdtZW50U3RhcnQgIT09IC0xKSB7XG4gICAgICAgIGZyYWdtZW50ID0gY2hvc2VuVVJJLnN1YnN0cihmcmFnbWVudFN0YXJ0KTtcbiAgICAgICAgcHJlRnJhZ21lbnQgPSBjaG9zZW5VUkkuc3Vic3RyKDAsIGZyYWdtZW50U3RhcnQpO1xuICAgIH1cbiAgICB2YXIgcXVlcnlQYXJhbXNQcmVmaXggPSBwcmVGcmFnbWVudC5pbmRleE9mKFwiP1wiKSA9PT0gLTEgPyBcIj9cIiA6IFwiJlwiO1xuICAgIHZhciBuZXdVUkkgPSBwcmVGcmFnbWVudCArIHF1ZXJ5UGFyYW1zUHJlZml4ICsgcXVlcnlQYXJhbXMuam9pbihcIiZcIikgKyBmcmFnbWVudDtcbiAgICByZXR1cm4geyBuZXdVUkk6IG5ld1VSSSB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmV3cml0ZVVSSUZvckdFVC5qcy5tYXAiXSwibmFtZXMiOlsic2VyaWFsaXplRmV0Y2hQYXJhbWV0ZXIiLCJyZXdyaXRlVVJJRm9yR0VUIiwiY2hvc2VuVVJJIiwiYm9keSIsInF1ZXJ5UGFyYW1zIiwiYWRkUXVlcnlQYXJhbSIsImtleSIsInZhbHVlIiwicHVzaCIsImNvbmNhdCIsImVuY29kZVVSSUNvbXBvbmVudCIsInF1ZXJ5Iiwib3BlcmF0aW9uTmFtZSIsInZhcmlhYmxlcyIsInNlcmlhbGl6ZWRWYXJpYWJsZXMiLCJwYXJzZUVycm9yIiwiZXh0ZW5zaW9ucyIsInNlcmlhbGl6ZWRFeHRlbnNpb25zIiwiZnJhZ21lbnQiLCJwcmVGcmFnbWVudCIsImZyYWdtZW50U3RhcnQiLCJpbmRleE9mIiwic3Vic3RyIiwicXVlcnlQYXJhbXNQcmVmaXgiLCJuZXdVUkkiLCJqb2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/http/rewriteURIForGET.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/http/selectHttpOptionsAndBody.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/selectHttpOptionsAndBody.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultPrinter: () => (/* binding */ defaultPrinter),\n/* harmony export */   fallbackHttpConfig: () => (/* binding */ fallbackHttpConfig),\n/* harmony export */   selectHttpOptionsAndBody: () => (/* binding */ selectHttpOptionsAndBody),\n/* harmony export */   selectHttpOptionsAndBodyInternal: () => (/* binding */ selectHttpOptionsAndBodyInternal)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/print.js\");\n\n\nvar defaultHttpOptions = {\n    includeQuery: true,\n    includeExtensions: false,\n    preserveHeaderCase: false\n};\nvar defaultHeaders = {\n    // headers are case insensitive (https://stackoverflow.com/a/5259004)\n    accept: \"*/*\",\n    // The content-type header describes the type of the body of the request, and\n    // so it typically only is sent with requests that actually have bodies. One\n    // could imagine that Apollo Client would remove this header when constructing\n    // a GET request (which has no body), but we historically have not done that.\n    // This means that browsers will preflight all Apollo Client requests (even\n    // GET requests). Apollo Server's CSRF prevention feature (introduced in\n    // AS3.7) takes advantage of this fact and does not block requests with this\n    // header. If you want to drop this header from GET requests, then you should\n    // probably replace it with a `apollo-require-preflight` header, or servers\n    // with CSRF prevention enabled might block your GET request. See\n    // https://www.apollographql.com/docs/apollo-server/security/cors/#preventing-cross-site-request-forgery-csrf\n    // for more details.\n    \"content-type\": \"application/json\"\n};\nvar defaultOptions = {\n    method: \"POST\"\n};\nvar fallbackHttpConfig = {\n    http: defaultHttpOptions,\n    headers: defaultHeaders,\n    options: defaultOptions\n};\nvar defaultPrinter = function(ast, printer) {\n    return printer(ast);\n};\nfunction selectHttpOptionsAndBody(operation, fallbackConfig) {\n    var configs = [];\n    for(var _i = 2; _i < arguments.length; _i++){\n        configs[_i - 2] = arguments[_i];\n    }\n    configs.unshift(fallbackConfig);\n    return selectHttpOptionsAndBodyInternal.apply(void 0, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([\n        operation,\n        defaultPrinter\n    ], configs, false));\n}\nfunction selectHttpOptionsAndBodyInternal(operation, printer) {\n    var configs = [];\n    for(var _i = 2; _i < arguments.length; _i++){\n        configs[_i - 2] = arguments[_i];\n    }\n    var options = {};\n    var http = {};\n    configs.forEach(function(config) {\n        options = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, options), config.options), {\n            headers: (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, options.headers), config.headers)\n        });\n        if (config.credentials) {\n            options.credentials = config.credentials;\n        }\n        http = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, http), config.http);\n    });\n    if (options.headers) {\n        options.headers = removeDuplicateHeaders(options.headers, http.preserveHeaderCase);\n    }\n    //The body depends on the http options\n    var operationName = operation.operationName, extensions = operation.extensions, variables = operation.variables, query = operation.query;\n    var body = {\n        operationName: operationName,\n        variables: variables\n    };\n    if (http.includeExtensions) body.extensions = extensions;\n    // not sending the query (i.e persisted queries)\n    if (http.includeQuery) body.query = printer(query, _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.print);\n    return {\n        options: options,\n        body: body\n    };\n}\n// Remove potential duplicate header names, preserving last (by insertion order).\n// This is done to prevent unintentionally duplicating a header instead of\n// overwriting it (See #8447 and #8449).\nfunction removeDuplicateHeaders(headers, preserveHeaderCase) {\n    // If we're not preserving the case, just remove duplicates w/ normalization.\n    if (!preserveHeaderCase) {\n        var normalizedHeaders_1 = {};\n        Object.keys(Object(headers)).forEach(function(name) {\n            normalizedHeaders_1[name.toLowerCase()] = headers[name];\n        });\n        return normalizedHeaders_1;\n    }\n    // If we are preserving the case, remove duplicates w/ normalization,\n    // preserving the original name.\n    // This allows for non-http-spec-compliant servers that expect intentionally\n    // capitalized header names (See #6741).\n    var headerData = {};\n    Object.keys(Object(headers)).forEach(function(name) {\n        headerData[name.toLowerCase()] = {\n            originalName: name,\n            value: headers[name]\n        };\n    });\n    var normalizedHeaders = {};\n    Object.keys(headerData).forEach(function(name) {\n        normalizedHeaders[headerData[name].originalName] = headerData[name].value;\n    });\n    return normalizedHeaders;\n} //# sourceMappingURL=selectHttpOptionsAndBody.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/http/selectHttpOptionsAndBody.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/http/selectURI.js":
/*!************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/selectURI.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   selectURI: () => (/* binding */ selectURI)\n/* harmony export */ });\nvar selectURI = function(operation, fallbackURI) {\n    var context = operation.getContext();\n    var contextURI = context.uri;\n    if (contextURI) {\n        return contextURI;\n    } else if (typeof fallbackURI === \"function\") {\n        return fallbackURI(operation);\n    } else {\n        return fallbackURI || \"/graphql\";\n    }\n}; //# sourceMappingURL=selectURI.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL3NlbGVjdFVSSS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sSUFBSUEsWUFBWSxTQUFVQyxTQUFTLEVBQUVDLFdBQVc7SUFDbkQsSUFBSUMsVUFBVUYsVUFBVUcsVUFBVTtJQUNsQyxJQUFJQyxhQUFhRixRQUFRRyxHQUFHO0lBQzVCLElBQUlELFlBQVk7UUFDWixPQUFPQTtJQUNYLE9BQ0ssSUFBSSxPQUFPSCxnQkFBZ0IsWUFBWTtRQUN4QyxPQUFPQSxZQUFZRDtJQUN2QixPQUNLO1FBQ0QsT0FBT0MsZUFBZTtJQUMxQjtBQUNKLEVBQUUsQ0FDRixxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbGFjay1ncmFwaHFsLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L2xpbmsvaHR0cC9zZWxlY3RVUkkuanM/ZjBmYSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdmFyIHNlbGVjdFVSSSA9IGZ1bmN0aW9uIChvcGVyYXRpb24sIGZhbGxiYWNrVVJJKSB7XG4gICAgdmFyIGNvbnRleHQgPSBvcGVyYXRpb24uZ2V0Q29udGV4dCgpO1xuICAgIHZhciBjb250ZXh0VVJJID0gY29udGV4dC51cmk7XG4gICAgaWYgKGNvbnRleHRVUkkpIHtcbiAgICAgICAgcmV0dXJuIGNvbnRleHRVUkk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBmYWxsYmFja1VSSSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBmYWxsYmFja1VSSShvcGVyYXRpb24pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbGxiYWNrVVJJIHx8IFwiL2dyYXBocWxcIjtcbiAgICB9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2VsZWN0VVJJLmpzLm1hcCJdLCJuYW1lcyI6WyJzZWxlY3RVUkkiLCJvcGVyYXRpb24iLCJmYWxsYmFja1VSSSIsImNvbnRleHQiLCJnZXRDb250ZXh0IiwiY29udGV4dFVSSSIsInVyaSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/http/selectURI.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/http/serializeFetchParameter.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/serializeFetchParameter.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   serializeFetchParameter: () => (/* binding */ serializeFetchParameter)\n/* harmony export */ });\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n\nvar serializeFetchParameter = function(p, label) {\n    var serialized;\n    try {\n        serialized = JSON.stringify(p);\n    } catch (e) {\n        var parseError = (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(54, label, e.message);\n        parseError.parseError = e;\n        throw parseError;\n    }\n    return serialized;\n}; //# sourceMappingURL=serializeFetchParameter.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL3NlcmlhbGl6ZUZldGNoUGFyYW1ldGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXFFO0FBQzlELElBQUlDLDBCQUEwQixTQUFVQyxDQUFDLEVBQUVDLEtBQUs7SUFDbkQsSUFBSUM7SUFDSixJQUFJO1FBQ0FBLGFBQWFDLEtBQUtDLFNBQVMsQ0FBQ0o7SUFDaEMsRUFDQSxPQUFPSyxHQUFHO1FBQ04sSUFBSUMsYUFBYVIsOEVBQWlCQSxDQUFDLElBQUlHLE9BQU9JLEVBQUVFLE9BQU87UUFDdkRELFdBQVdBLFVBQVUsR0FBR0Q7UUFDeEIsTUFBTUM7SUFDVjtJQUNBLE9BQU9KO0FBQ1gsRUFBRSxDQUNGLG1EQUFtRCIsInNvdXJjZXMiOlsid2VicGFjazovL3NsYWNrLWdyYXBocWwtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL3NlcmlhbGl6ZUZldGNoUGFyYW1ldGVyLmpzP2JkNjciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbmV3SW52YXJpYW50RXJyb3IgfSBmcm9tIFwiLi4vLi4vdXRpbGl0aWVzL2dsb2JhbHMvaW5kZXguanNcIjtcbmV4cG9ydCB2YXIgc2VyaWFsaXplRmV0Y2hQYXJhbWV0ZXIgPSBmdW5jdGlvbiAocCwgbGFiZWwpIHtcbiAgICB2YXIgc2VyaWFsaXplZDtcbiAgICB0cnkge1xuICAgICAgICBzZXJpYWxpemVkID0gSlNPTi5zdHJpbmdpZnkocCk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHZhciBwYXJzZUVycm9yID0gbmV3SW52YXJpYW50RXJyb3IoNTQsIGxhYmVsLCBlLm1lc3NhZ2UpO1xuICAgICAgICBwYXJzZUVycm9yLnBhcnNlRXJyb3IgPSBlO1xuICAgICAgICB0aHJvdyBwYXJzZUVycm9yO1xuICAgIH1cbiAgICByZXR1cm4gc2VyaWFsaXplZDtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZXJpYWxpemVGZXRjaFBhcmFtZXRlci5qcy5tYXAiXSwibmFtZXMiOlsibmV3SW52YXJpYW50RXJyb3IiLCJzZXJpYWxpemVGZXRjaFBhcmFtZXRlciIsInAiLCJsYWJlbCIsInNlcmlhbGl6ZWQiLCJKU09OIiwic3RyaW5naWZ5IiwiZSIsInBhcnNlRXJyb3IiLCJtZXNzYWdlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/http/serializeFetchParameter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/utils/createOperation.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@apollo/client/link/utils/createOperation.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createOperation: () => (/* binding */ createOperation)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n\nfunction createOperation(starting, operation) {\n    var context = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, starting);\n    var setContext = function(next) {\n        if (typeof next === \"function\") {\n            context = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, context), next(context));\n        } else {\n            context = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, context), next);\n        }\n    };\n    var getContext = function() {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, context);\n    };\n    Object.defineProperty(operation, \"setContext\", {\n        enumerable: false,\n        value: setContext\n    });\n    Object.defineProperty(operation, \"getContext\", {\n        enumerable: false,\n        value: getContext\n    });\n    return operation;\n} //# sourceMappingURL=createOperation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay91dGlscy9jcmVhdGVPcGVyYXRpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBaUM7QUFDMUIsU0FBU0MsZ0JBQWdCQyxRQUFRLEVBQUVDLFNBQVM7SUFDL0MsSUFBSUMsVUFBVUosK0NBQVFBLENBQUMsQ0FBQyxHQUFHRTtJQUMzQixJQUFJRyxhQUFhLFNBQVVDLElBQUk7UUFDM0IsSUFBSSxPQUFPQSxTQUFTLFlBQVk7WUFDNUJGLFVBQVVKLCtDQUFRQSxDQUFDQSwrQ0FBUUEsQ0FBQyxDQUFDLEdBQUdJLFVBQVVFLEtBQUtGO1FBQ25ELE9BQ0s7WUFDREEsVUFBVUosK0NBQVFBLENBQUNBLCtDQUFRQSxDQUFDLENBQUMsR0FBR0ksVUFBVUU7UUFDOUM7SUFDSjtJQUNBLElBQUlDLGFBQWE7UUFBYyxPQUFRUCwrQ0FBUUEsQ0FBQyxDQUFDLEdBQUdJO0lBQVc7SUFDL0RJLE9BQU9DLGNBQWMsQ0FBQ04sV0FBVyxjQUFjO1FBQzNDTyxZQUFZO1FBQ1pDLE9BQU9OO0lBQ1g7SUFDQUcsT0FBT0MsY0FBYyxDQUFDTixXQUFXLGNBQWM7UUFDM0NPLFlBQVk7UUFDWkMsT0FBT0o7SUFDWDtJQUNBLE9BQU9KO0FBQ1gsRUFDQSwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbGFjay1ncmFwaHFsLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L2xpbmsvdXRpbHMvY3JlYXRlT3BlcmF0aW9uLmpzPzUzMTQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX19hc3NpZ24gfSBmcm9tIFwidHNsaWJcIjtcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVPcGVyYXRpb24oc3RhcnRpbmcsIG9wZXJhdGlvbikge1xuICAgIHZhciBjb250ZXh0ID0gX19hc3NpZ24oe30sIHN0YXJ0aW5nKTtcbiAgICB2YXIgc2V0Q29udGV4dCA9IGZ1bmN0aW9uIChuZXh0KSB7XG4gICAgICAgIGlmICh0eXBlb2YgbmV4dCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICBjb250ZXh0ID0gX19hc3NpZ24oX19hc3NpZ24oe30sIGNvbnRleHQpLCBuZXh0KGNvbnRleHQpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnRleHQgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgY29udGV4dCksIG5leHQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICB2YXIgZ2V0Q29udGV4dCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIChfX2Fzc2lnbih7fSwgY29udGV4dCkpOyB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvcGVyYXRpb24sIFwic2V0Q29udGV4dFwiLCB7XG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB2YWx1ZTogc2V0Q29udGV4dCxcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob3BlcmF0aW9uLCBcImdldENvbnRleHRcIiwge1xuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgdmFsdWU6IGdldENvbnRleHQsXG4gICAgfSk7XG4gICAgcmV0dXJuIG9wZXJhdGlvbjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyZWF0ZU9wZXJhdGlvbi5qcy5tYXAiXSwibmFtZXMiOlsiX19hc3NpZ24iLCJjcmVhdGVPcGVyYXRpb24iLCJzdGFydGluZyIsIm9wZXJhdGlvbiIsImNvbnRleHQiLCJzZXRDb250ZXh0IiwibmV4dCIsImdldENvbnRleHQiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJ2YWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/utils/createOperation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/utils/filterOperationVariables.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@apollo/client/link/utils/filterOperationVariables.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   filterOperationVariables: () => (/* binding */ filterOperationVariables)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! graphql */ \"(ssr)/./node_modules/graphql/language/visitor.mjs\");\n\n\nfunction filterOperationVariables(variables, query) {\n    var result = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, variables);\n    var unusedNames = new Set(Object.keys(variables));\n    (0,graphql__WEBPACK_IMPORTED_MODULE_1__.visit)(query, {\n        Variable: function(node, _key, parent) {\n            // A variable type definition at the top level of a query is not\n            // enough to silence server-side errors about the variable being\n            // unused, so variable definitions do not count as usage.\n            // https://spec.graphql.org/draft/#sec-All-Variables-Used\n            if (parent && parent.kind !== \"VariableDefinition\") {\n                unusedNames.delete(node.name.value);\n            }\n        }\n    });\n    unusedNames.forEach(function(name) {\n        delete result[name];\n    });\n    return result;\n} //# sourceMappingURL=filterOperationVariables.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay91dGlscy9maWx0ZXJPcGVyYXRpb25WYXJpYWJsZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWlDO0FBQ0Q7QUFDekIsU0FBU0UseUJBQXlCQyxTQUFTLEVBQUVDLEtBQUs7SUFDckQsSUFBSUMsU0FBU0wsK0NBQVFBLENBQUMsQ0FBQyxHQUFHRztJQUMxQixJQUFJRyxjQUFjLElBQUlDLElBQUlDLE9BQU9DLElBQUksQ0FBQ047SUFDdENGLDhDQUFLQSxDQUFDRyxPQUFPO1FBQ1RNLFVBQVUsU0FBVUMsSUFBSSxFQUFFQyxJQUFJLEVBQUVDLE1BQU07WUFDbEMsZ0VBQWdFO1lBQ2hFLGdFQUFnRTtZQUNoRSx5REFBeUQ7WUFDekQseURBQXlEO1lBQ3pELElBQUlBLFVBQ0FBLE9BQU9DLElBQUksS0FBSyxzQkFBc0I7Z0JBQ3RDUixZQUFZUyxNQUFNLENBQUNKLEtBQUtLLElBQUksQ0FBQ0MsS0FBSztZQUN0QztRQUNKO0lBQ0o7SUFDQVgsWUFBWVksT0FBTyxDQUFDLFNBQVVGLElBQUk7UUFDOUIsT0FBT1gsTUFBTSxDQUFDVyxLQUFLO0lBQ3ZCO0lBQ0EsT0FBT1g7QUFDWCxFQUNBLG9EQUFvRCIsInNvdXJjZXMiOlsid2VicGFjazovL3NsYWNrLWdyYXBocWwtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay91dGlscy9maWx0ZXJPcGVyYXRpb25WYXJpYWJsZXMuanM/OGFjZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfX2Fzc2lnbiB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgdmlzaXQgfSBmcm9tIFwiZ3JhcGhxbFwiO1xuZXhwb3J0IGZ1bmN0aW9uIGZpbHRlck9wZXJhdGlvblZhcmlhYmxlcyh2YXJpYWJsZXMsIHF1ZXJ5KSB7XG4gICAgdmFyIHJlc3VsdCA9IF9fYXNzaWduKHt9LCB2YXJpYWJsZXMpO1xuICAgIHZhciB1bnVzZWROYW1lcyA9IG5ldyBTZXQoT2JqZWN0LmtleXModmFyaWFibGVzKSk7XG4gICAgdmlzaXQocXVlcnksIHtcbiAgICAgICAgVmFyaWFibGU6IGZ1bmN0aW9uIChub2RlLCBfa2V5LCBwYXJlbnQpIHtcbiAgICAgICAgICAgIC8vIEEgdmFyaWFibGUgdHlwZSBkZWZpbml0aW9uIGF0IHRoZSB0b3AgbGV2ZWwgb2YgYSBxdWVyeSBpcyBub3RcbiAgICAgICAgICAgIC8vIGVub3VnaCB0byBzaWxlbmNlIHNlcnZlci1zaWRlIGVycm9ycyBhYm91dCB0aGUgdmFyaWFibGUgYmVpbmdcbiAgICAgICAgICAgIC8vIHVudXNlZCwgc28gdmFyaWFibGUgZGVmaW5pdGlvbnMgZG8gbm90IGNvdW50IGFzIHVzYWdlLlxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9zcGVjLmdyYXBocWwub3JnL2RyYWZ0LyNzZWMtQWxsLVZhcmlhYmxlcy1Vc2VkXG4gICAgICAgICAgICBpZiAocGFyZW50ICYmXG4gICAgICAgICAgICAgICAgcGFyZW50LmtpbmQgIT09IFwiVmFyaWFibGVEZWZpbml0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICB1bnVzZWROYW1lcy5kZWxldGUobm9kZS5uYW1lLnZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICB9KTtcbiAgICB1bnVzZWROYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIGRlbGV0ZSByZXN1bHRbbmFtZV07XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpbHRlck9wZXJhdGlvblZhcmlhYmxlcy5qcy5tYXAiXSwibmFtZXMiOlsiX19hc3NpZ24iLCJ2aXNpdCIsImZpbHRlck9wZXJhdGlvblZhcmlhYmxlcyIsInZhcmlhYmxlcyIsInF1ZXJ5IiwicmVzdWx0IiwidW51c2VkTmFtZXMiLCJTZXQiLCJPYmplY3QiLCJrZXlzIiwiVmFyaWFibGUiLCJub2RlIiwiX2tleSIsInBhcmVudCIsImtpbmQiLCJkZWxldGUiLCJuYW1lIiwidmFsdWUiLCJmb3JFYWNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/utils/filterOperationVariables.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/utils/fromError.js":
/*!*************************************************************!*\
  !*** ./node_modules/@apollo/client/link/utils/fromError.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fromError: () => (/* binding */ fromError)\n/* harmony export */ });\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/zen-observable-ts/module.js\");\n\n/**\n * @deprecated `fromError` will be removed in Apollo Client 4.0. This is safe\n * to use in 3.x.\n *\n * **Recommended now**\n *\n * No action needed\n *\n * **When upgrading**\n *\n * Use RxJS's [`throwError`](https://rxjs.dev/api/index/function/throwError) function.\n *\n * ```ts\n * const observable = throwError(() => new Error(...));\n * ```\n */ function fromError(errorValue) {\n    return new _utilities_index_js__WEBPACK_IMPORTED_MODULE_0__.Observable(function(observer) {\n        observer.error(errorValue);\n    });\n} //# sourceMappingURL=fromError.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay91dGlscy9mcm9tRXJyb3IuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBc0Q7QUFDdEQ7Ozs7Ozs7Ozs7Ozs7OztDQWVDLEdBQ00sU0FBU0MsVUFBVUMsVUFBVTtJQUNoQyxPQUFPLElBQUlGLDJEQUFVQSxDQUFDLFNBQVVHLFFBQVE7UUFDcENBLFNBQVNDLEtBQUssQ0FBQ0Y7SUFDbkI7QUFDSixFQUNBLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL3NsYWNrLWdyYXBocWwtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay91dGlscy9mcm9tRXJyb3IuanM/OGUyNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcIi4uLy4uL3V0aWxpdGllcy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAZGVwcmVjYXRlZCBgZnJvbUVycm9yYCB3aWxsIGJlIHJlbW92ZWQgaW4gQXBvbGxvIENsaWVudCA0LjAuIFRoaXMgaXMgc2FmZVxuICogdG8gdXNlIGluIDMueC5cbiAqXG4gKiAqKlJlY29tbWVuZGVkIG5vdyoqXG4gKlxuICogTm8gYWN0aW9uIG5lZWRlZFxuICpcbiAqICoqV2hlbiB1cGdyYWRpbmcqKlxuICpcbiAqIFVzZSBSeEpTJ3MgW2B0aHJvd0Vycm9yYF0oaHR0cHM6Ly9yeGpzLmRldi9hcGkvaW5kZXgvZnVuY3Rpb24vdGhyb3dFcnJvcikgZnVuY3Rpb24uXG4gKlxuICogYGBgdHNcbiAqIGNvbnN0IG9ic2VydmFibGUgPSB0aHJvd0Vycm9yKCgpID0+IG5ldyBFcnJvciguLi4pKTtcbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gZnJvbUVycm9yKGVycm9yVmFsdWUpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICAgIG9ic2VydmVyLmVycm9yKGVycm9yVmFsdWUpO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZnJvbUVycm9yLmpzLm1hcCJdLCJuYW1lcyI6WyJPYnNlcnZhYmxlIiwiZnJvbUVycm9yIiwiZXJyb3JWYWx1ZSIsIm9ic2VydmVyIiwiZXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/utils/fromError.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/utils/throwServerError.js":
/*!********************************************************************!*\
  !*** ./node_modules/@apollo/client/link/utils/throwServerError.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   throwServerError: () => (/* binding */ throwServerError)\n/* harmony export */ });\n/**\n * @deprecated `throwServerError` will be removed in Apollo Client 4.0. This is\n * safe to use in Apollo Client 3.x.\n *\n * **Recommended now**\n *\n * No action needed\n *\n * **When migrating**\n *\n * `ServerError` is a subclass of `Error`. To throw a server error, use\n * `throw new ServerError(...)` instead.\n *\n * ```ts\n * throw new ServerError(\"error message\", { response, result });\n * ```\n */ var throwServerError = function(response, result, message) {\n    var error = new Error(message);\n    error.name = \"ServerError\";\n    error.response = response;\n    error.statusCode = response.status;\n    error.result = result;\n    throw error;\n}; //# sourceMappingURL=throwServerError.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay91dGlscy90aHJvd1NlcnZlckVycm9yLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7OztDQWdCQyxHQUNNLElBQUlBLG1CQUFtQixTQUFVQyxRQUFRLEVBQUVDLE1BQU0sRUFBRUMsT0FBTztJQUM3RCxJQUFJQyxRQUFRLElBQUlDLE1BQU1GO0lBQ3RCQyxNQUFNRSxJQUFJLEdBQUc7SUFDYkYsTUFBTUgsUUFBUSxHQUFHQTtJQUNqQkcsTUFBTUcsVUFBVSxHQUFHTixTQUFTTyxNQUFNO0lBQ2xDSixNQUFNRixNQUFNLEdBQUdBO0lBQ2YsTUFBTUU7QUFDVixFQUFFLENBQ0YsNENBQTRDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2xhY2stZ3JhcGhxbC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9saW5rL3V0aWxzL3Rocm93U2VydmVyRXJyb3IuanM/NDllZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBkZXByZWNhdGVkIGB0aHJvd1NlcnZlckVycm9yYCB3aWxsIGJlIHJlbW92ZWQgaW4gQXBvbGxvIENsaWVudCA0LjAuIFRoaXMgaXNcbiAqIHNhZmUgdG8gdXNlIGluIEFwb2xsbyBDbGllbnQgMy54LlxuICpcbiAqICoqUmVjb21tZW5kZWQgbm93KipcbiAqXG4gKiBObyBhY3Rpb24gbmVlZGVkXG4gKlxuICogKipXaGVuIG1pZ3JhdGluZyoqXG4gKlxuICogYFNlcnZlckVycm9yYCBpcyBhIHN1YmNsYXNzIG9mIGBFcnJvcmAuIFRvIHRocm93IGEgc2VydmVyIGVycm9yLCB1c2VcbiAqIGB0aHJvdyBuZXcgU2VydmVyRXJyb3IoLi4uKWAgaW5zdGVhZC5cbiAqXG4gKiBgYGB0c1xuICogdGhyb3cgbmV3IFNlcnZlckVycm9yKFwiZXJyb3IgbWVzc2FnZVwiLCB7IHJlc3BvbnNlLCByZXN1bHQgfSk7XG4gKiBgYGBcbiAqL1xuZXhwb3J0IHZhciB0aHJvd1NlcnZlckVycm9yID0gZnVuY3Rpb24gKHJlc3BvbnNlLCByZXN1bHQsIG1lc3NhZ2UpIHtcbiAgICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgZXJyb3IubmFtZSA9IFwiU2VydmVyRXJyb3JcIjtcbiAgICBlcnJvci5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICAgIGVycm9yLnN0YXR1c0NvZGUgPSByZXNwb25zZS5zdGF0dXM7XG4gICAgZXJyb3IucmVzdWx0ID0gcmVzdWx0O1xuICAgIHRocm93IGVycm9yO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRocm93U2VydmVyRXJyb3IuanMubWFwIl0sIm5hbWVzIjpbInRocm93U2VydmVyRXJyb3IiLCJyZXNwb25zZSIsInJlc3VsdCIsIm1lc3NhZ2UiLCJlcnJvciIsIkVycm9yIiwibmFtZSIsInN0YXR1c0NvZGUiLCJzdGF0dXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/utils/throwServerError.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/utils/transformOperation.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@apollo/client/link/utils/transformOperation.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   transformOperation: () => (/* binding */ transformOperation)\n/* harmony export */ });\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n\nfunction transformOperation(operation) {\n    var transformedOperation = {\n        variables: operation.variables || {},\n        extensions: operation.extensions || {},\n        operationName: operation.operationName,\n        query: operation.query\n    };\n    // Best guess at an operation name\n    if (!transformedOperation.operationName) {\n        transformedOperation.operationName = typeof transformedOperation.query !== \"string\" ? (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_0__.getOperationName)(transformedOperation.query) || undefined : \"\";\n    }\n    return transformedOperation;\n} //# sourceMappingURL=transformOperation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay91dGlscy90cmFuc2Zvcm1PcGVyYXRpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBNEQ7QUFDckQsU0FBU0MsbUJBQW1CQyxTQUFTO0lBQ3hDLElBQUlDLHVCQUF1QjtRQUN2QkMsV0FBV0YsVUFBVUUsU0FBUyxJQUFJLENBQUM7UUFDbkNDLFlBQVlILFVBQVVHLFVBQVUsSUFBSSxDQUFDO1FBQ3JDQyxlQUFlSixVQUFVSSxhQUFhO1FBQ3RDQyxPQUFPTCxVQUFVSyxLQUFLO0lBQzFCO0lBQ0Esa0NBQWtDO0lBQ2xDLElBQUksQ0FBQ0oscUJBQXFCRyxhQUFhLEVBQUU7UUFDckNILHFCQUFxQkcsYUFBYSxHQUM5QixPQUFPSCxxQkFBcUJJLEtBQUssS0FBSyxXQUNsQ1AscUVBQWdCQSxDQUFDRyxxQkFBcUJJLEtBQUssS0FBS0MsWUFDOUM7SUFDZDtJQUNBLE9BQU9MO0FBQ1gsRUFDQSw4Q0FBOEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbGFjay1ncmFwaHFsLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L2xpbmsvdXRpbHMvdHJhbnNmb3JtT3BlcmF0aW9uLmpzP2VhMTAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0T3BlcmF0aW9uTmFtZSB9IGZyb20gXCIuLi8uLi91dGlsaXRpZXMvaW5kZXguanNcIjtcbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1PcGVyYXRpb24ob3BlcmF0aW9uKSB7XG4gICAgdmFyIHRyYW5zZm9ybWVkT3BlcmF0aW9uID0ge1xuICAgICAgICB2YXJpYWJsZXM6IG9wZXJhdGlvbi52YXJpYWJsZXMgfHwge30sXG4gICAgICAgIGV4dGVuc2lvbnM6IG9wZXJhdGlvbi5leHRlbnNpb25zIHx8IHt9LFxuICAgICAgICBvcGVyYXRpb25OYW1lOiBvcGVyYXRpb24ub3BlcmF0aW9uTmFtZSxcbiAgICAgICAgcXVlcnk6IG9wZXJhdGlvbi5xdWVyeSxcbiAgICB9O1xuICAgIC8vIEJlc3QgZ3Vlc3MgYXQgYW4gb3BlcmF0aW9uIG5hbWVcbiAgICBpZiAoIXRyYW5zZm9ybWVkT3BlcmF0aW9uLm9wZXJhdGlvbk5hbWUpIHtcbiAgICAgICAgdHJhbnNmb3JtZWRPcGVyYXRpb24ub3BlcmF0aW9uTmFtZSA9XG4gICAgICAgICAgICB0eXBlb2YgdHJhbnNmb3JtZWRPcGVyYXRpb24ucXVlcnkgIT09IFwic3RyaW5nXCIgP1xuICAgICAgICAgICAgICAgIGdldE9wZXJhdGlvbk5hbWUodHJhbnNmb3JtZWRPcGVyYXRpb24ucXVlcnkpIHx8IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgIDogXCJcIjtcbiAgICB9XG4gICAgcmV0dXJuIHRyYW5zZm9ybWVkT3BlcmF0aW9uO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJhbnNmb3JtT3BlcmF0aW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJnZXRPcGVyYXRpb25OYW1lIiwidHJhbnNmb3JtT3BlcmF0aW9uIiwib3BlcmF0aW9uIiwidHJhbnNmb3JtZWRPcGVyYXRpb24iLCJ2YXJpYWJsZXMiLCJleHRlbnNpb25zIiwib3BlcmF0aW9uTmFtZSIsInF1ZXJ5IiwidW5kZWZpbmVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/utils/transformOperation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/utils/validateOperation.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@apollo/client/link/utils/validateOperation.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   validateOperation: () => (/* binding */ validateOperation)\n/* harmony export */ });\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n\nfunction validateOperation(operation) {\n    var OPERATION_FIELDS = [\n        \"query\",\n        \"operationName\",\n        \"variables\",\n        \"extensions\",\n        \"context\"\n    ];\n    for(var _i = 0, _a = Object.keys(operation); _i < _a.length; _i++){\n        var key = _a[_i];\n        if (OPERATION_FIELDS.indexOf(key) < 0) {\n            throw (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(58, key);\n        }\n    }\n    return operation;\n} //# sourceMappingURL=validateOperation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay91dGlscy92YWxpZGF0ZU9wZXJhdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFxRTtBQUM5RCxTQUFTQyxrQkFBa0JDLFNBQVM7SUFDdkMsSUFBSUMsbUJBQW1CO1FBQ25CO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7S0FDSDtJQUNELElBQUssSUFBSUMsS0FBSyxHQUFHQyxLQUFLQyxPQUFPQyxJQUFJLENBQUNMLFlBQVlFLEtBQUtDLEdBQUdHLE1BQU0sRUFBRUosS0FBTTtRQUNoRSxJQUFJSyxNQUFNSixFQUFFLENBQUNELEdBQUc7UUFDaEIsSUFBSUQsaUJBQWlCTyxPQUFPLENBQUNELE9BQU8sR0FBRztZQUNuQyxNQUFNVCw4RUFBaUJBLENBQUMsSUFBSVM7UUFDaEM7SUFDSjtJQUNBLE9BQU9QO0FBQ1gsRUFDQSw2Q0FBNkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbGFjay1ncmFwaHFsLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L2xpbmsvdXRpbHMvdmFsaWRhdGVPcGVyYXRpb24uanM/MGYwOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBuZXdJbnZhcmlhbnRFcnJvciB9IGZyb20gXCIuLi8uLi91dGlsaXRpZXMvZ2xvYmFscy9pbmRleC5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlT3BlcmF0aW9uKG9wZXJhdGlvbikge1xuICAgIHZhciBPUEVSQVRJT05fRklFTERTID0gW1xuICAgICAgICBcInF1ZXJ5XCIsXG4gICAgICAgIFwib3BlcmF0aW9uTmFtZVwiLFxuICAgICAgICBcInZhcmlhYmxlc1wiLFxuICAgICAgICBcImV4dGVuc2lvbnNcIixcbiAgICAgICAgXCJjb250ZXh0XCIsXG4gICAgXTtcbiAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gT2JqZWN0LmtleXMob3BlcmF0aW9uKTsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIGtleSA9IF9hW19pXTtcbiAgICAgICAgaWYgKE9QRVJBVElPTl9GSUVMRFMuaW5kZXhPZihrZXkpIDwgMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3SW52YXJpYW50RXJyb3IoNTgsIGtleSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9wZXJhdGlvbjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZhbGlkYXRlT3BlcmF0aW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJuZXdJbnZhcmlhbnRFcnJvciIsInZhbGlkYXRlT3BlcmF0aW9uIiwib3BlcmF0aW9uIiwiT1BFUkFUSU9OX0ZJRUxEUyIsIl9pIiwiX2EiLCJPYmplY3QiLCJrZXlzIiwibGVuZ3RoIiwia2V5IiwiaW5kZXhPZiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/utils/validateOperation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/masking/maskDefinition.js":
/*!***************************************************************!*\
  !*** ./node_modules/@apollo/client/masking/maskDefinition.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   maskDefinition: () => (/* binding */ maskDefinition)\n/* harmony export */ });\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! graphql */ \"(ssr)/./node_modules/graphql/language/kinds.mjs\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/maybeDeepFreeze.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/directives.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@apollo/client/masking/utils.js\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n\n\n\n\nfunction maskDefinition(data, selectionSet, context) {\n    return _utils_js__WEBPACK_IMPORTED_MODULE_1__.disableWarningsSlot.withValue(true, function() {\n        var masked = maskSelectionSet(data, selectionSet, context, false);\n        if (Object.isFrozen(data)) {\n            (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.maybeDeepFreeze)(masked);\n        }\n        return masked;\n    });\n}\nfunction getMutableTarget(data, mutableTargets) {\n    if (mutableTargets.has(data)) {\n        return mutableTargets.get(data);\n    }\n    var mutableTarget = Array.isArray(data) ? [] : Object.create(null);\n    mutableTargets.set(data, mutableTarget);\n    return mutableTarget;\n}\nfunction maskSelectionSet(data, selectionSet, context, migration, path) {\n    var _a;\n    var knownChanged = context.knownChanged;\n    var memo = getMutableTarget(data, context.mutableTargets);\n    if (Array.isArray(data)) {\n        for(var _i = 0, _b = Array.from(data.entries()); _i < _b.length; _i++){\n            var _c = _b[_i], index = _c[0], item = _c[1];\n            if (item === null) {\n                memo[index] = null;\n                continue;\n            }\n            var masked = maskSelectionSet(item, selectionSet, context, migration, globalThis.__DEV__ !== false ? \"\".concat(path || \"\", \"[\").concat(index, \"]\") : void 0);\n            if (knownChanged.has(masked)) {\n                knownChanged.add(memo);\n            }\n            memo[index] = masked;\n        }\n        return knownChanged.has(memo) ? memo : data;\n    }\n    for(var _d = 0, _e = selectionSet.selections; _d < _e.length; _d++){\n        var selection = _e[_d];\n        var value = void 0;\n        // we later want to add acessor warnings to the final result\n        // so we need a new object to add the accessor warning to\n        if (migration) {\n            knownChanged.add(memo);\n        }\n        if (selection.kind === graphql__WEBPACK_IMPORTED_MODULE_3__.Kind.FIELD) {\n            var keyName = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.resultKeyNameFromField)(selection);\n            var childSelectionSet = selection.selectionSet;\n            value = memo[keyName] || data[keyName];\n            if (value === void 0) {\n                continue;\n            }\n            if (childSelectionSet && value !== null) {\n                var masked = maskSelectionSet(data[keyName], childSelectionSet, context, migration, globalThis.__DEV__ !== false ? \"\".concat(path || \"\", \".\").concat(keyName) : void 0);\n                if (knownChanged.has(masked)) {\n                    value = masked;\n                }\n            }\n            if (!(globalThis.__DEV__ !== false)) {\n                memo[keyName] = value;\n            }\n            if (globalThis.__DEV__ !== false) {\n                if (migration && keyName !== \"__typename\" && // either the field is not present in the memo object\n                // or it has a `get` descriptor, not a `value` descriptor\n                // => it is a warning accessor and we can overwrite it\n                // with another accessor\n                !((_a = Object.getOwnPropertyDescriptor(memo, keyName)) === null || _a === void 0 ? void 0 : _a.value)) {\n                    Object.defineProperty(memo, keyName, getAccessorWarningDescriptor(keyName, value, path || \"\", context.operationName, context.operationType));\n                } else {\n                    delete memo[keyName];\n                    memo[keyName] = value;\n                }\n            }\n        }\n        if (selection.kind === graphql__WEBPACK_IMPORTED_MODULE_3__.Kind.INLINE_FRAGMENT && (!selection.typeCondition || context.cache.fragmentMatches(selection, data.__typename))) {\n            value = maskSelectionSet(data, selection.selectionSet, context, migration, path);\n        }\n        if (selection.kind === graphql__WEBPACK_IMPORTED_MODULE_3__.Kind.FRAGMENT_SPREAD) {\n            var fragmentName = selection.name.value;\n            var fragment = context.fragmentMap[fragmentName] || (context.fragmentMap[fragmentName] = context.cache.lookupFragment(fragmentName));\n            (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(fragment, 59, fragmentName);\n            var mode = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.getFragmentMaskMode)(selection);\n            if (mode !== \"mask\") {\n                value = maskSelectionSet(data, fragment.selectionSet, context, mode === \"migrate\", path);\n            }\n        }\n        if (knownChanged.has(value)) {\n            knownChanged.add(memo);\n        }\n    }\n    if (\"__typename\" in data && !(\"__typename\" in memo)) {\n        memo.__typename = data.__typename;\n    }\n    // This check prevents cases where masked fields may accidentally be\n    // returned as part of this object when the fragment also selects\n    // additional fields from the same child selection.\n    if (Object.keys(memo).length !== Object.keys(data).length) {\n        knownChanged.add(memo);\n    }\n    return knownChanged.has(memo) ? memo : data;\n}\nfunction getAccessorWarningDescriptor(fieldName, value, path, operationName, operationType) {\n    var getValue = function() {\n        if (_utils_js__WEBPACK_IMPORTED_MODULE_1__.disableWarningsSlot.getValue()) {\n            return value;\n        }\n        globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(60, operationName ? \"\".concat(operationType, \" '\").concat(operationName, \"'\") : \"anonymous \".concat(operationType), \"\".concat(path, \".\").concat(fieldName).replace(/^\\./, \"\"));\n        getValue = function() {\n            return value;\n        };\n        return value;\n    };\n    return {\n        get: function() {\n            return getValue();\n        },\n        set: function(newValue) {\n            getValue = function() {\n                return newValue;\n            };\n        },\n        enumerable: true,\n        configurable: true\n    };\n} //# sourceMappingURL=maskDefinition.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbWFza2luZy9tYXNrRGVmaW5pdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQStCO0FBQ3VFO0FBQ3JEO0FBQ1M7QUFDbkQsU0FBU00sZUFBZUMsSUFBSSxFQUFFQyxZQUFZLEVBQUVDLE9BQU87SUFDdEQsT0FBT0wsMERBQW1CQSxDQUFDTSxTQUFTLENBQUMsTUFBTTtRQUN2QyxJQUFJQyxTQUFTQyxpQkFBaUJMLE1BQU1DLGNBQWNDLFNBQVM7UUFDM0QsSUFBSUksT0FBT0MsUUFBUSxDQUFDUCxPQUFPO1lBQ3ZCTCxvRUFBZUEsQ0FBQ1M7UUFDcEI7UUFDQSxPQUFPQTtJQUNYO0FBQ0o7QUFDQSxTQUFTSSxpQkFBaUJSLElBQUksRUFBRVMsY0FBYztJQUMxQyxJQUFJQSxlQUFlQyxHQUFHLENBQUNWLE9BQU87UUFDMUIsT0FBT1MsZUFBZUUsR0FBRyxDQUFDWDtJQUM5QjtJQUNBLElBQUlZLGdCQUFnQkMsTUFBTUMsT0FBTyxDQUFDZCxRQUFRLEVBQUUsR0FBR00sT0FBT1MsTUFBTSxDQUFDO0lBQzdETixlQUFlTyxHQUFHLENBQUNoQixNQUFNWTtJQUN6QixPQUFPQTtBQUNYO0FBQ0EsU0FBU1AsaUJBQWlCTCxJQUFJLEVBQUVDLFlBQVksRUFBRUMsT0FBTyxFQUFFZSxTQUFTLEVBQUVDLElBQUk7SUFDbEUsSUFBSUM7SUFDSixJQUFJQyxlQUFlbEIsUUFBUWtCLFlBQVk7SUFDdkMsSUFBSUMsT0FBT2IsaUJBQWlCUixNQUFNRSxRQUFRTyxjQUFjO0lBQ3hELElBQUlJLE1BQU1DLE9BQU8sQ0FBQ2QsT0FBTztRQUNyQixJQUFLLElBQUlzQixLQUFLLEdBQUdDLEtBQUtWLE1BQU1XLElBQUksQ0FBQ3hCLEtBQUt5QixPQUFPLEtBQUtILEtBQUtDLEdBQUdHLE1BQU0sRUFBRUosS0FBTTtZQUNwRSxJQUFJSyxLQUFLSixFQUFFLENBQUNELEdBQUcsRUFBRU0sUUFBUUQsRUFBRSxDQUFD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QkFDL0MsR0FBR2QsTUFBTSxDQUFDZSxlQUFlLE1BQU1mLE1BQU0sQ0FBQ2MsZUFBZSxPQUNuRCxhQUFhZCxNQUFNLENBQUNlLGdCQUFnQixHQUFHZixNQUFNLENBQUNkLE1BQU0sS0FBS2MsTUFBTSxDQUFDNkIsV0FBV0csT0FBTyxDQUFDLE9BQU87UUFDaEdGLFdBQVc7WUFBYyxPQUFPeEI7UUFBTztRQUN2QyxPQUFPQTtJQUNYO0lBQ0EsT0FBTztRQUNIM0IsS0FBSztZQUNELE9BQU9tRDtRQUNYO1FBQ0E5QyxLQUFLLFNBQVVpRCxRQUFRO1lBQ25CSCxXQUFXO2dCQUFjLE9BQU9HO1lBQVU7UUFDOUM7UUFDQUMsWUFBWTtRQUNaQyxjQUFjO0lBQ2xCO0FBQ0osRUFDQSwwQ0FBMEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbGFjay1ncmFwaHFsLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L21hc2tpbmcvbWFza0RlZmluaXRpb24uanM/MjhjOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBLaW5kIH0gZnJvbSBcImdyYXBocWxcIjtcbmltcG9ydCB7IGdldEZyYWdtZW50TWFza01vZGUsIG1heWJlRGVlcEZyZWV6ZSwgcmVzdWx0S2V5TmFtZUZyb21GaWVsZCwgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBkaXNhYmxlV2FybmluZ3NTbG90IH0gZnJvbSBcIi4vdXRpbHMuanNcIjtcbmltcG9ydCB7IGludmFyaWFudCB9IGZyb20gXCIuLi91dGlsaXRpZXMvZ2xvYmFscy9pbmRleC5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIG1hc2tEZWZpbml0aW9uKGRhdGEsIHNlbGVjdGlvblNldCwgY29udGV4dCkge1xuICAgIHJldHVybiBkaXNhYmxlV2FybmluZ3NTbG90LndpdGhWYWx1ZSh0cnVlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBtYXNrZWQgPSBtYXNrU2VsZWN0aW9uU2V0KGRhdGEsIHNlbGVjdGlvblNldCwgY29udGV4dCwgZmFsc2UpO1xuICAgICAgICBpZiAoT2JqZWN0LmlzRnJvemVuKGRhdGEpKSB7XG4gICAgICAgICAgICBtYXliZURlZXBGcmVlemUobWFza2VkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWFza2VkO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gZ2V0TXV0YWJsZVRhcmdldChkYXRhLCBtdXRhYmxlVGFyZ2V0cykge1xuICAgIGlmIChtdXRhYmxlVGFyZ2V0cy5oYXMoZGF0YSkpIHtcbiAgICAgICAgcmV0dXJuIG11dGFibGVUYXJnZXRzLmdldChkYXRhKTtcbiAgICB9XG4gICAgdmFyIG11dGFibGVUYXJnZXQgPSBBcnJheS5pc0FycmF5KGRhdGEpID8gW10gOiBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIG11dGFibGVUYXJnZXRzLnNldChkYXRhLCBtdXRhYmxlVGFyZ2V0KTtcbiAgICByZXR1cm4gbXV0YWJsZVRhcmdldDtcbn1cbmZ1bmN0aW9uIG1hc2tTZWxlY3Rpb25TZXQoZGF0YSwgc2VsZWN0aW9uU2V0LCBjb250ZXh0LCBtaWdyYXRpb24sIHBhdGgpIHtcbiAgICB2YXIgX2E7XG4gICAgdmFyIGtub3duQ2hhbmdlZCA9IGNvbnRleHQua25vd25DaGFuZ2VkO1xuICAgIHZhciBtZW1vID0gZ2V0TXV0YWJsZVRhcmdldChkYXRhLCBjb250ZXh0Lm11dGFibGVUYXJnZXRzKTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSkge1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9iID0gQXJyYXkuZnJvbShkYXRhLmVudHJpZXMoKSk7IF9pIDwgX2IubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgX2MgPSBfYltfaV0sIGluZGV4ID0gX2NbMF0sIGl0ZW0gPSBfY1sxXTtcbiAgICAgICAgICAgIGlmIChpdGVtID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbWVtb1tpbmRleF0gPSBudWxsO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG1hc2tlZCA9IG1hc2tTZWxlY3Rpb25TZXQoaXRlbSwgc2VsZWN0aW9uU2V0LCBjb250ZXh0LCBtaWdyYXRpb24sIGdsb2JhbFRoaXMuX19ERVZfXyAhPT0gZmFsc2UgPyBcIlwiLmNvbmNhdChwYXRoIHx8IFwiXCIsIFwiW1wiKS5jb25jYXQoaW5kZXgsIFwiXVwiKSA6IHZvaWQgMCk7XG4gICAgICAgICAgICBpZiAoa25vd25DaGFuZ2VkLmhhcyhtYXNrZWQpKSB7XG4gICAgICAgICAgICAgICAga25vd25DaGFuZ2VkLmFkZChtZW1vKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1lbW9baW5kZXhdID0gbWFza2VkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBrbm93bkNoYW5nZWQuaGFzKG1lbW8pID8gbWVtbyA6IGRhdGE7XG4gICAgfVxuICAgIGZvciAodmFyIF9kID0gMCwgX2UgPSBzZWxlY3Rpb25TZXQuc2VsZWN0aW9uczsgX2QgPCBfZS5sZW5ndGg7IF9kKyspIHtcbiAgICAgICAgdmFyIHNlbGVjdGlvbiA9IF9lW19kXTtcbiAgICAgICAgdmFyIHZhbHVlID0gdm9pZCAwO1xuICAgICAgICAvLyB3ZSBsYXRlciB3YW50IHRvIGFkZCBhY2Vzc29yIHdhcm5pbmdzIHRvIHRoZSBmaW5hbCByZXN1bHRcbiAgICAgICAgLy8gc28gd2UgbmVlZCBhIG5ldyBvYmplY3QgdG8gYWRkIHRoZSBhY2Nlc3NvciB3YXJuaW5nIHRvXG4gICAgICAgIGlmIChtaWdyYXRpb24pIHtcbiAgICAgICAgICAgIGtub3duQ2hhbmdlZC5hZGQobWVtbyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlbGVjdGlvbi5raW5kID09PSBLaW5kLkZJRUxEKSB7XG4gICAgICAgICAgICB2YXIga2V5TmFtZSA9IHJlc3VsdEtleU5hbWVGcm9tRmllbGQoc2VsZWN0aW9uKTtcbiAgICAgICAgICAgIHZhciBjaGlsZFNlbGVjdGlvblNldCA9IHNlbGVjdGlvbi5zZWxlY3Rpb25TZXQ7XG4gICAgICAgICAgICB2YWx1ZSA9IG1lbW9ba2V5TmFtZV0gfHwgZGF0YVtrZXlOYW1lXTtcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2hpbGRTZWxlY3Rpb25TZXQgJiYgdmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB2YXIgbWFza2VkID0gbWFza1NlbGVjdGlvblNldChkYXRhW2tleU5hbWVdLCBjaGlsZFNlbGVjdGlvblNldCwgY29udGV4dCwgbWlncmF0aW9uLCBnbG9iYWxUaGlzLl9fREVWX18gIT09IGZhbHNlID8gXCJcIi5jb25jYXQocGF0aCB8fCBcIlwiLCBcIi5cIikuY29uY2F0KGtleU5hbWUpIDogdm9pZCAwKTtcbiAgICAgICAgICAgICAgICBpZiAoa25vd25DaGFuZ2VkLmhhcyhtYXNrZWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gbWFza2VkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghKGdsb2JhbFRoaXMuX19ERVZfXyAhPT0gZmFsc2UpKSB7XG4gICAgICAgICAgICAgICAgbWVtb1trZXlOYW1lXSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGdsb2JhbFRoaXMuX19ERVZfXyAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBpZiAobWlncmF0aW9uICYmXG4gICAgICAgICAgICAgICAgICAgIGtleU5hbWUgIT09IFwiX190eXBlbmFtZVwiICYmXG4gICAgICAgICAgICAgICAgICAgIC8vIGVpdGhlciB0aGUgZmllbGQgaXMgbm90IHByZXNlbnQgaW4gdGhlIG1lbW8gb2JqZWN0XG4gICAgICAgICAgICAgICAgICAgIC8vIG9yIGl0IGhhcyBhIGBnZXRgIGRlc2NyaXB0b3IsIG5vdCBhIGB2YWx1ZWAgZGVzY3JpcHRvclxuICAgICAgICAgICAgICAgICAgICAvLyA9PiBpdCBpcyBhIHdhcm5pbmcgYWNjZXNzb3IgYW5kIHdlIGNhbiBvdmVyd3JpdGUgaXRcbiAgICAgICAgICAgICAgICAgICAgLy8gd2l0aCBhbm90aGVyIGFjY2Vzc29yXG4gICAgICAgICAgICAgICAgICAgICEoKF9hID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtZW1vLCBrZXlOYW1lKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobWVtbywga2V5TmFtZSwgZ2V0QWNjZXNzb3JXYXJuaW5nRGVzY3JpcHRvcihrZXlOYW1lLCB2YWx1ZSwgcGF0aCB8fCBcIlwiLCBjb250ZXh0Lm9wZXJhdGlvbk5hbWUsIGNvbnRleHQub3BlcmF0aW9uVHlwZSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG1lbW9ba2V5TmFtZV07XG4gICAgICAgICAgICAgICAgICAgIG1lbW9ba2V5TmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlbGVjdGlvbi5raW5kID09PSBLaW5kLklOTElORV9GUkFHTUVOVCAmJlxuICAgICAgICAgICAgKCFzZWxlY3Rpb24udHlwZUNvbmRpdGlvbiB8fFxuICAgICAgICAgICAgICAgIGNvbnRleHQuY2FjaGUuZnJhZ21lbnRNYXRjaGVzKHNlbGVjdGlvbiwgZGF0YS5fX3R5cGVuYW1lKSkpIHtcbiAgICAgICAgICAgIHZhbHVlID0gbWFza1NlbGVjdGlvblNldChkYXRhLCBzZWxlY3Rpb24uc2VsZWN0aW9uU2V0LCBjb250ZXh0LCBtaWdyYXRpb24sIHBhdGgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZWxlY3Rpb24ua2luZCA9PT0gS2luZC5GUkFHTUVOVF9TUFJFQUQpIHtcbiAgICAgICAgICAgIHZhciBmcmFnbWVudE5hbWUgPSBzZWxlY3Rpb24ubmFtZS52YWx1ZTtcbiAgICAgICAgICAgIHZhciBmcmFnbWVudCA9IGNvbnRleHQuZnJhZ21lbnRNYXBbZnJhZ21lbnROYW1lXSB8fFxuICAgICAgICAgICAgICAgIChjb250ZXh0LmZyYWdtZW50TWFwW2ZyYWdtZW50TmFtZV0gPVxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmNhY2hlLmxvb2t1cEZyYWdtZW50KGZyYWdtZW50TmFtZSkpO1xuICAgICAgICAgICAgaW52YXJpYW50KGZyYWdtZW50LCA1OSwgZnJhZ21lbnROYW1lKTtcbiAgICAgICAgICAgIHZhciBtb2RlID0gZ2V0RnJhZ21lbnRNYXNrTW9kZShzZWxlY3Rpb24pO1xuICAgICAgICAgICAgaWYgKG1vZGUgIT09IFwibWFza1wiKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBtYXNrU2VsZWN0aW9uU2V0KGRhdGEsIGZyYWdtZW50LnNlbGVjdGlvblNldCwgY29udGV4dCwgbW9kZSA9PT0gXCJtaWdyYXRlXCIsIHBhdGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChrbm93bkNoYW5nZWQuaGFzKHZhbHVlKSkge1xuICAgICAgICAgICAga25vd25DaGFuZ2VkLmFkZChtZW1vKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoXCJfX3R5cGVuYW1lXCIgaW4gZGF0YSAmJiAhKFwiX190eXBlbmFtZVwiIGluIG1lbW8pKSB7XG4gICAgICAgIG1lbW8uX190eXBlbmFtZSA9IGRhdGEuX190eXBlbmFtZTtcbiAgICB9XG4gICAgLy8gVGhpcyBjaGVjayBwcmV2ZW50cyBjYXNlcyB3aGVyZSBtYXNrZWQgZmllbGRzIG1heSBhY2NpZGVudGFsbHkgYmVcbiAgICAvLyByZXR1cm5lZCBhcyBwYXJ0IG9mIHRoaXMgb2JqZWN0IHdoZW4gdGhlIGZyYWdtZW50IGFsc28gc2VsZWN0c1xuICAgIC8vIGFkZGl0aW9uYWwgZmllbGRzIGZyb20gdGhlIHNhbWUgY2hpbGQgc2VsZWN0aW9uLlxuICAgIGlmIChPYmplY3Qua2V5cyhtZW1vKS5sZW5ndGggIT09IE9iamVjdC5rZXlzKGRhdGEpLmxlbmd0aCkge1xuICAgICAgICBrbm93bkNoYW5nZWQuYWRkKG1lbW8pO1xuICAgIH1cbiAgICByZXR1cm4ga25vd25DaGFuZ2VkLmhhcyhtZW1vKSA/IG1lbW8gOiBkYXRhO1xufVxuZnVuY3Rpb24gZ2V0QWNjZXNzb3JXYXJuaW5nRGVzY3JpcHRvcihmaWVsZE5hbWUsIHZhbHVlLCBwYXRoLCBvcGVyYXRpb25OYW1lLCBvcGVyYXRpb25UeXBlKSB7XG4gICAgdmFyIGdldFZhbHVlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoZGlzYWJsZVdhcm5pbmdzU2xvdC5nZXRWYWx1ZSgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZ2xvYmFsVGhpcy5fX0RFVl9fICE9PSBmYWxzZSAmJiBpbnZhcmlhbnQud2Fybig2MCwgb3BlcmF0aW9uTmFtZSA/XG4gICAgICAgICAgICBcIlwiLmNvbmNhdChvcGVyYXRpb25UeXBlLCBcIiAnXCIpLmNvbmNhdChvcGVyYXRpb25OYW1lLCBcIidcIilcbiAgICAgICAgICAgIDogXCJhbm9ueW1vdXMgXCIuY29uY2F0KG9wZXJhdGlvblR5cGUpLCBcIlwiLmNvbmNhdChwYXRoLCBcIi5cIikuY29uY2F0KGZpZWxkTmFtZSkucmVwbGFjZSgvXlxcLi8sIFwiXCIpKTtcbiAgICAgICAgZ2V0VmFsdWUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB2YWx1ZTsgfTtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0VmFsdWUoKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAobmV3VmFsdWUpIHtcbiAgICAgICAgICAgIGdldFZhbHVlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3VmFsdWU7IH07XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFza0RlZmluaXRpb24uanMubWFwIl0sIm5hbWVzIjpbIktpbmQiLCJnZXRGcmFnbWVudE1hc2tNb2RlIiwibWF5YmVEZWVwRnJlZXplIiwicmVzdWx0S2V5TmFtZUZyb21GaWVsZCIsImRpc2FibGVXYXJuaW5nc1Nsb3QiLCJpbnZhcmlhbnQiLCJtYXNrRGVmaW5pdGlvbiIsImRhdGEiLCJzZWxlY3Rpb25TZXQiLCJjb250ZXh0Iiwid2l0aFZhbHVlIiwibWFza2VkIiwibWFza1NlbGVjdGlvblNldCIsIk9iamVjdCIsImlzRnJvemVuIiwiZ2V0TXV0YWJsZVRhcmdldCIsIm11dGFibGVUYXJnZXRzIiwiaGFzIiwiZ2V0IiwibXV0YWJsZVRhcmdldCIsIkFycmF5IiwiaXNBcnJheSIsImNyZWF0ZSIsInNldCIsIm1pZ3JhdGlvbiIsInBhdGgiLCJfYSIsImtub3duQ2hhbmdlZCIsIm1lbW8iLCJfaSIsIl9iIiwiZnJvbSIsImVudHJpZXMiLCJsZW5ndGgiLCJfYyIsImluZGV4IiwiaXRlbSIsImdsb2JhbFRoaXMiLCJfX0RFVl9fIiwiY29uY2F0IiwiYWRkIiwiX2QiLCJfZSIsInNlbGVjdGlvbnMiLCJzZWxlY3Rpb24iLCJ2YWx1ZSIsImtpbmQiLCJGSUVMRCIsImtleU5hbWUiLCJjaGlsZFNlbGVjdGlvblNldCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImRlZmluZVByb3BlcnR5IiwiZ2V0QWNjZXNzb3JXYXJuaW5nRGVzY3JpcHRvciIsIm9wZXJhdGlvbk5hbWUiLCJvcGVyYXRpb25UeXBlIiwiSU5MSU5FX0ZSQUdNRU5UIiwidHlwZUNvbmRpdGlvbiIsImNhY2hlIiwiZnJhZ21lbnRNYXRjaGVzIiwiX190eXBlbmFtZSIsIkZSQUdNRU5UX1NQUkVBRCIsImZyYWdtZW50TmFtZSIsIm5hbWUiLCJmcmFnbWVudCIsImZyYWdtZW50TWFwIiwibG9va3VwRnJhZ21lbnQiLCJtb2RlIiwia2V5cyIsImZpZWxkTmFtZSIsImdldFZhbHVlIiwid2FybiIsInJlcGxhY2UiLCJuZXdWYWx1ZSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/masking/maskDefinition.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/masking/maskFragment.js":
/*!*************************************************************!*\
  !*** ./node_modules/@apollo/client/masking/maskFragment.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   maskFragment: () => (/* binding */ maskFragment)\n/* harmony export */ });\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! graphql */ \"(ssr)/./node_modules/graphql/language/kinds.mjs\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@apollo/client/masking/utils.js\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @wry/equality */ \"(ssr)/./node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var _maskDefinition_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./maskDefinition.js */ \"(ssr)/./node_modules/@apollo/client/masking/maskDefinition.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/fragments.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n\n\n\n\n\n\n/** @internal */ function maskFragment(data, document, cache, fragmentName) {\n    if (!cache.fragmentMatches) {\n        if (globalThis.__DEV__ !== false) {\n            (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.warnOnImproperCacheImplementation)();\n        }\n        return data;\n    }\n    var fragments = document.definitions.filter(function(node) {\n        return node.kind === graphql__WEBPACK_IMPORTED_MODULE_3__.Kind.FRAGMENT_DEFINITION;\n    });\n    if (typeof fragmentName === \"undefined\") {\n        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(fragments.length === 1, 61, fragments.length);\n        fragmentName = fragments[0].name.value;\n    }\n    var fragment = fragments.find(function(fragment) {\n        return fragment.name.value === fragmentName;\n    });\n    (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(!!fragment, 62, fragmentName);\n    if (data == null) {\n        // Maintain the original `null` or `undefined` value\n        return data;\n    }\n    if ((0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(data, {})) {\n        // Return early and skip the masking algorithm if we don't have any data\n        // yet. This can happen when cache.diff returns an empty object which is\n        // used from watchFragment.\n        return data;\n    }\n    return (0,_maskDefinition_js__WEBPACK_IMPORTED_MODULE_4__.maskDefinition)(data, fragment.selectionSet, {\n        operationType: \"fragment\",\n        operationName: fragment.name.value,\n        fragmentMap: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.createFragmentMap)((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_6__.getFragmentDefinitions)(document)),\n        cache: cache,\n        mutableTargets: new _utils_js__WEBPACK_IMPORTED_MODULE_2__.MapImpl(),\n        knownChanged: new _utils_js__WEBPACK_IMPORTED_MODULE_2__.SetImpl()\n    });\n} //# sourceMappingURL=maskFragment.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbWFza2luZy9tYXNrRnJhZ21lbnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBK0I7QUFDbUQ7QUFDeEI7QUFDeEI7QUFDbUI7QUFDOEI7QUFDbkYsY0FBYyxHQUNQLFNBQVNTLGFBQWFDLElBQUksRUFBRUMsUUFBUSxFQUFFQyxLQUFLLEVBQUVDLFlBQVk7SUFDNUQsSUFBSSxDQUFDRCxNQUFNRSxlQUFlLEVBQUU7UUFDeEIsSUFBSUMsV0FBV0MsT0FBTyxLQUFLLE9BQU87WUFDOUJiLDRFQUFpQ0E7UUFDckM7UUFDQSxPQUFPTztJQUNYO0lBQ0EsSUFBSU8sWUFBWU4sU0FBU08sV0FBVyxDQUFDQyxNQUFNLENBQUMsU0FBVUMsSUFBSTtRQUN0RCxPQUFPQSxLQUFLQyxJQUFJLEtBQUtyQix5Q0FBSUEsQ0FBQ3NCLG1CQUFtQjtJQUNqRDtJQUNBLElBQUksT0FBT1QsaUJBQWlCLGFBQWE7UUFDckNULHNFQUFTQSxDQUFDYSxVQUFVTSxNQUFNLEtBQUssR0FBRyxJQUFJTixVQUFVTSxNQUFNO1FBQ3REVixlQUFlSSxTQUFTLENBQUMsRUFBRSxDQUFDTyxJQUFJLENBQUNDLEtBQUs7SUFDMUM7SUFDQSxJQUFJQyxXQUFXVCxVQUFVVSxJQUFJLENBQUMsU0FBVUQsUUFBUTtRQUFJLE9BQU9BLFNBQVNGLElBQUksQ0FBQ0MsS0FBSyxLQUFLWjtJQUFjO0lBQ2pHVCxzRUFBU0EsQ0FBQyxDQUFDLENBQUNzQixVQUFVLElBQUliO0lBQzFCLElBQUlILFFBQVEsTUFBTTtRQUNkLG9EQUFvRDtRQUNwRCxPQUFPQTtJQUNYO0lBQ0EsSUFBSUwseURBQUtBLENBQUNLLE1BQU0sQ0FBQyxJQUFJO1FBQ2pCLHdFQUF3RTtRQUN4RSx3RUFBd0U7UUFDeEUsMkJBQTJCO1FBQzNCLE9BQU9BO0lBQ1g7SUFDQSxPQUFPSixrRUFBY0EsQ0FBQ0ksTUFBTWdCLFNBQVNFLFlBQVksRUFBRTtRQUMvQ0MsZUFBZTtRQUNmQyxlQUFlSixTQUFTRixJQUFJLENBQUNDLEtBQUs7UUFDbENNLGFBQWF4QixzRUFBaUJBLENBQUNDLDJFQUFzQkEsQ0FBQ0c7UUFDdERDLE9BQU9BO1FBQ1BvQixnQkFBZ0IsSUFBSS9CLDhDQUFPQTtRQUMzQmdDLGNBQWMsSUFBSS9CLDhDQUFPQTtJQUM3QjtBQUNKLEVBQ0Esd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2xhY2stZ3JhcGhxbC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9tYXNraW5nL21hc2tGcmFnbWVudC5qcz8zZTk2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEtpbmQgfSBmcm9tIFwiZ3JhcGhxbFwiO1xuaW1wb3J0IHsgTWFwSW1wbCwgU2V0SW1wbCwgd2Fybk9uSW1wcm9wZXJDYWNoZUltcGxlbWVudGF0aW9uLCB9IGZyb20gXCIuL3V0aWxzLmpzXCI7XG5pbXBvcnQgeyBpbnZhcmlhbnQgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2dsb2JhbHMvaW5kZXguanNcIjtcbmltcG9ydCBlcXVhbCBmcm9tIFwiQHdyeS9lcXVhbGl0eVwiO1xuaW1wb3J0IHsgbWFza0RlZmluaXRpb24gfSBmcm9tIFwiLi9tYXNrRGVmaW5pdGlvbi5qc1wiO1xuaW1wb3J0IHsgY3JlYXRlRnJhZ21lbnRNYXAsIGdldEZyYWdtZW50RGVmaW5pdGlvbnMsIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9pbmRleC5qc1wiO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1hc2tGcmFnbWVudChkYXRhLCBkb2N1bWVudCwgY2FjaGUsIGZyYWdtZW50TmFtZSkge1xuICAgIGlmICghY2FjaGUuZnJhZ21lbnRNYXRjaGVzKSB7XG4gICAgICAgIGlmIChnbG9iYWxUaGlzLl9fREVWX18gIT09IGZhbHNlKSB7XG4gICAgICAgICAgICB3YXJuT25JbXByb3BlckNhY2hlSW1wbGVtZW50YXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgdmFyIGZyYWdtZW50cyA9IGRvY3VtZW50LmRlZmluaXRpb25zLmZpbHRlcihmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICByZXR1cm4gbm9kZS5raW5kID09PSBLaW5kLkZSQUdNRU5UX0RFRklOSVRJT047XG4gICAgfSk7XG4gICAgaWYgKHR5cGVvZiBmcmFnbWVudE5hbWUgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaW52YXJpYW50KGZyYWdtZW50cy5sZW5ndGggPT09IDEsIDYxLCBmcmFnbWVudHMubGVuZ3RoKTtcbiAgICAgICAgZnJhZ21lbnROYW1lID0gZnJhZ21lbnRzWzBdLm5hbWUudmFsdWU7XG4gICAgfVxuICAgIHZhciBmcmFnbWVudCA9IGZyYWdtZW50cy5maW5kKGZ1bmN0aW9uIChmcmFnbWVudCkgeyByZXR1cm4gZnJhZ21lbnQubmFtZS52YWx1ZSA9PT0gZnJhZ21lbnROYW1lOyB9KTtcbiAgICBpbnZhcmlhbnQoISFmcmFnbWVudCwgNjIsIGZyYWdtZW50TmFtZSk7XG4gICAgaWYgKGRhdGEgPT0gbnVsbCkge1xuICAgICAgICAvLyBNYWludGFpbiB0aGUgb3JpZ2luYWwgYG51bGxgIG9yIGB1bmRlZmluZWRgIHZhbHVlXG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBpZiAoZXF1YWwoZGF0YSwge30pKSB7XG4gICAgICAgIC8vIFJldHVybiBlYXJseSBhbmQgc2tpcCB0aGUgbWFza2luZyBhbGdvcml0aG0gaWYgd2UgZG9uJ3QgaGF2ZSBhbnkgZGF0YVxuICAgICAgICAvLyB5ZXQuIFRoaXMgY2FuIGhhcHBlbiB3aGVuIGNhY2hlLmRpZmYgcmV0dXJucyBhbiBlbXB0eSBvYmplY3Qgd2hpY2ggaXNcbiAgICAgICAgLy8gdXNlZCBmcm9tIHdhdGNoRnJhZ21lbnQuXG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICByZXR1cm4gbWFza0RlZmluaXRpb24oZGF0YSwgZnJhZ21lbnQuc2VsZWN0aW9uU2V0LCB7XG4gICAgICAgIG9wZXJhdGlvblR5cGU6IFwiZnJhZ21lbnRcIixcbiAgICAgICAgb3BlcmF0aW9uTmFtZTogZnJhZ21lbnQubmFtZS52YWx1ZSxcbiAgICAgICAgZnJhZ21lbnRNYXA6IGNyZWF0ZUZyYWdtZW50TWFwKGdldEZyYWdtZW50RGVmaW5pdGlvbnMoZG9jdW1lbnQpKSxcbiAgICAgICAgY2FjaGU6IGNhY2hlLFxuICAgICAgICBtdXRhYmxlVGFyZ2V0czogbmV3IE1hcEltcGwoKSxcbiAgICAgICAga25vd25DaGFuZ2VkOiBuZXcgU2V0SW1wbCgpLFxuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFza0ZyYWdtZW50LmpzLm1hcCJdLCJuYW1lcyI6WyJLaW5kIiwiTWFwSW1wbCIsIlNldEltcGwiLCJ3YXJuT25JbXByb3BlckNhY2hlSW1wbGVtZW50YXRpb24iLCJpbnZhcmlhbnQiLCJlcXVhbCIsIm1hc2tEZWZpbml0aW9uIiwiY3JlYXRlRnJhZ21lbnRNYXAiLCJnZXRGcmFnbWVudERlZmluaXRpb25zIiwibWFza0ZyYWdtZW50IiwiZGF0YSIsImRvY3VtZW50IiwiY2FjaGUiLCJmcmFnbWVudE5hbWUiLCJmcmFnbWVudE1hdGNoZXMiLCJnbG9iYWxUaGlzIiwiX19ERVZfXyIsImZyYWdtZW50cyIsImRlZmluaXRpb25zIiwiZmlsdGVyIiwibm9kZSIsImtpbmQiLCJGUkFHTUVOVF9ERUZJTklUSU9OIiwibGVuZ3RoIiwibmFtZSIsInZhbHVlIiwiZnJhZ21lbnQiLCJmaW5kIiwic2VsZWN0aW9uU2V0Iiwib3BlcmF0aW9uVHlwZSIsIm9wZXJhdGlvbk5hbWUiLCJmcmFnbWVudE1hcCIsIm11dGFibGVUYXJnZXRzIiwia25vd25DaGFuZ2VkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/masking/maskFragment.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/masking/maskOperation.js":
/*!**************************************************************!*\
  !*** ./node_modules/@apollo/client/masking/maskOperation.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   maskOperation: () => (/* binding */ maskOperation)\n/* harmony export */ });\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/fragments.js\");\n/* harmony import */ var _maskDefinition_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./maskDefinition.js */ \"(ssr)/./node_modules/@apollo/client/masking/maskDefinition.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@apollo/client/masking/utils.js\");\n\n\n\n\n/** @internal */ function maskOperation(data, document, cache) {\n    var _a;\n    if (!cache.fragmentMatches) {\n        if (globalThis.__DEV__ !== false) {\n            (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.warnOnImproperCacheImplementation)();\n        }\n        return data;\n    }\n    var definition = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.getOperationDefinition)(document);\n    (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(definition, 63);\n    if (data == null) {\n        // Maintain the original `null` or `undefined` value\n        return data;\n    }\n    return (0,_maskDefinition_js__WEBPACK_IMPORTED_MODULE_3__.maskDefinition)(data, definition.selectionSet, {\n        operationType: definition.operation,\n        operationName: (_a = definition.name) === null || _a === void 0 ? void 0 : _a.value,\n        fragmentMap: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.createFragmentMap)((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.getFragmentDefinitions)(document)),\n        cache: cache,\n        mutableTargets: new _utils_js__WEBPACK_IMPORTED_MODULE_1__.MapImpl(),\n        knownChanged: new _utils_js__WEBPACK_IMPORTED_MODULE_1__.SetImpl()\n    });\n} //# sourceMappingURL=maskOperation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbWFza2luZy9tYXNrT3BlcmF0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUEwRDtBQUNpRDtBQUN0RDtBQUM2QjtBQUNsRixjQUFjLEdBQ1AsU0FBU1EsY0FBY0MsSUFBSSxFQUFFQyxRQUFRLEVBQUVDLEtBQUs7SUFDL0MsSUFBSUM7SUFDSixJQUFJLENBQUNELE1BQU1FLGVBQWUsRUFBRTtRQUN4QixJQUFJQyxXQUFXQyxPQUFPLEtBQUssT0FBTztZQUM5QlIsNEVBQWlDQTtRQUNyQztRQUNBLE9BQU9FO0lBQ1g7SUFDQSxJQUFJTyxhQUFhYiwyRUFBc0JBLENBQUNPO0lBQ3hDVixzRUFBU0EsQ0FBQ2dCLFlBQVk7SUFDdEIsSUFBSVAsUUFBUSxNQUFNO1FBQ2Qsb0RBQW9EO1FBQ3BELE9BQU9BO0lBQ1g7SUFDQSxPQUFPTCxrRUFBY0EsQ0FBQ0ssTUFBTU8sV0FBV0MsWUFBWSxFQUFFO1FBQ2pEQyxlQUFlRixXQUFXRyxTQUFTO1FBQ25DQyxlQUFlLENBQUNSLEtBQUtJLFdBQVdLLElBQUksTUFBTSxRQUFRVCxPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdVLEtBQUs7UUFDbkZDLGFBQWF0QixzRUFBaUJBLENBQUNDLDJFQUFzQkEsQ0FBQ1E7UUFDdERDLE9BQU9BO1FBQ1BhLGdCQUFnQixJQUFJbkIsOENBQU9BO1FBQzNCb0IsY0FBYyxJQUFJbkIsOENBQU9BO0lBQzdCO0FBQ0osRUFDQSx5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbGFjay1ncmFwaHFsLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L21hc2tpbmcvbWFza09wZXJhdGlvbi5qcz9kOTZmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGludmFyaWFudCB9IGZyb20gXCIuLi91dGlsaXRpZXMvZ2xvYmFscy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgY3JlYXRlRnJhZ21lbnRNYXAsIGdldEZyYWdtZW50RGVmaW5pdGlvbnMsIGdldE9wZXJhdGlvbkRlZmluaXRpb24sIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgbWFza0RlZmluaXRpb24gfSBmcm9tIFwiLi9tYXNrRGVmaW5pdGlvbi5qc1wiO1xuaW1wb3J0IHsgTWFwSW1wbCwgU2V0SW1wbCwgd2Fybk9uSW1wcm9wZXJDYWNoZUltcGxlbWVudGF0aW9uLCB9IGZyb20gXCIuL3V0aWxzLmpzXCI7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgZnVuY3Rpb24gbWFza09wZXJhdGlvbihkYXRhLCBkb2N1bWVudCwgY2FjaGUpIHtcbiAgICB2YXIgX2E7XG4gICAgaWYgKCFjYWNoZS5mcmFnbWVudE1hdGNoZXMpIHtcbiAgICAgICAgaWYgKGdsb2JhbFRoaXMuX19ERVZfXyAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHdhcm5PbkltcHJvcGVyQ2FjaGVJbXBsZW1lbnRhdGlvbigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICB2YXIgZGVmaW5pdGlvbiA9IGdldE9wZXJhdGlvbkRlZmluaXRpb24oZG9jdW1lbnQpO1xuICAgIGludmFyaWFudChkZWZpbml0aW9uLCA2Myk7XG4gICAgaWYgKGRhdGEgPT0gbnVsbCkge1xuICAgICAgICAvLyBNYWludGFpbiB0aGUgb3JpZ2luYWwgYG51bGxgIG9yIGB1bmRlZmluZWRgIHZhbHVlXG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICByZXR1cm4gbWFza0RlZmluaXRpb24oZGF0YSwgZGVmaW5pdGlvbi5zZWxlY3Rpb25TZXQsIHtcbiAgICAgICAgb3BlcmF0aW9uVHlwZTogZGVmaW5pdGlvbi5vcGVyYXRpb24sXG4gICAgICAgIG9wZXJhdGlvbk5hbWU6IChfYSA9IGRlZmluaXRpb24ubmFtZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnZhbHVlLFxuICAgICAgICBmcmFnbWVudE1hcDogY3JlYXRlRnJhZ21lbnRNYXAoZ2V0RnJhZ21lbnREZWZpbml0aW9ucyhkb2N1bWVudCkpLFxuICAgICAgICBjYWNoZTogY2FjaGUsXG4gICAgICAgIG11dGFibGVUYXJnZXRzOiBuZXcgTWFwSW1wbCgpLFxuICAgICAgICBrbm93bkNoYW5nZWQ6IG5ldyBTZXRJbXBsKCksXG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXNrT3BlcmF0aW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJpbnZhcmlhbnQiLCJjcmVhdGVGcmFnbWVudE1hcCIsImdldEZyYWdtZW50RGVmaW5pdGlvbnMiLCJnZXRPcGVyYXRpb25EZWZpbml0aW9uIiwibWFza0RlZmluaXRpb24iLCJNYXBJbXBsIiwiU2V0SW1wbCIsIndhcm5PbkltcHJvcGVyQ2FjaGVJbXBsZW1lbnRhdGlvbiIsIm1hc2tPcGVyYXRpb24iLCJkYXRhIiwiZG9jdW1lbnQiLCJjYWNoZSIsIl9hIiwiZnJhZ21lbnRNYXRjaGVzIiwiZ2xvYmFsVGhpcyIsIl9fREVWX18iLCJkZWZpbml0aW9uIiwic2VsZWN0aW9uU2V0Iiwib3BlcmF0aW9uVHlwZSIsIm9wZXJhdGlvbiIsIm9wZXJhdGlvbk5hbWUiLCJuYW1lIiwidmFsdWUiLCJmcmFnbWVudE1hcCIsIm11dGFibGVUYXJnZXRzIiwia25vd25DaGFuZ2VkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/masking/maskOperation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/masking/utils.js":
/*!******************************************************!*\
  !*** ./node_modules/@apollo/client/masking/utils.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MapImpl: () => (/* binding */ MapImpl),\n/* harmony export */   SetImpl: () => (/* binding */ SetImpl),\n/* harmony export */   disableWarningsSlot: () => (/* binding */ disableWarningsSlot),\n/* harmony export */   warnOnImproperCacheImplementation: () => (/* binding */ warnOnImproperCacheImplementation)\n/* harmony export */ });\n/* harmony import */ var optimism__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! optimism */ \"(ssr)/./node_modules/optimism/lib/index.js\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n\n\n\nvar MapImpl = _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.canUseWeakMap ? WeakMap : Map;\nvar SetImpl = _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.canUseWeakSet ? WeakSet : Set;\n// Contextual slot that allows us to disable accessor warnings on fields when in\n// migrate mode.\n/** @internal */ var disableWarningsSlot = new optimism__WEBPACK_IMPORTED_MODULE_0__.Slot();\nvar issuedWarning = false;\nfunction warnOnImproperCacheImplementation() {\n    if (!issuedWarning) {\n        issuedWarning = true;\n        globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_1__.invariant.warn(64);\n    }\n} //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbWFza2luZy91dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQWdDO0FBQzBCO0FBQ1c7QUFDOUQsSUFBSUksVUFBVUYsOERBQWFBLEdBQUdHLFVBQVVDLElBQUk7QUFDNUMsSUFBSUMsVUFBVUosOERBQWFBLEdBQUdLLFVBQVVDLElBQUk7QUFDbkQsZ0ZBQWdGO0FBQ2hGLGdCQUFnQjtBQUNoQixjQUFjLEdBQ1AsSUFBSUMsc0JBQXNCLElBQUlWLDBDQUFJQSxHQUFHO0FBQzVDLElBQUlXLGdCQUFnQjtBQUNiLFNBQVNDO0lBQ1osSUFBSSxDQUFDRCxlQUFlO1FBQ2hCQSxnQkFBZ0I7UUFDaEJFLFdBQVdDLE9BQU8sS0FBSyxTQUFTYixrRUFBU0EsQ0FBQ2MsSUFBSSxDQUFDO0lBQ25EO0FBQ0osRUFDQSxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbGFjay1ncmFwaHFsLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L21hc2tpbmcvdXRpbHMuanM/MWU0MyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTbG90IH0gZnJvbSBcIm9wdGltaXNtXCI7XG5pbXBvcnQgeyBpbnZhcmlhbnQgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2dsb2JhbHMvaW5kZXguanNcIjtcbmltcG9ydCB7IGNhblVzZVdlYWtNYXAsIGNhblVzZVdlYWtTZXQgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2luZGV4LmpzXCI7XG5leHBvcnQgdmFyIE1hcEltcGwgPSBjYW5Vc2VXZWFrTWFwID8gV2Vha01hcCA6IE1hcDtcbmV4cG9ydCB2YXIgU2V0SW1wbCA9IGNhblVzZVdlYWtTZXQgPyBXZWFrU2V0IDogU2V0O1xuLy8gQ29udGV4dHVhbCBzbG90IHRoYXQgYWxsb3dzIHVzIHRvIGRpc2FibGUgYWNjZXNzb3Igd2FybmluZ3Mgb24gZmllbGRzIHdoZW4gaW5cbi8vIG1pZ3JhdGUgbW9kZS5cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCB2YXIgZGlzYWJsZVdhcm5pbmdzU2xvdCA9IG5ldyBTbG90KCk7XG52YXIgaXNzdWVkV2FybmluZyA9IGZhbHNlO1xuZXhwb3J0IGZ1bmN0aW9uIHdhcm5PbkltcHJvcGVyQ2FjaGVJbXBsZW1lbnRhdGlvbigpIHtcbiAgICBpZiAoIWlzc3VlZFdhcm5pbmcpIHtcbiAgICAgICAgaXNzdWVkV2FybmluZyA9IHRydWU7XG4gICAgICAgIGdsb2JhbFRoaXMuX19ERVZfXyAhPT0gZmFsc2UgJiYgaW52YXJpYW50Lndhcm4oNjQpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcCJdLCJuYW1lcyI6WyJTbG90IiwiaW52YXJpYW50IiwiY2FuVXNlV2Vha01hcCIsImNhblVzZVdlYWtTZXQiLCJNYXBJbXBsIiwiV2Vha01hcCIsIk1hcCIsIlNldEltcGwiLCJXZWFrU2V0IiwiU2V0IiwiZGlzYWJsZVdhcm5pbmdzU2xvdCIsImlzc3VlZFdhcm5pbmciLCJ3YXJuT25JbXByb3BlckNhY2hlSW1wbGVtZW50YXRpb24iLCJnbG9iYWxUaGlzIiwiX19ERVZfXyIsIndhcm4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/masking/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/context/ApolloContext.js":
/*!********************************************************************!*\
  !*** ./node_modules/@apollo/client/react/context/ApolloContext.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("var rehackt__WEBPACK_IMPORTED_MODULE_0___namespace_cache;\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getApolloContext: () => (/* binding */ getApolloContext),\n/* harmony export */   resetApolloContext: () => (/* binding */ resetApolloContext)\n/* harmony export */ });\n/* harmony import */ var rehackt__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rehackt */ \"(ssr)/./node_modules/rehackt/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n\n\n\n// To make sure Apollo Client doesn't create more than one React context\n// (which can lead to problems like having an Apollo Client instance added\n// in one context, then attempting to retrieve it from another different\n// context), a single Apollo context is created and tracked in global state.\nvar contextKey = _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.canUseSymbol ? Symbol.for(\"__APOLLO_CONTEXT__\") : \"__APOLLO_CONTEXT__\";\nfunction getApolloContext() {\n    (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_1__.invariant)(\"createContext\" in /*#__PURE__*/ (rehackt__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (rehackt__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(rehackt__WEBPACK_IMPORTED_MODULE_0__, 2))), 69);\n    var context = rehackt__WEBPACK_IMPORTED_MODULE_0__.createContext[contextKey];\n    if (!context) {\n        Object.defineProperty(rehackt__WEBPACK_IMPORTED_MODULE_0__.createContext, contextKey, {\n            value: context = rehackt__WEBPACK_IMPORTED_MODULE_0__.createContext({}),\n            enumerable: false,\n            writable: false,\n            configurable: true\n        });\n        context.displayName = \"ApolloContext\";\n    }\n    return context;\n}\n/**\n * @deprecated This function has no \"resetting\" effect since Apollo Client 3.4.12,\n * and will be removed in the next major version of Apollo Client.\n * If you want to get the Apollo Context, use `getApolloContext` instead.\n */ var resetApolloContext = function() {\n    if (globalThis.__DEV__ !== false) {\n        globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_1__.invariant.warn(70);\n    }\n    return getApolloContext();\n}; //# sourceMappingURL=ApolloContext.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvcmVhY3QvY29udGV4dC9BcG9sbG9Db250ZXh0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFpQztBQUN1QjtBQUNLO0FBQzdELHdFQUF3RTtBQUN4RSwwRUFBMEU7QUFDMUUsd0VBQXdFO0FBQ3hFLDRFQUE0RTtBQUM1RSxJQUFJRyxhQUFhRiw2REFBWUEsR0FBR0csT0FBT0MsR0FBRyxDQUFDLHdCQUF3QjtBQUM1RCxTQUFTQztJQUNaSixzRUFBU0EsQ0FBQyxrTkFBd0JGLEVBQUU7SUFDcEMsSUFBSU8sVUFBVVAsa0RBQW1CLENBQUNHLFdBQVc7SUFDN0MsSUFBSSxDQUFDSSxTQUFTO1FBQ1ZFLE9BQU9DLGNBQWMsQ0FBQ1Ysa0RBQW1CLEVBQUVHLFlBQVk7WUFDbkRRLE9BQVFKLFVBQVVQLGtEQUFtQixDQUFDLENBQUM7WUFDdkNZLFlBQVk7WUFDWkMsVUFBVTtZQUNWQyxjQUFjO1FBQ2xCO1FBQ0FQLFFBQVFRLFdBQVcsR0FBRztJQUMxQjtJQUNBLE9BQU9SO0FBQ1g7QUFDQTs7OztDQUlDLEdBQ00sSUFBSVMscUJBQXFCO0lBQzVCLElBQUlDLFdBQVdDLE9BQU8sS0FBSyxPQUFPO1FBQzlCRCxXQUFXQyxPQUFPLEtBQUssU0FBU2hCLGtFQUFTQSxDQUFDaUIsSUFBSSxDQUFDO0lBQ25EO0lBQ0EsT0FBT2I7QUFDWCxFQUFFLENBQ0YseUNBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2xhY2stZ3JhcGhxbC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9yZWFjdC9jb250ZXh0L0Fwb2xsb0NvbnRleHQuanM/ZmM4NCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVoYWNrdFwiO1xuaW1wb3J0IHsgY2FuVXNlU3ltYm9sIH0gZnJvbSBcIi4uLy4uL3V0aWxpdGllcy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgaW52YXJpYW50IH0gZnJvbSBcIi4uLy4uL3V0aWxpdGllcy9nbG9iYWxzL2luZGV4LmpzXCI7XG4vLyBUbyBtYWtlIHN1cmUgQXBvbGxvIENsaWVudCBkb2Vzbid0IGNyZWF0ZSBtb3JlIHRoYW4gb25lIFJlYWN0IGNvbnRleHRcbi8vICh3aGljaCBjYW4gbGVhZCB0byBwcm9ibGVtcyBsaWtlIGhhdmluZyBhbiBBcG9sbG8gQ2xpZW50IGluc3RhbmNlIGFkZGVkXG4vLyBpbiBvbmUgY29udGV4dCwgdGhlbiBhdHRlbXB0aW5nIHRvIHJldHJpZXZlIGl0IGZyb20gYW5vdGhlciBkaWZmZXJlbnRcbi8vIGNvbnRleHQpLCBhIHNpbmdsZSBBcG9sbG8gY29udGV4dCBpcyBjcmVhdGVkIGFuZCB0cmFja2VkIGluIGdsb2JhbCBzdGF0ZS5cbnZhciBjb250ZXh0S2V5ID0gY2FuVXNlU3ltYm9sID8gU3ltYm9sLmZvcihcIl9fQVBPTExPX0NPTlRFWFRfX1wiKSA6IFwiX19BUE9MTE9fQ09OVEVYVF9fXCI7XG5leHBvcnQgZnVuY3Rpb24gZ2V0QXBvbGxvQ29udGV4dCgpIHtcbiAgICBpbnZhcmlhbnQoXCJjcmVhdGVDb250ZXh0XCIgaW4gUmVhY3QsIDY5KTtcbiAgICB2YXIgY29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHRbY29udGV4dEtleV07XG4gICAgaWYgKCFjb250ZXh0KSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFjdC5jcmVhdGVDb250ZXh0LCBjb250ZXh0S2V5LCB7XG4gICAgICAgICAgICB2YWx1ZTogKGNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KHt9KSksXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnRleHQuZGlzcGxheU5hbWUgPSBcIkFwb2xsb0NvbnRleHRcIjtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRleHQ7XG59XG4vKipcbiAqIEBkZXByZWNhdGVkIFRoaXMgZnVuY3Rpb24gaGFzIG5vIFwicmVzZXR0aW5nXCIgZWZmZWN0IHNpbmNlIEFwb2xsbyBDbGllbnQgMy40LjEyLFxuICogYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uIG9mIEFwb2xsbyBDbGllbnQuXG4gKiBJZiB5b3Ugd2FudCB0byBnZXQgdGhlIEFwb2xsbyBDb250ZXh0LCB1c2UgYGdldEFwb2xsb0NvbnRleHRgIGluc3RlYWQuXG4gKi9cbmV4cG9ydCB2YXIgcmVzZXRBcG9sbG9Db250ZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChnbG9iYWxUaGlzLl9fREVWX18gIT09IGZhbHNlKSB7XG4gICAgICAgIGdsb2JhbFRoaXMuX19ERVZfXyAhPT0gZmFsc2UgJiYgaW52YXJpYW50Lndhcm4oNzApO1xuICAgIH1cbiAgICByZXR1cm4gZ2V0QXBvbGxvQ29udGV4dCgpO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFwb2xsb0NvbnRleHQuanMubWFwIl0sIm5hbWVzIjpbIlJlYWN0IiwiY2FuVXNlU3ltYm9sIiwiaW52YXJpYW50IiwiY29udGV4dEtleSIsIlN5bWJvbCIsImZvciIsImdldEFwb2xsb0NvbnRleHQiLCJjb250ZXh0IiwiY3JlYXRlQ29udGV4dCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJlbnVtZXJhYmxlIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJkaXNwbGF5TmFtZSIsInJlc2V0QXBvbGxvQ29udGV4dCIsImdsb2JhbFRoaXMiLCJfX0RFVl9fIiwid2FybiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/context/ApolloContext.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/context/ApolloProvider.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@apollo/client/react/context/ApolloProvider.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApolloProvider: () => (/* binding */ ApolloProvider)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var rehackt__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rehackt */ \"(ssr)/./node_modules/rehackt/index.js\");\n/* harmony import */ var _ApolloContext_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ApolloContext.js */ \"(ssr)/./node_modules/@apollo/client/react/context/ApolloContext.js\");\n\n\n\n\nvar ApolloProvider = function(_a) {\n    var client = _a.client, children = _a.children;\n    var ApolloContext = (0,_ApolloContext_js__WEBPACK_IMPORTED_MODULE_2__.getApolloContext)();\n    var parentContext = rehackt__WEBPACK_IMPORTED_MODULE_1__.useContext(ApolloContext);\n    var context = rehackt__WEBPACK_IMPORTED_MODULE_1__.useMemo(function() {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, parentContext), {\n            client: client || parentContext.client\n        });\n    }, [\n        parentContext,\n        client\n    ]);\n    (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.client, 71);\n    return rehackt__WEBPACK_IMPORTED_MODULE_1__.createElement(ApolloContext.Provider, {\n        value: context\n    }, children);\n}; //# sourceMappingURL=ApolloProvider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvcmVhY3QvY29udGV4dC9BcG9sbG9Qcm92aWRlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFpQztBQUM0QjtBQUM1QjtBQUNxQjtBQUMvQyxJQUFJSSxpQkFBaUIsU0FBVUMsRUFBRTtJQUNwQyxJQUFJQyxTQUFTRCxHQUFHQyxNQUFNLEVBQUVDLFdBQVdGLEdBQUdFLFFBQVE7SUFDOUMsSUFBSUMsZ0JBQWdCTCxtRUFBZ0JBO0lBQ3BDLElBQUlNLGdCQUFnQlAsK0NBQWdCLENBQUNNO0lBQ3JDLElBQUlHLFVBQVVULDRDQUFhLENBQUM7UUFDeEIsT0FBT0YsK0NBQVFBLENBQUNBLCtDQUFRQSxDQUFDLENBQUMsR0FBR1MsZ0JBQWdCO1lBQUVILFFBQVFBLFVBQVVHLGNBQWNILE1BQU07UUFBQztJQUMxRixHQUFHO1FBQUNHO1FBQWVIO0tBQU87SUFDMUJMLHNFQUFTQSxDQUFDVSxRQUFRTCxNQUFNLEVBQUU7SUFDMUIsT0FBUUosa0RBQW1CLENBQUNNLGNBQWNNLFFBQVEsRUFBRTtRQUFFQyxPQUFPSjtJQUFRLEdBQUdKO0FBQzVFLEVBQUUsQ0FDRiwwQ0FBMEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbGFjay1ncmFwaHFsLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L3JlYWN0L2NvbnRleHQvQXBvbGxvUHJvdmlkZXIuanM/ZTkyYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfX2Fzc2lnbiB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgaW52YXJpYW50IH0gZnJvbSBcIi4uLy4uL3V0aWxpdGllcy9nbG9iYWxzL2luZGV4LmpzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVoYWNrdFwiO1xuaW1wb3J0IHsgZ2V0QXBvbGxvQ29udGV4dCB9IGZyb20gXCIuL0Fwb2xsb0NvbnRleHQuanNcIjtcbmV4cG9ydCB2YXIgQXBvbGxvUHJvdmlkZXIgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICB2YXIgY2xpZW50ID0gX2EuY2xpZW50LCBjaGlsZHJlbiA9IF9hLmNoaWxkcmVuO1xuICAgIHZhciBBcG9sbG9Db250ZXh0ID0gZ2V0QXBvbGxvQ29udGV4dCgpO1xuICAgIHZhciBwYXJlbnRDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChBcG9sbG9Db250ZXh0KTtcbiAgICB2YXIgY29udGV4dCA9IFJlYWN0LnVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe30sIHBhcmVudENvbnRleHQpLCB7IGNsaWVudDogY2xpZW50IHx8IHBhcmVudENvbnRleHQuY2xpZW50IH0pO1xuICAgIH0sIFtwYXJlbnRDb250ZXh0LCBjbGllbnRdKTtcbiAgICBpbnZhcmlhbnQoY29udGV4dC5jbGllbnQsIDcxKTtcbiAgICByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoQXBvbGxvQ29udGV4dC5Qcm92aWRlciwgeyB2YWx1ZTogY29udGV4dCB9LCBjaGlsZHJlbikpO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFwb2xsb1Byb3ZpZGVyLmpzLm1hcCJdLCJuYW1lcyI6WyJfX2Fzc2lnbiIsImludmFyaWFudCIsIlJlYWN0IiwiZ2V0QXBvbGxvQ29udGV4dCIsIkFwb2xsb1Byb3ZpZGVyIiwiX2EiLCJjbGllbnQiLCJjaGlsZHJlbiIsIkFwb2xsb0NvbnRleHQiLCJwYXJlbnRDb250ZXh0IiwidXNlQ29udGV4dCIsImNvbnRleHQiLCJ1c2VNZW1vIiwiY3JlYXRlRWxlbWVudCIsIlByb3ZpZGVyIiwidmFsdWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/context/ApolloProvider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/hooks/internal/useDeepMemo.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@apollo/client/react/hooks/internal/useDeepMemo.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useDeepMemo: () => (/* binding */ useDeepMemo)\n/* harmony export */ });\n/* harmony import */ var rehackt__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rehackt */ \"(ssr)/./node_modules/rehackt/index.js\");\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @wry/equality */ \"(ssr)/./node_modules/@wry/equality/lib/index.js\");\n\n\nfunction useDeepMemo(memoFn, deps) {\n    var ref = rehackt__WEBPACK_IMPORTED_MODULE_0__.useRef(void 0);\n    if (!ref.current || !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(ref.current.deps, deps)) {\n        // eslint-disable-next-line react-compiler/react-compiler\n        ref.current = {\n            value: memoFn(),\n            deps: deps\n        };\n    }\n    return ref.current.value;\n} //# sourceMappingURL=useDeepMemo.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvcmVhY3QvaG9va3MvaW50ZXJuYWwvdXNlRGVlcE1lbW8uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWlDO0FBQ0s7QUFDL0IsU0FBU0UsWUFBWUMsTUFBTSxFQUFFQyxJQUFJO0lBQ3BDLElBQUlDLE1BQU1MLDJDQUFZLENBQUMsS0FBSztJQUM1QixJQUFJLENBQUNLLElBQUlFLE9BQU8sSUFBSSxDQUFDTixvREFBS0EsQ0FBQ0ksSUFBSUUsT0FBTyxDQUFDSCxJQUFJLEVBQUVBLE9BQU87UUFDaEQseURBQXlEO1FBQ3pEQyxJQUFJRSxPQUFPLEdBQUc7WUFBRUMsT0FBT0w7WUFBVUMsTUFBTUE7UUFBSztJQUNoRDtJQUNBLE9BQU9DLElBQUlFLE9BQU8sQ0FBQ0MsS0FBSztBQUM1QixFQUNBLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL3NsYWNrLWdyYXBocWwtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvcmVhY3QvaG9va3MvaW50ZXJuYWwvdXNlRGVlcE1lbW8uanM/ZjE3MyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVoYWNrdFwiO1xuaW1wb3J0IHsgZXF1YWwgfSBmcm9tIFwiQHdyeS9lcXVhbGl0eVwiO1xuZXhwb3J0IGZ1bmN0aW9uIHVzZURlZXBNZW1vKG1lbW9GbiwgZGVwcykge1xuICAgIHZhciByZWYgPSBSZWFjdC51c2VSZWYodm9pZCAwKTtcbiAgICBpZiAoIXJlZi5jdXJyZW50IHx8ICFlcXVhbChyZWYuY3VycmVudC5kZXBzLCBkZXBzKSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtY29tcGlsZXIvcmVhY3QtY29tcGlsZXJcbiAgICAgICAgcmVmLmN1cnJlbnQgPSB7IHZhbHVlOiBtZW1vRm4oKSwgZGVwczogZGVwcyB9O1xuICAgIH1cbiAgICByZXR1cm4gcmVmLmN1cnJlbnQudmFsdWU7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VEZWVwTWVtby5qcy5tYXAiXSwibmFtZXMiOlsiUmVhY3QiLCJlcXVhbCIsInVzZURlZXBNZW1vIiwibWVtb0ZuIiwiZGVwcyIsInJlZiIsInVzZVJlZiIsImN1cnJlbnQiLCJ2YWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/hooks/internal/useDeepMemo.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/hooks/internal/useIsomorphicLayoutEffect.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@apollo/client/react/hooks/internal/useIsomorphicLayoutEffect.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useIsomorphicLayoutEffect: () => (/* binding */ useIsomorphicLayoutEffect)\n/* harmony export */ });\n/* harmony import */ var rehackt__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rehackt */ \"(ssr)/./node_modules/rehackt/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n\n\n// use canUseDOM here instead of canUseLayoutEffect because we want to be able\n// to use useLayoutEffect in our jest tests. useLayoutEffect seems to work fine\n// in useSuspenseQuery tests, but to honor the original comment about the\n// warnings for useSyncExternalStore implementation, canUseLayoutEffect is left\n// alone.\nvar useIsomorphicLayoutEffect = _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.canUseDOM ? rehackt__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect : rehackt__WEBPACK_IMPORTED_MODULE_0__.useEffect; //# sourceMappingURL=useIsomorphicLayoutEffect.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvcmVhY3QvaG9va3MvaW50ZXJuYWwvdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBaUM7QUFDdUI7QUFDeEQsOEVBQThFO0FBQzlFLCtFQUErRTtBQUMvRSx5RUFBeUU7QUFDekUsK0VBQStFO0FBQy9FLFNBQVM7QUFDRixJQUFJRSw0QkFBNEJELDBEQUFTQSxHQUFHRCxvREFBcUIsR0FBR0EsOENBQWUsQ0FBQyxDQUMzRixxREFBcUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbGFjay1ncmFwaHFsLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L3JlYWN0L2hvb2tzL2ludGVybmFsL3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QuanM/NDI0YSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVoYWNrdFwiO1xuaW1wb3J0IHsgY2FuVXNlRE9NIH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxpdGllcy9pbmRleC5qc1wiO1xuLy8gdXNlIGNhblVzZURPTSBoZXJlIGluc3RlYWQgb2YgY2FuVXNlTGF5b3V0RWZmZWN0IGJlY2F1c2Ugd2Ugd2FudCB0byBiZSBhYmxlXG4vLyB0byB1c2UgdXNlTGF5b3V0RWZmZWN0IGluIG91ciBqZXN0IHRlc3RzLiB1c2VMYXlvdXRFZmZlY3Qgc2VlbXMgdG8gd29yayBmaW5lXG4vLyBpbiB1c2VTdXNwZW5zZVF1ZXJ5IHRlc3RzLCBidXQgdG8gaG9ub3IgdGhlIG9yaWdpbmFsIGNvbW1lbnQgYWJvdXQgdGhlXG4vLyB3YXJuaW5ncyBmb3IgdXNlU3luY0V4dGVybmFsU3RvcmUgaW1wbGVtZW50YXRpb24sIGNhblVzZUxheW91dEVmZmVjdCBpcyBsZWZ0XG4vLyBhbG9uZS5cbmV4cG9ydCB2YXIgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCA9IGNhblVzZURPTSA/IFJlYWN0LnVzZUxheW91dEVmZmVjdCA6IFJlYWN0LnVzZUVmZmVjdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QuanMubWFwIl0sIm5hbWVzIjpbIlJlYWN0IiwiY2FuVXNlRE9NIiwidXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCIsInVzZUxheW91dEVmZmVjdCIsInVzZUVmZmVjdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/hooks/internal/useIsomorphicLayoutEffect.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/hooks/internal/useWarnRemovedOption.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@apollo/client/react/hooks/internal/useWarnRemovedOption.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useWarnRemovedOption: () => (/* binding */ useWarnRemovedOption)\n/* harmony export */ });\n/* harmony import */ var rehackt__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rehackt */ \"(ssr)/./node_modules/rehackt/index.js\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n\n\n// Remove with Apollo Client 4.0\nfunction useWarnRemovedOption(options, name, callSite, recommendation) {\n    \"use no memo\";\n    if (recommendation === void 0) {\n        recommendation = \"Please remove this option.\";\n    }\n    var didWarn = rehackt__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n    if (name in options && !didWarn.current) {\n        globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_1__.invariant.warn(78, callSite, name, recommendation);\n        // eslint-disable-next-line react-compiler/react-compiler\n        didWarn.current = true;\n    }\n} //# sourceMappingURL=useWarnRemovedOption.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvcmVhY3QvaG9va3MvaW50ZXJuYWwvdXNlV2FyblJlbW92ZWRPcHRpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWlDO0FBQytCO0FBQ2hFLGdDQUFnQztBQUN6QixTQUFTRSxxQkFBcUJDLE9BQU8sRUFBRUMsSUFBSSxFQUFFQyxRQUFRLEVBQUVDLGNBQWM7SUFDeEU7SUFDQSxJQUFJQSxtQkFBbUIsS0FBSyxHQUFHO1FBQUVBLGlCQUFpQjtJQUE4QjtJQUNoRixJQUFJQyxVQUFVUCwyQ0FBWSxDQUFDO0lBQzNCLElBQUlJLFFBQVFELFdBQVcsQ0FBQ0ksUUFBUUUsT0FBTyxFQUFFO1FBQ3JDQyxXQUFXQyxPQUFPLEtBQUssU0FBU1Ysa0VBQVNBLENBQUNXLElBQUksQ0FBQyxJQUFJUCxVQUFVRCxNQUFNRTtRQUNuRSx5REFBeUQ7UUFDekRDLFFBQVFFLE9BQU8sR0FBRztJQUN0QjtBQUNKLEVBQ0EsZ0RBQWdEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2xhY2stZ3JhcGhxbC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9yZWFjdC9ob29rcy9pbnRlcm5hbC91c2VXYXJuUmVtb3ZlZE9wdGlvbi5qcz8xNjIxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWhhY2t0XCI7XG5pbXBvcnQgeyBpbnZhcmlhbnQgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbGl0aWVzL2dsb2JhbHMvaW5kZXguanNcIjtcbi8vIFJlbW92ZSB3aXRoIEFwb2xsbyBDbGllbnQgNC4wXG5leHBvcnQgZnVuY3Rpb24gdXNlV2FyblJlbW92ZWRPcHRpb24ob3B0aW9ucywgbmFtZSwgY2FsbFNpdGUsIHJlY29tbWVuZGF0aW9uKSB7XG4gICAgXCJ1c2Ugbm8gbWVtb1wiO1xuICAgIGlmIChyZWNvbW1lbmRhdGlvbiA9PT0gdm9pZCAwKSB7IHJlY29tbWVuZGF0aW9uID0gXCJQbGVhc2UgcmVtb3ZlIHRoaXMgb3B0aW9uLlwiOyB9XG4gICAgdmFyIGRpZFdhcm4gPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICAgIGlmIChuYW1lIGluIG9wdGlvbnMgJiYgIWRpZFdhcm4uY3VycmVudCkge1xuICAgICAgICBnbG9iYWxUaGlzLl9fREVWX18gIT09IGZhbHNlICYmIGludmFyaWFudC53YXJuKDc4LCBjYWxsU2l0ZSwgbmFtZSwgcmVjb21tZW5kYXRpb24pO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtY29tcGlsZXIvcmVhY3QtY29tcGlsZXJcbiAgICAgICAgZGlkV2Fybi5jdXJyZW50ID0gdHJ1ZTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VXYXJuUmVtb3ZlZE9wdGlvbi5qcy5tYXAiXSwibmFtZXMiOlsiUmVhY3QiLCJpbnZhcmlhbnQiLCJ1c2VXYXJuUmVtb3ZlZE9wdGlvbiIsIm9wdGlvbnMiLCJuYW1lIiwiY2FsbFNpdGUiLCJyZWNvbW1lbmRhdGlvbiIsImRpZFdhcm4iLCJ1c2VSZWYiLCJjdXJyZW50IiwiZ2xvYmFsVGhpcyIsIl9fREVWX18iLCJ3YXJuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/hooks/internal/useWarnRemovedOption.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/hooks/internal/wrapHook.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@apollo/client/react/hooks/internal/wrapHook.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   wrapHook: () => (/* binding */ wrapHook)\n/* harmony export */ });\nvar wrapperSymbol = Symbol.for(\"apollo.hook.wrappers\");\n/**\n * @internal\n *\n * Makes an Apollo Client hook \"wrappable\".\n * That means that the Apollo Client instance can expose a \"wrapper\" that will be\n * used to wrap the original hook implementation with additional logic.\n * @example\n * ```tsx\n * // this is already done in `@apollo/client` for all wrappable hooks (see `WrappableHooks`)\n * // following this pattern\n * function useQuery() {\n *   return wrapHook('useQuery', _useQuery, options.client)(query, options);\n * }\n * function _useQuery(query, options) {\n *   // original implementation\n * }\n *\n * // this is what a library like `@apollo/client-react-streaming` would do\n * class ApolloClientWithStreaming extends ApolloClient {\n *   constructor(options) {\n *     super(options);\n *     this.queryManager[Symbol.for(\"apollo.hook.wrappers\")] = {\n *       useQuery: (original) => (query, options) => {\n *         console.log(\"useQuery was called with options\", options);\n *         return original(query, options);\n *       }\n *     }\n *   }\n * }\n *\n * // this will now log the options and then call the original `useQuery`\n * const client = new ApolloClientWithStreaming({ ... });\n * useQuery(query, { client });\n * ```\n */ function wrapHook(hookName, useHook, clientOrObsQuery) {\n    var queryManager = clientOrObsQuery[\"queryManager\"];\n    var wrappers = queryManager && queryManager[wrapperSymbol];\n    var wrapper = wrappers && wrappers[hookName];\n    return wrapper ? wrapper(useHook) : useHook;\n} //# sourceMappingURL=wrapHook.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvcmVhY3QvaG9va3MvaW50ZXJuYWwvd3JhcEhvb2suanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLElBQUlBLGdCQUFnQkMsT0FBT0MsR0FBRyxDQUFDO0FBQy9COzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBa0NDLEdBQ00sU0FBU0MsU0FBU0MsUUFBUSxFQUFFQyxPQUFPLEVBQUVDLGdCQUFnQjtJQUN4RCxJQUFJQyxlQUFlRCxnQkFBZ0IsQ0FBQyxlQUFlO0lBQ25ELElBQUlFLFdBQVdELGdCQUFnQkEsWUFBWSxDQUFDUCxjQUFjO0lBQzFELElBQUlTLFVBQVVELFlBQVlBLFFBQVEsQ0FBQ0osU0FBUztJQUM1QyxPQUFPSyxVQUFVQSxRQUFRSixXQUFXQTtBQUN4QyxFQUNBLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL3NsYWNrLWdyYXBocWwtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvcmVhY3QvaG9va3MvaW50ZXJuYWwvd3JhcEhvb2suanM/NjYzZCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgd3JhcHBlclN5bWJvbCA9IFN5bWJvbC5mb3IoXCJhcG9sbG8uaG9vay53cmFwcGVyc1wiKTtcbi8qKlxuICogQGludGVybmFsXG4gKlxuICogTWFrZXMgYW4gQXBvbGxvIENsaWVudCBob29rIFwid3JhcHBhYmxlXCIuXG4gKiBUaGF0IG1lYW5zIHRoYXQgdGhlIEFwb2xsbyBDbGllbnQgaW5zdGFuY2UgY2FuIGV4cG9zZSBhIFwid3JhcHBlclwiIHRoYXQgd2lsbCBiZVxuICogdXNlZCB0byB3cmFwIHRoZSBvcmlnaW5hbCBob29rIGltcGxlbWVudGF0aW9uIHdpdGggYWRkaXRpb25hbCBsb2dpYy5cbiAqIEBleGFtcGxlXG4gKiBgYGB0c3hcbiAqIC8vIHRoaXMgaXMgYWxyZWFkeSBkb25lIGluIGBAYXBvbGxvL2NsaWVudGAgZm9yIGFsbCB3cmFwcGFibGUgaG9va3MgKHNlZSBgV3JhcHBhYmxlSG9va3NgKVxuICogLy8gZm9sbG93aW5nIHRoaXMgcGF0dGVyblxuICogZnVuY3Rpb24gdXNlUXVlcnkoKSB7XG4gKiAgIHJldHVybiB3cmFwSG9vaygndXNlUXVlcnknLCBfdXNlUXVlcnksIG9wdGlvbnMuY2xpZW50KShxdWVyeSwgb3B0aW9ucyk7XG4gKiB9XG4gKiBmdW5jdGlvbiBfdXNlUXVlcnkocXVlcnksIG9wdGlvbnMpIHtcbiAqICAgLy8gb3JpZ2luYWwgaW1wbGVtZW50YXRpb25cbiAqIH1cbiAqXG4gKiAvLyB0aGlzIGlzIHdoYXQgYSBsaWJyYXJ5IGxpa2UgYEBhcG9sbG8vY2xpZW50LXJlYWN0LXN0cmVhbWluZ2Agd291bGQgZG9cbiAqIGNsYXNzIEFwb2xsb0NsaWVudFdpdGhTdHJlYW1pbmcgZXh0ZW5kcyBBcG9sbG9DbGllbnQge1xuICogICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gKiAgICAgc3VwZXIob3B0aW9ucyk7XG4gKiAgICAgdGhpcy5xdWVyeU1hbmFnZXJbU3ltYm9sLmZvcihcImFwb2xsby5ob29rLndyYXBwZXJzXCIpXSA9IHtcbiAqICAgICAgIHVzZVF1ZXJ5OiAob3JpZ2luYWwpID0+IChxdWVyeSwgb3B0aW9ucykgPT4ge1xuICogICAgICAgICBjb25zb2xlLmxvZyhcInVzZVF1ZXJ5IHdhcyBjYWxsZWQgd2l0aCBvcHRpb25zXCIsIG9wdGlvbnMpO1xuICogICAgICAgICByZXR1cm4gb3JpZ2luYWwocXVlcnksIG9wdGlvbnMpO1xuICogICAgICAgfVxuICogICAgIH1cbiAqICAgfVxuICogfVxuICpcbiAqIC8vIHRoaXMgd2lsbCBub3cgbG9nIHRoZSBvcHRpb25zIGFuZCB0aGVuIGNhbGwgdGhlIG9yaWdpbmFsIGB1c2VRdWVyeWBcbiAqIGNvbnN0IGNsaWVudCA9IG5ldyBBcG9sbG9DbGllbnRXaXRoU3RyZWFtaW5nKHsgLi4uIH0pO1xuICogdXNlUXVlcnkocXVlcnksIHsgY2xpZW50IH0pO1xuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB3cmFwSG9vayhob29rTmFtZSwgdXNlSG9vaywgY2xpZW50T3JPYnNRdWVyeSkge1xuICAgIHZhciBxdWVyeU1hbmFnZXIgPSBjbGllbnRPck9ic1F1ZXJ5W1wicXVlcnlNYW5hZ2VyXCJdO1xuICAgIHZhciB3cmFwcGVycyA9IHF1ZXJ5TWFuYWdlciAmJiBxdWVyeU1hbmFnZXJbd3JhcHBlclN5bWJvbF07XG4gICAgdmFyIHdyYXBwZXIgPSB3cmFwcGVycyAmJiB3cmFwcGVyc1tob29rTmFtZV07XG4gICAgcmV0dXJuIHdyYXBwZXIgPyB3cmFwcGVyKHVzZUhvb2spIDogdXNlSG9vaztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdyYXBIb29rLmpzLm1hcCJdLCJuYW1lcyI6WyJ3cmFwcGVyU3ltYm9sIiwiU3ltYm9sIiwiZm9yIiwid3JhcEhvb2siLCJob29rTmFtZSIsInVzZUhvb2siLCJjbGllbnRPck9ic1F1ZXJ5IiwicXVlcnlNYW5hZ2VyIiwid3JhcHBlcnMiLCJ3cmFwcGVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/hooks/internal/wrapHook.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/hooks/useApolloClient.js":
/*!********************************************************************!*\
  !*** ./node_modules/@apollo/client/react/hooks/useApolloClient.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useApolloClient: () => (/* binding */ useApolloClient)\n/* harmony export */ });\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var rehackt__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rehackt */ \"(ssr)/./node_modules/rehackt/index.js\");\n/* harmony import */ var _context_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../context/index.js */ \"(ssr)/./node_modules/@apollo/client/react/context/ApolloContext.js\");\n\n\n\n/**\n * @example\n * ```jsx\n * import { useApolloClient } from '@apollo/client';\n *\n * function SomeComponent() {\n *   const client = useApolloClient();\n *   // `client` is now set to the `ApolloClient` instance being used by the\n *   // application (that was configured using something like `ApolloProvider`)\n * }\n * ```\n *\n * @since 3.0.0\n * @returns The `ApolloClient` instance being used by the application.\n */ function useApolloClient(override) {\n    var context = rehackt__WEBPACK_IMPORTED_MODULE_1__.useContext((0,_context_index_js__WEBPACK_IMPORTED_MODULE_2__.getApolloContext)());\n    var client = override || context.client;\n    (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(!!client, 79);\n    return client;\n} //# sourceMappingURL=useApolloClient.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvcmVhY3QvaG9va3MvdXNlQXBvbGxvQ2xpZW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBNkQ7QUFDNUI7QUFDc0I7QUFDdkQ7Ozs7Ozs7Ozs7Ozs7O0NBY0MsR0FDTSxTQUFTRyxnQkFBZ0JDLFFBQVE7SUFDcEMsSUFBSUMsVUFBVUosK0NBQWdCLENBQUNDLG1FQUFnQkE7SUFDL0MsSUFBSUssU0FBU0gsWUFBWUMsUUFBUUUsTUFBTTtJQUN2Q1Asc0VBQVNBLENBQUMsQ0FBQyxDQUFDTyxRQUFRO0lBQ3BCLE9BQU9BO0FBQ1gsRUFDQSwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbGFjay1ncmFwaHFsLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L3JlYWN0L2hvb2tzL3VzZUFwb2xsb0NsaWVudC5qcz80M2NjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGludmFyaWFudCB9IGZyb20gXCIuLi8uLi91dGlsaXRpZXMvZ2xvYmFscy9pbmRleC5qc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlaGFja3RcIjtcbmltcG9ydCB7IGdldEFwb2xsb0NvbnRleHQgfSBmcm9tIFwiLi4vY29udGV4dC9pbmRleC5qc1wiO1xuLyoqXG4gKiBAZXhhbXBsZVxuICogYGBganN4XG4gKiBpbXBvcnQgeyB1c2VBcG9sbG9DbGllbnQgfSBmcm9tICdAYXBvbGxvL2NsaWVudCc7XG4gKlxuICogZnVuY3Rpb24gU29tZUNvbXBvbmVudCgpIHtcbiAqICAgY29uc3QgY2xpZW50ID0gdXNlQXBvbGxvQ2xpZW50KCk7XG4gKiAgIC8vIGBjbGllbnRgIGlzIG5vdyBzZXQgdG8gdGhlIGBBcG9sbG9DbGllbnRgIGluc3RhbmNlIGJlaW5nIHVzZWQgYnkgdGhlXG4gKiAgIC8vIGFwcGxpY2F0aW9uICh0aGF0IHdhcyBjb25maWd1cmVkIHVzaW5nIHNvbWV0aGluZyBsaWtlIGBBcG9sbG9Qcm92aWRlcmApXG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBAc2luY2UgMy4wLjBcbiAqIEByZXR1cm5zIFRoZSBgQXBvbGxvQ2xpZW50YCBpbnN0YW5jZSBiZWluZyB1c2VkIGJ5IHRoZSBhcHBsaWNhdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUFwb2xsb0NsaWVudChvdmVycmlkZSkge1xuICAgIHZhciBjb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChnZXRBcG9sbG9Db250ZXh0KCkpO1xuICAgIHZhciBjbGllbnQgPSBvdmVycmlkZSB8fCBjb250ZXh0LmNsaWVudDtcbiAgICBpbnZhcmlhbnQoISFjbGllbnQsIDc5KTtcbiAgICByZXR1cm4gY2xpZW50O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlQXBvbGxvQ2xpZW50LmpzLm1hcCJdLCJuYW1lcyI6WyJpbnZhcmlhbnQiLCJSZWFjdCIsImdldEFwb2xsb0NvbnRleHQiLCJ1c2VBcG9sbG9DbGllbnQiLCJvdmVycmlkZSIsImNvbnRleHQiLCJ1c2VDb250ZXh0IiwiY2xpZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/hooks/useApolloClient.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/hooks/useMutation.js":
/*!****************************************************************!*\
  !*** ./node_modules/@apollo/client/react/hooks/useMutation.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useMutation: () => (/* binding */ useMutation)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var rehackt__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rehackt */ \"(ssr)/./node_modules/rehackt/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/mergeOptions.js\");\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @wry/equality */ \"(ssr)/./node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var _parser_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../parser/index.js */ \"(ssr)/./node_modules/@apollo/client/react/parser/index.js\");\n/* harmony import */ var _errors_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../errors/index.js */ \"(ssr)/./node_modules/@apollo/client/errors/index.js\");\n/* harmony import */ var _useApolloClient_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./useApolloClient.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/useApolloClient.js\");\n/* harmony import */ var _internal_useIsomorphicLayoutEffect_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./internal/useIsomorphicLayoutEffect.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/internal/useIsomorphicLayoutEffect.js\");\n/* harmony import */ var _internal_useWarnRemovedOption_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/useWarnRemovedOption.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/internal/useWarnRemovedOption.js\");\n\n\n\n\n\n\n\n\n\n/**\n *\n *\n * > Refer to the [Mutations](https://www.apollographql.com/docs/react/data/mutations/) section for a more in-depth overview of `useMutation`.\n *\n * @example\n * ```jsx\n * import { gql, useMutation } from '@apollo/client';\n *\n * const ADD_TODO = gql`\n *   mutation AddTodo($type: String!) {\n *     addTodo(type: $type) {\n *       id\n *       type\n *     }\n *   }\n * `;\n *\n * function AddTodo() {\n *   let input;\n *   const [addTodo, { data }] = useMutation(ADD_TODO);\n *\n *   return (\n *     <div>\n *       <form\n *         onSubmit={e => {\n *           e.preventDefault();\n *           addTodo({ variables: { type: input.value } });\n *           input.value = '';\n *         }}\n *       >\n *         <input\n *           ref={node => {\n *             input = node;\n *           }}\n *         />\n *         <button type=\"submit\">Add Todo</button>\n *       </form>\n *     </div>\n *   );\n * }\n * ```\n * @since 3.0.0\n * @param mutation - A GraphQL mutation document parsed into an AST by `gql`.\n * @param options - Options to control how the mutation is executed.\n * @returns A tuple in the form of `[mutate, result]`\n */ function useMutation(mutation, options) {\n    if (globalThis.__DEV__ !== false) {\n        // eslint-disable-next-line react-compiler/react-compiler, react-hooks/rules-of-hooks\n        (0,_internal_useWarnRemovedOption_js__WEBPACK_IMPORTED_MODULE_2__.useWarnRemovedOption)(options || {}, \"ignoreResults\", \"useMutation\", \"If you don't want to synchronize component state with the mutation, please use the `useApolloClient` hook to get the client instance and call `client.mutate` directly.\");\n    }\n    var client = (0,_useApolloClient_js__WEBPACK_IMPORTED_MODULE_3__.useApolloClient)(options === null || options === void 0 ? void 0 : options.client);\n    (0,_parser_index_js__WEBPACK_IMPORTED_MODULE_4__.verifyDocumentType)(mutation, _parser_index_js__WEBPACK_IMPORTED_MODULE_4__.DocumentType.Mutation);\n    var _a = rehackt__WEBPACK_IMPORTED_MODULE_0__.useState({\n        called: false,\n        loading: false,\n        client: client\n    }), result = _a[0], setResult = _a[1];\n    var ref = rehackt__WEBPACK_IMPORTED_MODULE_0__.useRef({\n        result: result,\n        mutationId: 0,\n        isMounted: true,\n        client: client,\n        mutation: mutation,\n        options: options\n    });\n    (0,_internal_useIsomorphicLayoutEffect_js__WEBPACK_IMPORTED_MODULE_5__.useIsomorphicLayoutEffect)(function() {\n        Object.assign(ref.current, {\n            client: client,\n            options: options,\n            mutation: mutation\n        });\n    });\n    var execute = rehackt__WEBPACK_IMPORTED_MODULE_0__.useCallback(function(executeOptions) {\n        if (executeOptions === void 0) {\n            executeOptions = {};\n        }\n        var _a = ref.current, options = _a.options, mutation = _a.mutation;\n        var baseOptions = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, options), {\n            mutation: mutation\n        });\n        var client = executeOptions.client || ref.current.client;\n        if (!ref.current.result.loading && !baseOptions.ignoreResults && ref.current.isMounted) {\n            setResult(ref.current.result = {\n                loading: true,\n                error: void 0,\n                data: void 0,\n                called: true,\n                client: client\n            });\n        }\n        var mutationId = ++ref.current.mutationId;\n        var clientOptions = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.mergeOptions)(baseOptions, executeOptions);\n        return client.mutate(clientOptions).then(function(response) {\n            var _a, _b;\n            var data = response.data, errors = response.errors;\n            var error = errors && errors.length > 0 ? new _errors_index_js__WEBPACK_IMPORTED_MODULE_8__.ApolloError({\n                graphQLErrors: errors\n            }) : void 0;\n            var onError = executeOptions.onError || ((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onError);\n            if (error && onError) {\n                onError(error, clientOptions);\n            }\n            if (mutationId === ref.current.mutationId && !clientOptions.ignoreResults) {\n                var result_1 = {\n                    called: true,\n                    loading: false,\n                    data: data,\n                    error: error,\n                    client: client\n                };\n                if (ref.current.isMounted && !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(ref.current.result, result_1)) {\n                    setResult(ref.current.result = result_1);\n                }\n            }\n            var onCompleted = executeOptions.onCompleted || ((_b = ref.current.options) === null || _b === void 0 ? void 0 : _b.onCompleted);\n            if (!error) {\n                onCompleted === null || onCompleted === void 0 ? void 0 : onCompleted(response.data, clientOptions);\n            }\n            return response;\n        }, function(error) {\n            var _a;\n            if (mutationId === ref.current.mutationId && ref.current.isMounted) {\n                var result_2 = {\n                    loading: false,\n                    error: error,\n                    data: void 0,\n                    called: true,\n                    client: client\n                };\n                if (!(0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(ref.current.result, result_2)) {\n                    setResult(ref.current.result = result_2);\n                }\n            }\n            var onError = executeOptions.onError || ((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onError);\n            if (onError) {\n                onError(error, clientOptions);\n                // TODO(brian): why are we returning this here???\n                return {\n                    data: void 0,\n                    errors: error\n                };\n            }\n            throw error;\n        });\n    }, []);\n    var reset = rehackt__WEBPACK_IMPORTED_MODULE_0__.useCallback(function() {\n        if (ref.current.isMounted) {\n            var result_3 = {\n                called: false,\n                loading: false,\n                client: ref.current.client\n            };\n            Object.assign(ref.current, {\n                mutationId: 0,\n                result: result_3\n            });\n            setResult(result_3);\n        }\n    }, []);\n    rehackt__WEBPACK_IMPORTED_MODULE_0__.useEffect(function() {\n        var current = ref.current;\n        current.isMounted = true;\n        return function() {\n            current.isMounted = false;\n        };\n    }, []);\n    return [\n        execute,\n        (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({\n            reset: reset\n        }, result)\n    ];\n} //# sourceMappingURL=useMutation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/hooks/useMutation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/hooks/useQuery.js":
/*!*************************************************************!*\
  !*** ./node_modules/@apollo/client/react/hooks/useQuery.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createMakeWatchQueryOptions: () => (/* binding */ createMakeWatchQueryOptions),\n/* harmony export */   getDefaultFetchPolicy: () => (/* binding */ getDefaultFetchPolicy),\n/* harmony export */   getObsQueryOptions: () => (/* binding */ getObsQueryOptions),\n/* harmony export */   toApolloError: () => (/* binding */ toApolloError),\n/* harmony export */   toQueryResult: () => (/* binding */ toQueryResult),\n/* harmony export */   useQuery: () => (/* binding */ useQuery),\n/* harmony export */   useQueryInternals: () => (/* binding */ useQueryInternals)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var rehackt__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rehackt */ \"(ssr)/./node_modules/rehackt/index.js\");\n/* harmony import */ var _useSyncExternalStore_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./useSyncExternalStore.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/useSyncExternalStore.js\");\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @wry/equality */ \"(ssr)/./node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/mergeOptions.js\");\n/* harmony import */ var _context_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../context/index.js */ \"(ssr)/./node_modules/@apollo/client/react/context/ApolloContext.js\");\n/* harmony import */ var _errors_index_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../errors/index.js */ \"(ssr)/./node_modules/@apollo/client/errors/index.js\");\n/* harmony import */ var _core_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../core/index.js */ \"(ssr)/./node_modules/@apollo/client/core/ObservableQuery.js\");\n/* harmony import */ var _core_index_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../core/index.js */ \"(ssr)/./node_modules/@apollo/client/core/networkStatus.js\");\n/* harmony import */ var _parser_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../parser/index.js */ \"(ssr)/./node_modules/@apollo/client/react/parser/index.js\");\n/* harmony import */ var _useApolloClient_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./useApolloClient.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/useApolloClient.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/compact.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/maybeDeepFreeze.js\");\n/* harmony import */ var _internal_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./internal/index.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/internal/wrapHook.js\");\n/* harmony import */ var _internal_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./internal/index.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/internal/useWarnRemovedOption.js\");\n/* harmony import */ var _utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../utilities/deprecation/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/deprecation/index.js\");\n\n/**\n * Function parameters in this file try to follow a common order for the sake of\n * readability and consistency. The order is as follows:\n *\n * resultData\n * observable\n * client\n * query\n * options\n * watchQueryOptions\n * makeWatchQueryOptions\n * isSSRAllowed\n * disableNetworkFetches\n * partialRefetch\n * renderPromises\n * isSyncSSR\n * callbacks\n */ /** */ \n\n\n\n\n\n\n\n\n\n\n\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction noop() {}\nvar lastWatchOptions = Symbol();\n/**\n * A hook for executing queries in an Apollo application.\n *\n * To run a query within a React component, call `useQuery` and pass it a GraphQL query document.\n *\n * When your component renders, `useQuery` returns an object from Apollo Client that contains `loading`, `error`, and `data` properties you can use to render your UI.\n *\n * > Refer to the [Queries](https://www.apollographql.com/docs/react/data/queries) section for a more in-depth overview of `useQuery`.\n *\n * @example\n * ```jsx\n * import { gql, useQuery } from '@apollo/client';\n *\n * const GET_GREETING = gql`\n *   query GetGreeting($language: String!) {\n *     greeting(language: $language) {\n *       message\n *     }\n *   }\n * `;\n *\n * function Hello() {\n *   const { loading, error, data } = useQuery(GET_GREETING, {\n *     variables: { language: 'english' },\n *   });\n *   if (loading) return <p>Loading ...</p>;\n *   return <h1>Hello {data.greeting.message}!</h1>;\n * }\n * ```\n * @since 3.0.0\n * @param query - A GraphQL query document parsed into an AST by `gql`.\n * @param options - Options to control how the query is executed.\n * @returns Query result object\n */ function useQuery(query, options) {\n    if (options === void 0) {\n        options = Object.create(null);\n    }\n    return (0,_internal_index_js__WEBPACK_IMPORTED_MODULE_3__.wrapHook)(\"useQuery\", useQuery_, (0,_useApolloClient_js__WEBPACK_IMPORTED_MODULE_4__.useApolloClient)(options && options.client))(query, options);\n}\nfunction useQuery_(query, options) {\n    if (globalThis.__DEV__ !== false) {\n        /* eslint-disable react-hooks/rules-of-hooks, react-compiler/react-compiler */ (0,_internal_index_js__WEBPACK_IMPORTED_MODULE_5__.useWarnRemovedOption)(options, \"canonizeResults\", \"useQuery\");\n        (0,_internal_index_js__WEBPACK_IMPORTED_MODULE_5__.useWarnRemovedOption)(options, \"partialRefetch\", \"useQuery\");\n        (0,_internal_index_js__WEBPACK_IMPORTED_MODULE_5__.useWarnRemovedOption)(options, \"defaultOptions\", \"useQuery\", \"Pass the options directly to the hook instead.\");\n        (0,_internal_index_js__WEBPACK_IMPORTED_MODULE_5__.useWarnRemovedOption)(options, \"onCompleted\", \"useQuery\", \"If your `onCompleted` callback sets local state, switch to use derived state using `data` returned from the hook instead. Use `useEffect` to perform side-effects as a result of updates to `data`.\");\n        (0,_internal_index_js__WEBPACK_IMPORTED_MODULE_5__.useWarnRemovedOption)(options, \"onError\", \"useQuery\", \"If your `onError` callback sets local state, switch to use derived state using `data`, `error` or `errors` returned from the hook instead. Use `useEffect` if you need to perform side-effects as a result of updates to `data`, `error` or `errors`.\");\n    /* eslint-enable react-hooks/rules-of-hooks, react-compiler/react-compiler */ }\n    var _a = useQueryInternals(query, options), result = _a.result, obsQueryFields = _a.obsQueryFields;\n    return rehackt__WEBPACK_IMPORTED_MODULE_1__.useMemo(function() {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, result), obsQueryFields);\n    }, [\n        result,\n        obsQueryFields\n    ]);\n}\nfunction useInternalState(client, query, options, renderPromises, makeWatchQueryOptions) {\n    function createInternalState(previous) {\n        var _a;\n        (0,_parser_index_js__WEBPACK_IMPORTED_MODULE_7__.verifyDocumentType)(query, _parser_index_js__WEBPACK_IMPORTED_MODULE_7__.DocumentType.Query);\n        var internalState = {\n            client: client,\n            query: query,\n            observable: // See if there is an existing observable that was used to fetch the same\n            // data and if so, use it instead since it will contain the proper queryId\n            // to fetch the result set. This is used during SSR.\n            renderPromises && renderPromises.getSSRObservable(makeWatchQueryOptions()) || _core_index_js__WEBPACK_IMPORTED_MODULE_8__.ObservableQuery[\"inactiveOnCreation\"].withValue(!renderPromises, function() {\n                return (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_9__.muteDeprecations)(\"canonizeResults\", function() {\n                    return client.watchQuery(getObsQueryOptions(void 0, client, options, makeWatchQueryOptions()));\n                });\n            }),\n            resultData: {\n                // Reuse previousData from previous InternalState (if any) to provide\n                // continuity of previousData even if/when the query or client changes.\n                previousData: (_a = previous === null || previous === void 0 ? void 0 : previous.resultData.current) === null || _a === void 0 ? void 0 : _a.data\n            }\n        };\n        return internalState;\n    }\n    var _a = rehackt__WEBPACK_IMPORTED_MODULE_1__.useState(createInternalState), internalState = _a[0], updateInternalState = _a[1];\n    /**\n     * Used by `useLazyQuery` when a new query is executed.\n     * We keep this logic here since it needs to update things in unsafe\n     * ways and here we at least can keep track of that in a single place.\n     */ function onQueryExecuted(watchQueryOptions) {\n        var _a;\n        var _b;\n        // this needs to be set to prevent an immediate `resubscribe` in the\n        // next rerender of the `useQuery` internals\n        Object.assign(internalState.observable, (_a = {}, _a[lastWatchOptions] = watchQueryOptions, _a));\n        var resultData = internalState.resultData;\n        updateInternalState((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, internalState), {\n            // might be a different query\n            query: watchQueryOptions.query,\n            resultData: Object.assign(resultData, {\n                // We need to modify the previous `resultData` object as we rely on the\n                // object reference in other places\n                previousData: ((_b = resultData.current) === null || _b === void 0 ? void 0 : _b.data) || resultData.previousData,\n                current: undefined\n            })\n        }));\n    }\n    if (client !== internalState.client || query !== internalState.query) {\n        // If the client or query have changed, we need to create a new InternalState.\n        // This will trigger a re-render with the new state, but it will also continue\n        // to run the current render function to completion.\n        // Since we sometimes trigger some side-effects in the render function, we\n        // re-assign `state` to the new state to ensure that those side-effects are\n        // triggered with the new state.\n        var newInternalState = createInternalState(internalState);\n        updateInternalState(newInternalState);\n        return [\n            newInternalState,\n            onQueryExecuted\n        ];\n    }\n    return [\n        internalState,\n        onQueryExecuted\n    ];\n}\nfunction useQueryInternals(query, options) {\n    var client = (0,_useApolloClient_js__WEBPACK_IMPORTED_MODULE_4__.useApolloClient)(options.client);\n    var renderPromises = rehackt__WEBPACK_IMPORTED_MODULE_1__.useContext((0,_context_index_js__WEBPACK_IMPORTED_MODULE_10__.getApolloContext)()).renderPromises;\n    var isSyncSSR = !!renderPromises;\n    var disableNetworkFetches = client.disableNetworkFetches;\n    var ssrAllowed = options.ssr !== false && !options.skip;\n    var partialRefetch = options.partialRefetch;\n    var makeWatchQueryOptions = createMakeWatchQueryOptions(client, query, options, isSyncSSR);\n    var _a = useInternalState(client, query, options, renderPromises, makeWatchQueryOptions), _b = _a[0], observable = _b.observable, resultData = _b.resultData, onQueryExecuted = _a[1];\n    var watchQueryOptions = makeWatchQueryOptions(observable);\n    useResubscribeIfNecessary(resultData, observable, client, options, watchQueryOptions);\n    var obsQueryFields = rehackt__WEBPACK_IMPORTED_MODULE_1__.useMemo(function() {\n        return bindObservableMethods(observable);\n    }, [\n        observable\n    ]);\n    useRegisterSSRObservable(observable, renderPromises, ssrAllowed);\n    var result = useObservableSubscriptionResult(resultData, observable, client, options, watchQueryOptions, disableNetworkFetches, partialRefetch, isSyncSSR, {\n        onCompleted: options.onCompleted || noop,\n        onError: options.onError || noop\n    });\n    return {\n        result: result,\n        obsQueryFields: obsQueryFields,\n        observable: observable,\n        resultData: resultData,\n        client: client,\n        onQueryExecuted: onQueryExecuted\n    };\n}\nfunction useObservableSubscriptionResult(resultData, observable, client, options, watchQueryOptions, disableNetworkFetches, partialRefetch, isSyncSSR, callbacks) {\n    var callbackRef = rehackt__WEBPACK_IMPORTED_MODULE_1__.useRef(callbacks);\n    rehackt__WEBPACK_IMPORTED_MODULE_1__.useEffect(function() {\n        // Make sure state.onCompleted and state.onError always reflect the latest\n        // options.onCompleted and options.onError callbacks provided to useQuery,\n        // since those functions are often recreated every time useQuery is called.\n        // Like the forceUpdate method, the versions of these methods inherited from\n        // InternalState.prototype are empty no-ops, but we can override them on the\n        // base state object (without modifying the prototype).\n        callbackRef.current = callbacks;\n    });\n    var resultOverride = (isSyncSSR || disableNetworkFetches) && options.ssr === false && !options.skip ? // If SSR has been explicitly disabled, and this function has been called\n    // on the server side, return the default loading state.\n    ssrDisabledResult : options.skip || watchQueryOptions.fetchPolicy === \"standby\" ? // When skipping a query (ie. we're not querying for data but still want to\n    // render children), make sure the `data` is cleared out and `loading` is\n    // set to `false` (since we aren't loading anything).\n    //\n    // NOTE: We no longer think this is the correct behavior. Skipping should\n    // not automatically set `data` to `undefined`, but instead leave the\n    // previous data in place. In other words, skipping should not mandate that\n    // previously received data is all of a sudden removed. Unfortunately,\n    // changing this is breaking, so we'll have to wait until Apollo Client 4.0\n    // to address this.\n    skipStandbyResult : void 0;\n    var previousData = resultData.previousData;\n    var currentResultOverride = rehackt__WEBPACK_IMPORTED_MODULE_1__.useMemo(function() {\n        return resultOverride && toQueryResult(resultOverride, previousData, observable, client);\n    }, [\n        client,\n        observable,\n        resultOverride,\n        previousData\n    ]);\n    return (0,_useSyncExternalStore_js__WEBPACK_IMPORTED_MODULE_11__.useSyncExternalStore)(rehackt__WEBPACK_IMPORTED_MODULE_1__.useCallback(function(handleStoreChange) {\n        // reference `disableNetworkFetches` here to ensure that the rules of hooks\n        // keep it as a dependency of this effect, even though it's not used\n        disableNetworkFetches;\n        if (isSyncSSR) {\n            return function() {};\n        }\n        var onNext = function() {\n            var previousResult = resultData.current;\n            // We use `getCurrentResult()` instead of the onNext argument because\n            // the values differ slightly. Specifically, loading results will have\n            // an empty object for data instead of `undefined` for some reason.\n            var result = observable.getCurrentResult();\n            // Make sure we're not attempting to re-render similar results\n            if (previousResult && previousResult.loading === result.loading && previousResult.networkStatus === result.networkStatus && (0,_wry_equality__WEBPACK_IMPORTED_MODULE_2__.equal)(previousResult.data, result.data)) {\n                return;\n            }\n            setResult(result, resultData, observable, client, partialRefetch, handleStoreChange, callbackRef.current);\n        };\n        var onError = function(error) {\n            subscription.current.unsubscribe();\n            subscription.current = observable.resubscribeAfterError(onNext, onError);\n            if (!hasOwnProperty.call(error, \"graphQLErrors\")) {\n                // The error is not a GraphQL error\n                throw error;\n            }\n            var previousResult = resultData.current;\n            if (!previousResult || previousResult && previousResult.loading || !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_2__.equal)(error, previousResult.error)) {\n                setResult({\n                    data: previousResult && previousResult.data,\n                    error: error,\n                    loading: false,\n                    networkStatus: _core_index_js__WEBPACK_IMPORTED_MODULE_12__.NetworkStatus.error\n                }, resultData, observable, client, partialRefetch, handleStoreChange, callbackRef.current);\n            }\n        };\n        // TODO evaluate if we keep this in\n        // React Compiler cannot handle scoped `let` access, but a mutable object\n        // like this is fine.\n        // was:\n        // let subscription = observable.subscribe(onNext, onError);\n        var subscription = {\n            current: observable.subscribe(onNext, onError)\n        };\n        // Do the \"unsubscribe\" with a short delay.\n        // This way, an existing subscription can be reused without an additional\n        // request if \"unsubscribe\"  and \"resubscribe\" to the same ObservableQuery\n        // happen in very fast succession.\n        return function() {\n            setTimeout(function() {\n                return subscription.current.unsubscribe();\n            });\n        };\n    }, [\n        disableNetworkFetches,\n        isSyncSSR,\n        observable,\n        resultData,\n        partialRefetch,\n        client\n    ]), function() {\n        return currentResultOverride || getCurrentResult(resultData, observable, callbackRef.current, partialRefetch, client);\n    }, function() {\n        return currentResultOverride || getCurrentResult(resultData, observable, callbackRef.current, partialRefetch, client);\n    });\n}\nfunction useRegisterSSRObservable(observable, renderPromises, ssrAllowed) {\n    if (renderPromises && ssrAllowed) {\n        renderPromises.registerSSRObservable(observable);\n        if (observable.getCurrentResult().loading) {\n            // TODO: This is a legacy API which could probably be cleaned up\n            renderPromises.addObservableQueryPromise(observable);\n        }\n    }\n}\n// this hook is not compatible with any rules of React, and there's no good way to rewrite it.\n// it should stay a separate hook that will not be optimized by the compiler\nfunction useResubscribeIfNecessary(/** this hook will mutate properties on `resultData` */ resultData, /** this hook will mutate properties on `observable` */ observable, client, options, watchQueryOptions) {\n    var _a;\n    if (observable[lastWatchOptions] && !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_2__.equal)(observable[lastWatchOptions], watchQueryOptions)) {\n        // Though it might be tempting to postpone this reobserve call to the\n        // useEffect block, we need getCurrentResult to return an appropriate\n        // loading:true result synchronously (later within the same call to\n        // useQuery). Since we already have this.observable here (not true for\n        // the very first call to useQuery), we are not initiating any new\n        // subscriptions, though it does feel less than ideal that reobserve\n        // (potentially) kicks off a network request (for example, when the\n        // variables have changed), which is technically a side-effect.\n        observable.reobserve(getObsQueryOptions(observable, client, options, watchQueryOptions));\n        // Make sure getCurrentResult returns a fresh ApolloQueryResult<TData>,\n        // but save the current data as this.previousData, just like setResult\n        // usually does.\n        resultData.previousData = ((_a = resultData.current) === null || _a === void 0 ? void 0 : _a.data) || resultData.previousData;\n        resultData.current = void 0;\n    }\n    observable[lastWatchOptions] = watchQueryOptions;\n}\n/*\n * A function to massage options before passing them to ObservableQuery.\n * This is two-step curried because we want to reuse the `make` function,\n * but the `observable` might differ between calls to `make`.\n */ function createMakeWatchQueryOptions(client, query, _a, isSyncSSR) {\n    if (_a === void 0) {\n        _a = {};\n    }\n    var skip = _a.skip, ssr = _a.ssr, onCompleted = _a.onCompleted, onError = _a.onError, defaultOptions = _a.defaultOptions, // The above options are useQuery-specific, so this ...otherOptions spread\n    // makes otherOptions almost a WatchQueryOptions object, except for the\n    // query property that we add below.\n    otherOptions = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__rest)(_a, [\n        \"skip\",\n        \"ssr\",\n        \"onCompleted\",\n        \"onError\",\n        \"defaultOptions\"\n    ]);\n    return function(observable) {\n        // This Object.assign is safe because otherOptions is a fresh ...rest object\n        // that did not exist until just now, so modifications are still allowed.\n        var watchQueryOptions = Object.assign(otherOptions, {\n            query: query\n        });\n        if (isSyncSSR && (watchQueryOptions.fetchPolicy === \"network-only\" || watchQueryOptions.fetchPolicy === \"cache-and-network\")) {\n            // this behavior was added to react-apollo without explanation in this PR\n            // https://github.com/apollographql/react-apollo/pull/1579\n            watchQueryOptions.fetchPolicy = \"cache-first\";\n        }\n        if (!watchQueryOptions.variables) {\n            watchQueryOptions.variables = {};\n        }\n        if (skip) {\n            // When skipping, we set watchQueryOptions.fetchPolicy initially to\n            // \"standby\", but we also need/want to preserve the initial non-standby\n            // fetchPolicy that would have been used if not skipping.\n            watchQueryOptions.initialFetchPolicy = watchQueryOptions.initialFetchPolicy || watchQueryOptions.fetchPolicy || getDefaultFetchPolicy(defaultOptions, client.defaultOptions);\n            watchQueryOptions.fetchPolicy = \"standby\";\n        } else if (!watchQueryOptions.fetchPolicy) {\n            watchQueryOptions.fetchPolicy = (observable === null || observable === void 0 ? void 0 : observable.options.initialFetchPolicy) || getDefaultFetchPolicy(defaultOptions, client.defaultOptions);\n        }\n        return watchQueryOptions;\n    };\n}\nfunction getObsQueryOptions(observable, client, queryHookOptions, watchQueryOptions) {\n    var toMerge = [];\n    var globalDefaults = client.defaultOptions.watchQuery;\n    if (globalDefaults) toMerge.push(globalDefaults);\n    if (queryHookOptions.defaultOptions) {\n        toMerge.push(queryHookOptions.defaultOptions);\n    }\n    // We use compact rather than mergeOptions for this part of the merge,\n    // because we want watchQueryOptions.variables (if defined) to replace\n    // this.observable.options.variables whole. This replacement allows\n    // removing variables by removing them from the variables input to\n    // useQuery. If the variables were always merged together (rather than\n    // replaced), there would be no way to remove existing variables.\n    // However, the variables from options.defaultOptions and globalDefaults\n    // (if provided) should be merged, to ensure individual defaulted\n    // variables always have values, if not otherwise defined in\n    // observable.options or watchQueryOptions.\n    toMerge.push((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.compact)(observable && observable.options, watchQueryOptions));\n    return toMerge.reduce(_utilities_index_js__WEBPACK_IMPORTED_MODULE_14__.mergeOptions);\n}\nfunction setResult(nextResult, resultData, observable, client, partialRefetch, forceUpdate, callbacks) {\n    var previousResult = resultData.current;\n    if (previousResult && previousResult.data) {\n        resultData.previousData = previousResult.data;\n    }\n    if (!nextResult.error && (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_15__.isNonEmptyArray)(nextResult.errors)) {\n        // Until a set naming convention for networkError and graphQLErrors is\n        // decided upon, we map errors (graphQLErrors) to the error options.\n        // TODO: Is it possible for both result.error and result.errors to be\n        // defined here?\n        nextResult.error = new _errors_index_js__WEBPACK_IMPORTED_MODULE_16__.ApolloError({\n            graphQLErrors: nextResult.errors\n        });\n    }\n    resultData.current = toQueryResult(unsafeHandlePartialRefetch(nextResult, observable, partialRefetch), resultData.previousData, observable, client);\n    // Calling state.setResult always triggers an update, though some call sites\n    // perform additional equality checks before committing to an update.\n    forceUpdate();\n    handleErrorOrCompleted(nextResult, previousResult === null || previousResult === void 0 ? void 0 : previousResult.networkStatus, callbacks);\n}\nfunction handleErrorOrCompleted(result, previousNetworkStatus, callbacks) {\n    if (!result.loading) {\n        var error_1 = toApolloError(result);\n        // wait a tick in case we are in the middle of rendering a component\n        Promise.resolve().then(function() {\n            if (error_1) {\n                callbacks.onError(error_1);\n            } else if (result.data && previousNetworkStatus !== result.networkStatus && result.networkStatus === _core_index_js__WEBPACK_IMPORTED_MODULE_12__.NetworkStatus.ready) {\n                callbacks.onCompleted(result.data);\n            }\n        }).catch(function(error) {\n            globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(error);\n        });\n    }\n}\nfunction getCurrentResult(resultData, observable, callbacks, partialRefetch, client) {\n    // Using this.result as a cache ensures getCurrentResult continues returning\n    // the same (===) result object, unless state.setResult has been called, or\n    // we're doing server rendering and therefore override the result below.\n    if (!resultData.current) {\n        // WARNING: SIDE-EFFECTS IN THE RENDER FUNCTION\n        // this could call unsafeHandlePartialRefetch\n        setResult(observable.getCurrentResult(), resultData, observable, client, partialRefetch, function() {}, callbacks);\n    }\n    return resultData.current;\n}\nfunction getDefaultFetchPolicy(queryHookDefaultOptions, clientDefaultOptions) {\n    var _a;\n    return (queryHookDefaultOptions === null || queryHookDefaultOptions === void 0 ? void 0 : queryHookDefaultOptions.fetchPolicy) || ((_a = clientDefaultOptions === null || clientDefaultOptions === void 0 ? void 0 : clientDefaultOptions.watchQuery) === null || _a === void 0 ? void 0 : _a.fetchPolicy) || \"cache-first\";\n}\nfunction toApolloError(result) {\n    return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_15__.isNonEmptyArray)(result.errors) ? new _errors_index_js__WEBPACK_IMPORTED_MODULE_16__.ApolloError({\n        graphQLErrors: result.errors\n    }) : result.error;\n}\nfunction toQueryResult(result, previousData, observable, client) {\n    var data = result.data, partial = result.partial, resultWithoutPartial = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__rest)(result, [\n        \"data\",\n        \"partial\"\n    ]);\n    var queryResult = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({\n        data: data\n    }, resultWithoutPartial), {\n        client: client,\n        observable: observable,\n        variables: observable.variables,\n        called: result !== ssrDisabledResult && result !== skipStandbyResult,\n        previousData: previousData\n    });\n    return queryResult;\n}\nfunction unsafeHandlePartialRefetch(result, observable, partialRefetch) {\n    // TODO: This code should be removed when the partialRefetch option is\n    // removed. I was unable to get this hook to behave reasonably in certain\n    // edge cases when this block was put in an effect.\n    if (result.partial && partialRefetch && !result.loading && (!result.data || Object.keys(result.data).length === 0) && observable.options.fetchPolicy !== \"cache-only\") {\n        observable.refetch();\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, result), {\n            loading: true,\n            networkStatus: _core_index_js__WEBPACK_IMPORTED_MODULE_12__.NetworkStatus.refetch\n        });\n    }\n    return result;\n}\nvar ssrDisabledResult = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_17__.maybeDeepFreeze)({\n    loading: true,\n    data: void 0,\n    error: void 0,\n    networkStatus: _core_index_js__WEBPACK_IMPORTED_MODULE_12__.NetworkStatus.loading\n});\nvar skipStandbyResult = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_17__.maybeDeepFreeze)({\n    loading: false,\n    data: void 0,\n    error: void 0,\n    networkStatus: _core_index_js__WEBPACK_IMPORTED_MODULE_12__.NetworkStatus.ready\n});\nfunction bindObservableMethods(observable) {\n    return {\n        refetch: observable.refetch.bind(observable),\n        reobserve: function() {\n            var args = [];\n            for(var _i = 0; _i < arguments.length; _i++){\n                args[_i] = arguments[_i];\n            }\n            if (globalThis.__DEV__ !== false) {\n                globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(84);\n            }\n            return observable.reobserve.apply(observable, args);\n        },\n        fetchMore: observable.fetchMore.bind(observable),\n        updateQuery: observable.updateQuery.bind(observable),\n        startPolling: observable.startPolling.bind(observable),\n        stopPolling: observable.stopPolling.bind(observable),\n        subscribeToMore: observable.subscribeToMore.bind(observable)\n    };\n} //# sourceMappingURL=useQuery.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/hooks/useQuery.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/hooks/useSubscription.js":
/*!********************************************************************!*\
  !*** ./node_modules/@apollo/client/react/hooks/useSubscription.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useSubscription: () => (/* binding */ useSubscription)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var rehackt__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rehackt */ \"(ssr)/./node_modules/rehackt/index.js\");\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @wry/equality */ \"(ssr)/./node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var _parser_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../parser/index.js */ \"(ssr)/./node_modules/@apollo/client/react/parser/index.js\");\n/* harmony import */ var _core_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../core/index.js */ \"(ssr)/./node_modules/@apollo/client/errors/index.js\");\n/* harmony import */ var _core_index_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../core/index.js */ \"(ssr)/./node_modules/zen-observable-ts/module.js\");\n/* harmony import */ var _useApolloClient_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./useApolloClient.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/useApolloClient.js\");\n/* harmony import */ var _internal_useDeepMemo_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./internal/useDeepMemo.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/internal/useDeepMemo.js\");\n/* harmony import */ var _useSyncExternalStore_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./useSyncExternalStore.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/useSyncExternalStore.js\");\n/* harmony import */ var _useQuery_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./useQuery.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/useQuery.js\");\n/* harmony import */ var _internal_useIsomorphicLayoutEffect_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./internal/useIsomorphicLayoutEffect.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/internal/useIsomorphicLayoutEffect.js\");\n\n\n\n\n\n\n\n\n\n\n\n/**\n * > Refer to the [Subscriptions](https://www.apollographql.com/docs/react/data/subscriptions/) section for a more in-depth overview of `useSubscription`.\n *\n * @example\n * ```jsx\n * const COMMENTS_SUBSCRIPTION = gql`\n *   subscription OnCommentAdded($repoFullName: String!) {\n *     commentAdded(repoFullName: $repoFullName) {\n *       id\n *       content\n *     }\n *   }\n * `;\n *\n * function DontReadTheComments({ repoFullName }) {\n *   const {\n *     data: { commentAdded },\n *     loading,\n *   } = useSubscription(COMMENTS_SUBSCRIPTION, { variables: { repoFullName } });\n *   return <h4>New comment: {!loading && commentAdded.content}</h4>;\n * }\n * ```\n * @remarks\n * #### Consider using `onData` instead of `useEffect`\n *\n * If you want to react to incoming data, please use the `onData` option instead of `useEffect`.\n * State updates you make inside a `useEffect` hook might cause additional rerenders, and `useEffect` is mostly meant for side effects of rendering, not as an event handler.\n * State updates made in an event handler like `onData` might - depending on the React version - be batched and cause only a single rerender.\n *\n * Consider the following component:\n *\n * ```jsx\n * export function Subscriptions() {\n *   const { data, error, loading } = useSubscription(query);\n *   const [accumulatedData, setAccumulatedData] = useState([]);\n *\n *   useEffect(() => {\n *     setAccumulatedData((prev) => [...prev, data]);\n *   }, [data]);\n *\n *   return (\n *     <>\n *       {loading && <p>Loading...</p>}\n *       {JSON.stringify(accumulatedData, undefined, 2)}\n *     </>\n *   );\n * }\n * ```\n *\n * Instead of using `useEffect` here, we can re-write this component to use the `onData` callback function accepted in `useSubscription`'s `options` object:\n *\n * ```jsx\n * export function Subscriptions() {\n *   const [accumulatedData, setAccumulatedData] = useState([]);\n *   const { data, error, loading } = useSubscription(\n *     query,\n *     {\n *       onData({ data }) {\n *         setAccumulatedData((prev) => [...prev, data])\n *       }\n *     }\n *   );\n *\n *   return (\n *     <>\n *       {loading && <p>Loading...</p>}\n *       {JSON.stringify(accumulatedData, undefined, 2)}\n *     </>\n *   );\n * }\n * ```\n *\n * > ⚠️ **Note:** The `useSubscription` option `onData` is available in Apollo Client >= 3.7. In previous versions, the equivalent option is named `onSubscriptionData`.\n *\n * Now, the first message will be added to the `accumulatedData` array since `onData` is called _before_ the component re-renders. React 18 automatic batching is still in effect and results in a single re-render, but with `onData` we can guarantee each message received after the component mounts is added to `accumulatedData`.\n *\n * @since 3.0.0\n * @param subscription - A GraphQL subscription document parsed into an AST by `gql`.\n * @param options - Options to control how the subscription is executed.\n * @returns Query result object\n */ function useSubscription(subscription, options) {\n    if (options === void 0) {\n        options = Object.create(null);\n    }\n    var hasIssuedDeprecationWarningRef = rehackt__WEBPACK_IMPORTED_MODULE_1__.useRef(false);\n    var client = (0,_useApolloClient_js__WEBPACK_IMPORTED_MODULE_3__.useApolloClient)(options.client);\n    (0,_parser_index_js__WEBPACK_IMPORTED_MODULE_4__.verifyDocumentType)(subscription, _parser_index_js__WEBPACK_IMPORTED_MODULE_4__.DocumentType.Subscription);\n    if (!hasIssuedDeprecationWarningRef.current) {\n        // eslint-disable-next-line react-compiler/react-compiler\n        hasIssuedDeprecationWarningRef.current = true;\n        if (options.onSubscriptionData) {\n            globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(options.onData ? 85 : 86);\n        }\n        if (options.onSubscriptionComplete) {\n            globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(options.onComplete ? 87 : 88);\n        }\n    }\n    var skip = options.skip, fetchPolicy = options.fetchPolicy, errorPolicy = options.errorPolicy, shouldResubscribe = options.shouldResubscribe, context = options.context, extensions = options.extensions, ignoreResults = options.ignoreResults;\n    var variables = (0,_internal_useDeepMemo_js__WEBPACK_IMPORTED_MODULE_5__.useDeepMemo)(function() {\n        return options.variables;\n    }, [\n        options.variables\n    ]);\n    var recreate = function() {\n        return createSubscription(client, subscription, variables, fetchPolicy, errorPolicy, context, extensions);\n    };\n    var _a = rehackt__WEBPACK_IMPORTED_MODULE_1__.useState(options.skip ? null : recreate), observable = _a[0], setObservable = _a[1];\n    var recreateRef = rehackt__WEBPACK_IMPORTED_MODULE_1__.useRef(recreate);\n    (0,_internal_useIsomorphicLayoutEffect_js__WEBPACK_IMPORTED_MODULE_6__.useIsomorphicLayoutEffect)(function() {\n        recreateRef.current = recreate;\n    });\n    if (skip) {\n        if (observable) {\n            setObservable(observable = null);\n        }\n    } else if (!observable || (client !== observable.__.client || subscription !== observable.__.query || fetchPolicy !== observable.__.fetchPolicy || errorPolicy !== observable.__.errorPolicy || !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_2__.equal)(variables, observable.__.variables)) && (typeof shouldResubscribe === \"function\" ? !!shouldResubscribe(options) : shouldResubscribe) !== false) {\n        setObservable(observable = recreate());\n    }\n    var optionsRef = rehackt__WEBPACK_IMPORTED_MODULE_1__.useRef(options);\n    rehackt__WEBPACK_IMPORTED_MODULE_1__.useEffect(function() {\n        optionsRef.current = options;\n    });\n    var fallbackLoading = !skip && !ignoreResults;\n    var fallbackResult = rehackt__WEBPACK_IMPORTED_MODULE_1__.useMemo(function() {\n        return {\n            loading: fallbackLoading,\n            error: void 0,\n            data: void 0,\n            variables: variables\n        };\n    }, [\n        fallbackLoading,\n        variables\n    ]);\n    var ignoreResultsRef = rehackt__WEBPACK_IMPORTED_MODULE_1__.useRef(ignoreResults);\n    (0,_internal_useIsomorphicLayoutEffect_js__WEBPACK_IMPORTED_MODULE_6__.useIsomorphicLayoutEffect)(function() {\n        // We cannot reference `ignoreResults` directly in the effect below\n        // it would add a dependency to the `useEffect` deps array, which means the\n        // subscription would be recreated if `ignoreResults` changes\n        // As a result, on resubscription, the last result would be re-delivered,\n        // rendering the component one additional time, and re-triggering `onData`.\n        // The same applies to `fetchPolicy`, which results in a new `observable`\n        // being created. We cannot really avoid it in that case, but we can at least\n        // avoid it for `ignoreResults`.\n        ignoreResultsRef.current = ignoreResults;\n    });\n    var ret = (0,_useSyncExternalStore_js__WEBPACK_IMPORTED_MODULE_7__.useSyncExternalStore)(rehackt__WEBPACK_IMPORTED_MODULE_1__.useCallback(function(update) {\n        if (!observable) {\n            return function() {};\n        }\n        var subscriptionStopped = false;\n        var variables = observable.__.variables;\n        var client = observable.__.client;\n        var subscription = observable.subscribe({\n            next: function(fetchResult) {\n                var _a, _b;\n                if (subscriptionStopped) {\n                    return;\n                }\n                var result = {\n                    loading: false,\n                    // TODO: fetchResult.data can be null but SubscriptionResult.data\n                    // expects TData | undefined only\n                    data: fetchResult.data,\n                    error: (0,_useQuery_js__WEBPACK_IMPORTED_MODULE_8__.toApolloError)(fetchResult),\n                    variables: variables\n                };\n                observable.__.setResult(result);\n                if (!ignoreResultsRef.current) update();\n                if (result.error) {\n                    (_b = (_a = optionsRef.current).onError) === null || _b === void 0 ? void 0 : _b.call(_a, result.error);\n                } else if (optionsRef.current.onData) {\n                    optionsRef.current.onData({\n                        client: client,\n                        data: result\n                    });\n                } else if (optionsRef.current.onSubscriptionData) {\n                    optionsRef.current.onSubscriptionData({\n                        client: client,\n                        subscriptionData: result\n                    });\n                }\n            },\n            error: function(error) {\n                var _a, _b;\n                error = error instanceof _core_index_js__WEBPACK_IMPORTED_MODULE_9__.ApolloError ? error : new _core_index_js__WEBPACK_IMPORTED_MODULE_9__.ApolloError({\n                    protocolErrors: [\n                        error\n                    ]\n                });\n                if (!subscriptionStopped) {\n                    observable.__.setResult({\n                        loading: false,\n                        data: void 0,\n                        error: error,\n                        variables: variables\n                    });\n                    if (!ignoreResultsRef.current) update();\n                    (_b = (_a = optionsRef.current).onError) === null || _b === void 0 ? void 0 : _b.call(_a, error);\n                }\n            },\n            complete: function() {\n                if (!subscriptionStopped) {\n                    if (optionsRef.current.onComplete) {\n                        optionsRef.current.onComplete();\n                    } else if (optionsRef.current.onSubscriptionComplete) {\n                        optionsRef.current.onSubscriptionComplete();\n                    }\n                }\n            }\n        });\n        return function() {\n            // immediately stop receiving subscription values, but do not unsubscribe\n            // until after a short delay in case another useSubscription hook is\n            // reusing the same underlying observable and is about to subscribe\n            subscriptionStopped = true;\n            setTimeout(function() {\n                subscription.unsubscribe();\n            });\n        };\n    }, [\n        observable\n    ]), function() {\n        return observable && !skip && !ignoreResults ? observable.__.result : fallbackResult;\n    }, function() {\n        return fallbackResult;\n    });\n    var restart = rehackt__WEBPACK_IMPORTED_MODULE_1__.useCallback(function() {\n        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(!optionsRef.current.skip, 89);\n        setObservable(recreateRef.current());\n    }, [\n        optionsRef,\n        recreateRef\n    ]);\n    return rehackt__WEBPACK_IMPORTED_MODULE_1__.useMemo(function() {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_10__.__assign)({}, ret), {\n            restart: restart\n        });\n    }, [\n        ret,\n        restart\n    ]);\n}\nfunction createSubscription(client, query, variables, fetchPolicy, errorPolicy, context, extensions) {\n    var options = {\n        query: query,\n        variables: variables,\n        fetchPolicy: fetchPolicy,\n        errorPolicy: errorPolicy,\n        context: context,\n        extensions: extensions\n    };\n    var __ = (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_10__.__assign)({}, options), {\n        client: client,\n        result: {\n            loading: true,\n            data: void 0,\n            error: void 0,\n            variables: variables\n        },\n        setResult: function(result) {\n            __.result = result;\n        }\n    });\n    var observable = null;\n    return Object.assign(new _core_index_js__WEBPACK_IMPORTED_MODULE_11__.Observable(function(observer) {\n        // lazily start the subscription when the first observer subscribes\n        // to get around strict mode\n        if (!observable) {\n            observable = client.subscribe(options);\n        }\n        var sub = observable.subscribe(observer);\n        return function() {\n            return sub.unsubscribe();\n        };\n    }), {\n        /**\n         * A tracking object to store details about the observable and the latest result of the subscription.\n         */ __: __\n    });\n} //# sourceMappingURL=useSubscription.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/hooks/useSubscription.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/hooks/useSyncExternalStore.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@apollo/client/react/hooks/useSyncExternalStore.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("var rehackt__WEBPACK_IMPORTED_MODULE_1___namespace_cache;\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useSyncExternalStore: () => (/* binding */ useSyncExternalStore)\n/* harmony export */ });\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var rehackt__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rehackt */ \"(ssr)/./node_modules/rehackt/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n\n\n\nvar didWarnUncachedGetSnapshot = false;\n// Prevent webpack from complaining about our feature detection of the\n// useSyncExternalStore property of the React namespace, which is expected not\n// to exist when using React 17 and earlier, and that's fine.\nvar uSESKey = \"useSyncExternalStore\";\nvar realHook = /*#__PURE__*/ (rehackt__WEBPACK_IMPORTED_MODULE_1___namespace_cache || (rehackt__WEBPACK_IMPORTED_MODULE_1___namespace_cache = __webpack_require__.t(rehackt__WEBPACK_IMPORTED_MODULE_1__, 2)))[uSESKey];\n// Adapted from https://www.npmjs.com/package/use-sync-external-store, with\n// Apollo Client deviations called out by \"// DEVIATION ...\" comments.\n// When/if React.useSyncExternalStore is defined, delegate fully to it.\nvar useSyncExternalStore = realHook || function(subscribe, getSnapshot, getServerSnapshot) {\n    // Read the current snapshot from the store on every render. Again, this\n    // breaks the rules of React, and only works here because of specific\n    // implementation details, most importantly that updates are\n    // always synchronous.\n    var value = getSnapshot();\n    if (// DEVIATION: Using __DEV__\n    globalThis.__DEV__ !== false && !didWarnUncachedGetSnapshot && // DEVIATION: Not using Object.is because we know our snapshots will never\n    // be exotic primitive values like NaN, which is !== itself.\n    value !== getSnapshot()) {\n        didWarnUncachedGetSnapshot = true;\n        // DEVIATION: Using invariant.error instead of console.error directly.\n        globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.error(92);\n    }\n    // Because updates are synchronous, we don't queue them. Instead we force a\n    // re-render whenever the subscribed state changes by updating an some\n    // arbitrary useState hook. Then, during render, we call getSnapshot to read\n    // the current value.\n    //\n    // Because we don't actually use the state returned by the useState hook, we\n    // can save a bit of memory by storing other stuff in that slot.\n    //\n    // To implement the early bailout, we need to track some things on a mutable\n    // object. Usually, we would put that in a useRef hook, but we can stash it in\n    // our useState hook instead.\n    //\n    // To force a re-render, we call forceUpdate({inst}). That works because the\n    // new object always fails an equality check.\n    var _a = rehackt__WEBPACK_IMPORTED_MODULE_1__.useState({\n        inst: {\n            value: value,\n            getSnapshot: getSnapshot\n        }\n    }), inst = _a[0].inst, forceUpdate = _a[1];\n    // Track the latest getSnapshot function with a ref. This needs to be updated\n    // in the layout phase so we can access it during the tearing check that\n    // happens on subscribe.\n    if (_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.canUseLayoutEffect) {\n        // DEVIATION: We avoid calling useLayoutEffect when !canUseLayoutEffect,\n        // which may seem like a conditional hook, but this code ends up behaving\n        // unconditionally (one way or the other) because canUseLayoutEffect is\n        // constant.\n        rehackt__WEBPACK_IMPORTED_MODULE_1__.useLayoutEffect(function() {\n            Object.assign(inst, {\n                value: value,\n                getSnapshot: getSnapshot\n            });\n            // Whenever getSnapshot or subscribe changes, we need to check in the\n            // commit phase if there was an interleaved mutation. In concurrent mode\n            // this can happen all the time, but even in synchronous mode, an earlier\n            // effect may have mutated the store.\n            if (checkIfSnapshotChanged(inst)) {\n                // Force a re-render.\n                forceUpdate({\n                    inst: inst\n                });\n            }\n        // React Hook React.useLayoutEffect has a missing dependency: 'inst'. Either include it or remove the dependency array.\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        }, [\n            subscribe,\n            value,\n            getSnapshot\n        ]);\n    } else {\n        Object.assign(inst, {\n            value: value,\n            getSnapshot: getSnapshot\n        });\n    }\n    rehackt__WEBPACK_IMPORTED_MODULE_1__.useEffect(function() {\n        // Check for changes right before subscribing. Subsequent changes will be\n        // detected in the subscription handler.\n        if (checkIfSnapshotChanged(inst)) {\n            // Force a re-render.\n            forceUpdate({\n                inst: inst\n            });\n        }\n        // Subscribe to the store and return a clean-up function.\n        return subscribe(function handleStoreChange() {\n            // TODO: Because there is no cross-renderer API for batching updates, it's\n            // up to the consumer of this library to wrap their subscription event\n            // with unstable_batchedUpdates. Should we try to detect when this isn't\n            // the case and print a warning in development?\n            // The store changed. Check if the snapshot changed since the last time we\n            // read from the store.\n            if (checkIfSnapshotChanged(inst)) {\n                // Force a re-render.\n                forceUpdate({\n                    inst: inst\n                });\n            }\n        });\n    // React Hook React.useEffect has a missing dependency: 'inst'. Either include it or remove the dependency array.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        subscribe\n    ]);\n    return value;\n};\nfunction checkIfSnapshotChanged(_a) {\n    var value = _a.value, getSnapshot = _a.getSnapshot;\n    try {\n        return value !== getSnapshot();\n    } catch (_b) {\n        return true;\n    }\n} //# sourceMappingURL=useSyncExternalStore.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/hooks/useSyncExternalStore.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/parser/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@apollo/client/react/parser/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DocumentType: () => (/* binding */ DocumentType),\n/* harmony export */   operationName: () => (/* binding */ operationName),\n/* harmony export */   parser: () => (/* binding */ parser),\n/* harmony export */   verifyDocumentType: () => (/* binding */ verifyDocumentType)\n/* harmony export */ });\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/caches.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/sizes.js\");\n/* harmony import */ var _utilities_caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utilities/caching/getMemoryInternals.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/getMemoryInternals.js\");\n/* harmony import */ var _utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utilities/deprecation/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/deprecation/index.js\");\n\n\n\n\nvar DocumentType;\n(function(DocumentType) {\n    DocumentType[DocumentType[\"Query\"] = 0] = \"Query\";\n    DocumentType[DocumentType[\"Mutation\"] = 1] = \"Mutation\";\n    DocumentType[DocumentType[\"Subscription\"] = 2] = \"Subscription\";\n})(DocumentType || (DocumentType = {}));\nvar cache;\nfunction operationName(type) {\n    var name;\n    switch(type){\n        case DocumentType.Query:\n            name = \"Query\";\n            break;\n        case DocumentType.Mutation:\n            name = \"Mutation\";\n            break;\n        case DocumentType.Subscription:\n            name = \"Subscription\";\n            break;\n    }\n    return name;\n}\n/**\n * @deprecated `parser` will be removed in Apollo Client 4.0.\n *\n * **Recommended now**\n *\n * Remove all usages of `parser` as it is an internal implementation detail.\n */ function parser(document) {\n    (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_1__.warnDeprecated)(\"parser\", function() {\n        globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(94);\n    });\n    if (!cache) {\n        cache = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.AutoCleanedWeakCache(_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.cacheSizes.parser || 1000 /* defaultCacheSizes.parser */ );\n    }\n    var cached = cache.get(document);\n    if (cached) return cached;\n    var variables, type, name;\n    (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(!!document && !!document.kind, 95, document);\n    var fragments = [];\n    var queries = [];\n    var mutations = [];\n    var subscriptions = [];\n    for(var _i = 0, _a = document.definitions; _i < _a.length; _i++){\n        var x = _a[_i];\n        if (x.kind === \"FragmentDefinition\") {\n            fragments.push(x);\n            continue;\n        }\n        if (x.kind === \"OperationDefinition\") {\n            switch(x.operation){\n                case \"query\":\n                    queries.push(x);\n                    break;\n                case \"mutation\":\n                    mutations.push(x);\n                    break;\n                case \"subscription\":\n                    subscriptions.push(x);\n                    break;\n            }\n        }\n    }\n    (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(!fragments.length || queries.length || mutations.length || subscriptions.length, 96);\n    (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(queries.length + mutations.length + subscriptions.length <= 1, 97, document, queries.length, subscriptions.length, mutations.length);\n    type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n    if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n    var definitions = queries.length ? queries : mutations.length ? mutations : subscriptions;\n    (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(definitions.length === 1, 98, document, definitions.length);\n    var definition = definitions[0];\n    variables = definition.variableDefinitions || [];\n    if (definition.name && definition.name.kind === \"Name\") {\n        name = definition.name.value;\n    } else {\n        name = \"data\"; // fallback to using data if no name\n    }\n    var payload = {\n        name: name,\n        type: type,\n        variables: variables\n    };\n    cache.set(document, payload);\n    return payload;\n}\nparser.resetCache = function() {\n    cache = undefined;\n};\nif (globalThis.__DEV__ !== false) {\n    (0,_utilities_caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_4__.registerGlobalCache)(\"parser\", function() {\n        return cache ? cache.size : 0;\n    });\n}\nfunction verifyDocumentType(document, type) {\n    var operation = (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_1__.muteDeprecations)(\"parser\", parser, [\n        document\n    ]);\n    var requiredOperationName = operationName(type);\n    var usedOperationName = operationName(operation.type);\n    (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(operation.type === type, 99, requiredOperationName, requiredOperationName, usedOperationName);\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/parser/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/caching/caches.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/caching/caches.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AutoCleanedStrongCache: () => (/* binding */ AutoCleanedStrongCache),\n/* harmony export */   AutoCleanedWeakCache: () => (/* binding */ AutoCleanedWeakCache)\n/* harmony export */ });\n/* harmony import */ var _wry_caches__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wry/caches */ \"(ssr)/./node_modules/@wry/caches/lib/weak.js\");\n/* harmony import */ var _wry_caches__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @wry/caches */ \"(ssr)/./node_modules/@wry/caches/lib/strong.js\");\n\nvar scheduledCleanup = new WeakSet();\nfunction schedule(cache) {\n    if (cache.size <= (cache.max || -1)) {\n        return;\n    }\n    if (!scheduledCleanup.has(cache)) {\n        scheduledCleanup.add(cache);\n        setTimeout(function() {\n            cache.clean();\n            scheduledCleanup.delete(cache);\n        }, 100);\n    }\n}\n/**\n * @internal\n * A version of WeakCache that will auto-schedule a cleanup of the cache when\n * a new item is added and the cache reached maximum size.\n * Throttled to once per 100ms.\n *\n * @privateRemarks\n * Should be used throughout the rest of the codebase instead of WeakCache,\n * with the notable exception of usage in `wrap` from `optimism` - that one\n * already handles cleanup and should remain a `WeakCache`.\n */ var AutoCleanedWeakCache = function(max, dispose) {\n    /*\n    Some builds of `WeakCache` are function prototypes, some are classes.\n    This library still builds with an ES5 target, so we can't extend the\n    real classes.\n    Instead, we have to use this workaround until we switch to a newer build\n    target.\n    */ var cache = new _wry_caches__WEBPACK_IMPORTED_MODULE_0__.WeakCache(max, dispose);\n    cache.set = function(key, value) {\n        var ret = _wry_caches__WEBPACK_IMPORTED_MODULE_0__.WeakCache.prototype.set.call(this, key, value);\n        schedule(this);\n        return ret;\n    };\n    return cache;\n};\n/**\n * @internal\n * A version of StrongCache that will auto-schedule a cleanup of the cache when\n * a new item is added and the cache reached maximum size.\n * Throttled to once per 100ms.\n *\n * @privateRemarks\n * Should be used throughout the rest of the codebase instead of StrongCache,\n * with the notable exception of usage in `wrap` from `optimism` - that one\n * already handles cleanup and should remain a `StrongCache`.\n */ var AutoCleanedStrongCache = function(max, dispose) {\n    /*\n    Some builds of `StrongCache` are function prototypes, some are classes.\n    This library still builds with an ES5 target, so we can't extend the\n    real classes.\n    Instead, we have to use this workaround until we switch to a newer build\n    target.\n    */ var cache = new _wry_caches__WEBPACK_IMPORTED_MODULE_1__.StrongCache(max, dispose);\n    cache.set = function(key, value) {\n        var ret = _wry_caches__WEBPACK_IMPORTED_MODULE_1__.StrongCache.prototype.set.call(this, key, value);\n        schedule(this);\n        return ret;\n    };\n    return cache;\n}; //# sourceMappingURL=caches.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NhY2hpbmcvY2FjaGVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBcUQ7QUFDckQsSUFBSUUsbUJBQW1CLElBQUlDO0FBQzNCLFNBQVNDLFNBQVNDLEtBQUs7SUFDbkIsSUFBSUEsTUFBTUMsSUFBSSxJQUFLRCxDQUFBQSxNQUFNRSxHQUFHLElBQUksQ0FBQyxJQUFJO1FBQ2pDO0lBQ0o7SUFDQSxJQUFJLENBQUNMLGlCQUFpQk0sR0FBRyxDQUFDSCxRQUFRO1FBQzlCSCxpQkFBaUJPLEdBQUcsQ0FBQ0o7UUFDckJLLFdBQVc7WUFDUEwsTUFBTU0sS0FBSztZQUNYVCxpQkFBaUJVLE1BQU0sQ0FBQ1A7UUFDNUIsR0FBRztJQUNQO0FBQ0o7QUFDQTs7Ozs7Ozs7OztDQVVDLEdBQ00sSUFBSVEsdUJBQXVCLFNBQVVOLEdBQUcsRUFBRU8sT0FBTztJQUNwRDs7Ozs7O0lBTUEsR0FDQSxJQUFJVCxRQUFRLElBQUlMLGtEQUFTQSxDQUFDTyxLQUFLTztJQUMvQlQsTUFBTVUsR0FBRyxHQUFHLFNBQVVDLEdBQUcsRUFBRUMsS0FBSztRQUM1QixJQUFJQyxNQUFNbEIsa0RBQVNBLENBQUNtQixTQUFTLENBQUNKLEdBQUcsQ0FBQ0ssSUFBSSxDQUFDLElBQUksRUFBRUosS0FBS0M7UUFDbERiLFNBQVMsSUFBSTtRQUNiLE9BQU9jO0lBQ1g7SUFDQSxPQUFPYjtBQUNYLEVBQUU7QUFDRjs7Ozs7Ozs7OztDQVVDLEdBQ00sSUFBSWdCLHlCQUF5QixTQUFVZCxHQUFHLEVBQUVPLE9BQU87SUFDdEQ7Ozs7OztJQU1BLEdBQ0EsSUFBSVQsUUFBUSxJQUFJSixvREFBV0EsQ0FBQ00sS0FBS087SUFDakNULE1BQU1VLEdBQUcsR0FBRyxTQUFVQyxHQUFHLEVBQUVDLEtBQUs7UUFDNUIsSUFBSUMsTUFBTWpCLG9EQUFXQSxDQUFDa0IsU0FBUyxDQUFDSixHQUFHLENBQUNLLElBQUksQ0FBQyxJQUFJLEVBQUVKLEtBQUtDO1FBQ3BEYixTQUFTLElBQUk7UUFDYixPQUFPYztJQUNYO0lBQ0EsT0FBT2I7QUFDWCxFQUFFLENBQ0Ysa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2xhY2stZ3JhcGhxbC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvY2FjaGluZy9jYWNoZXMuanM/MjEzYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBXZWFrQ2FjaGUsIFN0cm9uZ0NhY2hlIH0gZnJvbSBcIkB3cnkvY2FjaGVzXCI7XG52YXIgc2NoZWR1bGVkQ2xlYW51cCA9IG5ldyBXZWFrU2V0KCk7XG5mdW5jdGlvbiBzY2hlZHVsZShjYWNoZSkge1xuICAgIGlmIChjYWNoZS5zaXplIDw9IChjYWNoZS5tYXggfHwgLTEpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCFzY2hlZHVsZWRDbGVhbnVwLmhhcyhjYWNoZSkpIHtcbiAgICAgICAgc2NoZWR1bGVkQ2xlYW51cC5hZGQoY2FjaGUpO1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNhY2hlLmNsZWFuKCk7XG4gICAgICAgICAgICBzY2hlZHVsZWRDbGVhbnVwLmRlbGV0ZShjYWNoZSk7XG4gICAgICAgIH0sIDEwMCk7XG4gICAgfVxufVxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqIEEgdmVyc2lvbiBvZiBXZWFrQ2FjaGUgdGhhdCB3aWxsIGF1dG8tc2NoZWR1bGUgYSBjbGVhbnVwIG9mIHRoZSBjYWNoZSB3aGVuXG4gKiBhIG5ldyBpdGVtIGlzIGFkZGVkIGFuZCB0aGUgY2FjaGUgcmVhY2hlZCBtYXhpbXVtIHNpemUuXG4gKiBUaHJvdHRsZWQgdG8gb25jZSBwZXIgMTAwbXMuXG4gKlxuICogQHByaXZhdGVSZW1hcmtzXG4gKiBTaG91bGQgYmUgdXNlZCB0aHJvdWdob3V0IHRoZSByZXN0IG9mIHRoZSBjb2RlYmFzZSBpbnN0ZWFkIG9mIFdlYWtDYWNoZSxcbiAqIHdpdGggdGhlIG5vdGFibGUgZXhjZXB0aW9uIG9mIHVzYWdlIGluIGB3cmFwYCBmcm9tIGBvcHRpbWlzbWAgLSB0aGF0IG9uZVxuICogYWxyZWFkeSBoYW5kbGVzIGNsZWFudXAgYW5kIHNob3VsZCByZW1haW4gYSBgV2Vha0NhY2hlYC5cbiAqL1xuZXhwb3J0IHZhciBBdXRvQ2xlYW5lZFdlYWtDYWNoZSA9IGZ1bmN0aW9uIChtYXgsIGRpc3Bvc2UpIHtcbiAgICAvKlxuICAgIFNvbWUgYnVpbGRzIG9mIGBXZWFrQ2FjaGVgIGFyZSBmdW5jdGlvbiBwcm90b3R5cGVzLCBzb21lIGFyZSBjbGFzc2VzLlxuICAgIFRoaXMgbGlicmFyeSBzdGlsbCBidWlsZHMgd2l0aCBhbiBFUzUgdGFyZ2V0LCBzbyB3ZSBjYW4ndCBleHRlbmQgdGhlXG4gICAgcmVhbCBjbGFzc2VzLlxuICAgIEluc3RlYWQsIHdlIGhhdmUgdG8gdXNlIHRoaXMgd29ya2Fyb3VuZCB1bnRpbCB3ZSBzd2l0Y2ggdG8gYSBuZXdlciBidWlsZFxuICAgIHRhcmdldC5cbiAgICAqL1xuICAgIHZhciBjYWNoZSA9IG5ldyBXZWFrQ2FjaGUobWF4LCBkaXNwb3NlKTtcbiAgICBjYWNoZS5zZXQgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICB2YXIgcmV0ID0gV2Vha0NhY2hlLnByb3RvdHlwZS5zZXQuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgICAgc2NoZWR1bGUodGhpcyk7XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfTtcbiAgICByZXR1cm4gY2FjaGU7XG59O1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqIEEgdmVyc2lvbiBvZiBTdHJvbmdDYWNoZSB0aGF0IHdpbGwgYXV0by1zY2hlZHVsZSBhIGNsZWFudXAgb2YgdGhlIGNhY2hlIHdoZW5cbiAqIGEgbmV3IGl0ZW0gaXMgYWRkZWQgYW5kIHRoZSBjYWNoZSByZWFjaGVkIG1heGltdW0gc2l6ZS5cbiAqIFRocm90dGxlZCB0byBvbmNlIHBlciAxMDBtcy5cbiAqXG4gKiBAcHJpdmF0ZVJlbWFya3NcbiAqIFNob3VsZCBiZSB1c2VkIHRocm91Z2hvdXQgdGhlIHJlc3Qgb2YgdGhlIGNvZGViYXNlIGluc3RlYWQgb2YgU3Ryb25nQ2FjaGUsXG4gKiB3aXRoIHRoZSBub3RhYmxlIGV4Y2VwdGlvbiBvZiB1c2FnZSBpbiBgd3JhcGAgZnJvbSBgb3B0aW1pc21gIC0gdGhhdCBvbmVcbiAqIGFscmVhZHkgaGFuZGxlcyBjbGVhbnVwIGFuZCBzaG91bGQgcmVtYWluIGEgYFN0cm9uZ0NhY2hlYC5cbiAqL1xuZXhwb3J0IHZhciBBdXRvQ2xlYW5lZFN0cm9uZ0NhY2hlID0gZnVuY3Rpb24gKG1heCwgZGlzcG9zZSkge1xuICAgIC8qXG4gICAgU29tZSBidWlsZHMgb2YgYFN0cm9uZ0NhY2hlYCBhcmUgZnVuY3Rpb24gcHJvdG90eXBlcywgc29tZSBhcmUgY2xhc3Nlcy5cbiAgICBUaGlzIGxpYnJhcnkgc3RpbGwgYnVpbGRzIHdpdGggYW4gRVM1IHRhcmdldCwgc28gd2UgY2FuJ3QgZXh0ZW5kIHRoZVxuICAgIHJlYWwgY2xhc3Nlcy5cbiAgICBJbnN0ZWFkLCB3ZSBoYXZlIHRvIHVzZSB0aGlzIHdvcmthcm91bmQgdW50aWwgd2Ugc3dpdGNoIHRvIGEgbmV3ZXIgYnVpbGRcbiAgICB0YXJnZXQuXG4gICAgKi9cbiAgICB2YXIgY2FjaGUgPSBuZXcgU3Ryb25nQ2FjaGUobWF4LCBkaXNwb3NlKTtcbiAgICBjYWNoZS5zZXQgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICB2YXIgcmV0ID0gU3Ryb25nQ2FjaGUucHJvdG90eXBlLnNldC5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgICBzY2hlZHVsZSh0aGlzKTtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9O1xuICAgIHJldHVybiBjYWNoZTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jYWNoZXMuanMubWFwIl0sIm5hbWVzIjpbIldlYWtDYWNoZSIsIlN0cm9uZ0NhY2hlIiwic2NoZWR1bGVkQ2xlYW51cCIsIldlYWtTZXQiLCJzY2hlZHVsZSIsImNhY2hlIiwic2l6ZSIsIm1heCIsImhhcyIsImFkZCIsInNldFRpbWVvdXQiLCJjbGVhbiIsImRlbGV0ZSIsIkF1dG9DbGVhbmVkV2Vha0NhY2hlIiwiZGlzcG9zZSIsInNldCIsImtleSIsInZhbHVlIiwicmV0IiwicHJvdG90eXBlIiwiY2FsbCIsIkF1dG9DbGVhbmVkU3Ryb25nQ2FjaGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/caching/caches.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/caching/getMemoryInternals.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/caching/getMemoryInternals.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getApolloCacheMemoryInternals: () => (/* binding */ getApolloCacheMemoryInternals),\n/* harmony export */   getApolloClientMemoryInternals: () => (/* binding */ getApolloClientMemoryInternals),\n/* harmony export */   getInMemoryCacheMemoryInternals: () => (/* binding */ getInMemoryCacheMemoryInternals),\n/* harmony export */   registerGlobalCache: () => (/* binding */ registerGlobalCache)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _sizes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sizes.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/sizes.js\");\n\n\nvar globalCaches = {};\nfunction registerGlobalCache(name, getSize) {\n    globalCaches[name] = getSize;\n}\n/**\n * For internal purposes only - please call `ApolloClient.getMemoryInternals` instead\n * @internal\n */ var getApolloClientMemoryInternals = globalThis.__DEV__ !== false ? _getApolloClientMemoryInternals : undefined;\n/**\n * For internal purposes only - please call `ApolloClient.getMemoryInternals` instead\n * @internal\n */ var getInMemoryCacheMemoryInternals = globalThis.__DEV__ !== false ? _getInMemoryCacheMemoryInternals : undefined;\n/**\n * For internal purposes only - please call `ApolloClient.getMemoryInternals` instead\n * @internal\n */ var getApolloCacheMemoryInternals = globalThis.__DEV__ !== false ? _getApolloCacheMemoryInternals : undefined;\nfunction getCurrentCacheSizes() {\n    // `defaultCacheSizes` is a `const enum` that will be inlined during build, so we have to reconstruct it's shape here\n    var defaults = {\n        parser: 1000 /* defaultCacheSizes[\"parser\"] */ ,\n        canonicalStringify: 1000 /* defaultCacheSizes[\"canonicalStringify\"] */ ,\n        print: 2000 /* defaultCacheSizes[\"print\"] */ ,\n        \"documentTransform.cache\": 2000 /* defaultCacheSizes[\"documentTransform.cache\"] */ ,\n        \"queryManager.getDocumentInfo\": 2000 /* defaultCacheSizes[\"queryManager.getDocumentInfo\"] */ ,\n        \"PersistedQueryLink.persistedQueryHashes\": 2000 /* defaultCacheSizes[\"PersistedQueryLink.persistedQueryHashes\"] */ ,\n        \"fragmentRegistry.transform\": 2000 /* defaultCacheSizes[\"fragmentRegistry.transform\"] */ ,\n        \"fragmentRegistry.lookup\": 1000 /* defaultCacheSizes[\"fragmentRegistry.lookup\"] */ ,\n        \"fragmentRegistry.findFragmentSpreads\": 4000 /* defaultCacheSizes[\"fragmentRegistry.findFragmentSpreads\"] */ ,\n        \"cache.fragmentQueryDocuments\": 1000 /* defaultCacheSizes[\"cache.fragmentQueryDocuments\"] */ ,\n        \"removeTypenameFromVariables.getVariableDefinitions\": 2000 /* defaultCacheSizes[\"removeTypenameFromVariables.getVariableDefinitions\"] */ ,\n        \"inMemoryCache.maybeBroadcastWatch\": 5000 /* defaultCacheSizes[\"inMemoryCache.maybeBroadcastWatch\"] */ ,\n        \"inMemoryCache.executeSelectionSet\": 50000 /* defaultCacheSizes[\"inMemoryCache.executeSelectionSet\"] */ ,\n        \"inMemoryCache.executeSubSelectedArray\": 10000 /* defaultCacheSizes[\"inMemoryCache.executeSubSelectedArray\"] */ \n    };\n    return Object.fromEntries(Object.entries(defaults).map(function(_a) {\n        var k = _a[0], v = _a[1];\n        return [\n            k,\n            _sizes_js__WEBPACK_IMPORTED_MODULE_0__.cacheSizes[k] || v\n        ];\n    }));\n}\nfunction _getApolloClientMemoryInternals() {\n    var _a, _b, _c, _d, _e;\n    if (!(globalThis.__DEV__ !== false)) throw new Error(\"only supported in development mode\");\n    return {\n        limits: getCurrentCacheSizes(),\n        sizes: (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({\n            print: (_a = globalCaches.print) === null || _a === void 0 ? void 0 : _a.call(globalCaches),\n            parser: (_b = globalCaches.parser) === null || _b === void 0 ? void 0 : _b.call(globalCaches),\n            canonicalStringify: (_c = globalCaches.canonicalStringify) === null || _c === void 0 ? void 0 : _c.call(globalCaches),\n            links: linkInfo(this.link),\n            queryManager: {\n                getDocumentInfo: this[\"queryManager\"][\"transformCache\"].size,\n                documentTransforms: transformInfo(this[\"queryManager\"].documentTransform)\n            }\n        }, (_e = (_d = this.cache).getMemoryInternals) === null || _e === void 0 ? void 0 : _e.call(_d))\n    };\n}\nfunction _getApolloCacheMemoryInternals() {\n    return {\n        cache: {\n            fragmentQueryDocuments: getWrapperInformation(this[\"getFragmentDoc\"])\n        }\n    };\n}\nfunction _getInMemoryCacheMemoryInternals() {\n    var fragments = this.config.fragments;\n    return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, _getApolloCacheMemoryInternals.apply(this)), {\n        addTypenameDocumentTransform: transformInfo(this[\"addTypenameTransform\"]),\n        inMemoryCache: {\n            executeSelectionSet: getWrapperInformation(this[\"storeReader\"][\"executeSelectionSet\"]),\n            executeSubSelectedArray: getWrapperInformation(this[\"storeReader\"][\"executeSubSelectedArray\"]),\n            maybeBroadcastWatch: getWrapperInformation(this[\"maybeBroadcastWatch\"])\n        },\n        fragmentRegistry: {\n            findFragmentSpreads: getWrapperInformation(fragments === null || fragments === void 0 ? void 0 : fragments.findFragmentSpreads),\n            lookup: getWrapperInformation(fragments === null || fragments === void 0 ? void 0 : fragments.lookup),\n            transform: getWrapperInformation(fragments === null || fragments === void 0 ? void 0 : fragments.transform)\n        }\n    });\n}\nfunction isWrapper(f) {\n    return !!f && \"dirtyKey\" in f;\n}\nfunction getWrapperInformation(f) {\n    return isWrapper(f) ? f.size : undefined;\n}\nfunction isDefined(value) {\n    return value != null;\n}\nfunction transformInfo(transform) {\n    return recurseTransformInfo(transform).map(function(cache) {\n        return {\n            cache: cache\n        };\n    });\n}\nfunction recurseTransformInfo(transform) {\n    return transform ? (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([\n        getWrapperInformation(transform === null || transform === void 0 ? void 0 : transform[\"performWork\"])\n    ], recurseTransformInfo(transform === null || transform === void 0 ? void 0 : transform[\"left\"]), true), recurseTransformInfo(transform === null || transform === void 0 ? void 0 : transform[\"right\"]), true).filter(isDefined) : [];\n}\nfunction linkInfo(link) {\n    var _a;\n    return link ? (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([\n        (_a = link === null || link === void 0 ? void 0 : link.getMemoryInternals) === null || _a === void 0 ? void 0 : _a.call(link)\n    ], linkInfo(link === null || link === void 0 ? void 0 : link.left), true), linkInfo(link === null || link === void 0 ? void 0 : link.right), true).filter(isDefined) : [];\n} //# sourceMappingURL=getMemoryInternals.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NhY2hpbmcvZ2V0TWVtb3J5SW50ZXJuYWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFnRDtBQUNSO0FBQ3hDLElBQUlHLGVBQWUsQ0FBQztBQUNiLFNBQVNDLG9CQUFvQkMsSUFBSSxFQUFFQyxPQUFPO0lBQzdDSCxZQUFZLENBQUNFLEtBQUssR0FBR0M7QUFDekI7QUFDQTs7O0NBR0MsR0FDTSxJQUFJQyxpQ0FBaUNDLFdBQVdDLE9BQU8sS0FBSyxRQUMvREMsa0NBQ0VDLFVBQVU7QUFDaEI7OztDQUdDLEdBQ00sSUFBSUMsa0NBQWtDSixXQUFXQyxPQUFPLEtBQUssUUFDaEVJLG1DQUNFRixVQUFVO0FBQ2hCOzs7Q0FHQyxHQUNNLElBQUlHLGdDQUFnQ04sV0FBV0MsT0FBTyxLQUFLLFFBQzlETSxpQ0FDRUosVUFBVTtBQUNoQixTQUFTSztJQUNMLHFIQUFxSDtJQUNySCxJQUFJQyxXQUFXO1FBQ1hDLFFBQVEsS0FBSywrQkFBK0I7UUFDNUNDLG9CQUFvQixLQUFLLDJDQUEyQztRQUNwRUMsT0FBTyxLQUFLLDhCQUE4QjtRQUMxQywyQkFBMkIsS0FBSyxnREFBZ0Q7UUFDaEYsZ0NBQWdDLEtBQUsscURBQXFEO1FBQzFGLDJDQUEyQyxLQUFLLGdFQUFnRTtRQUNoSCw4QkFBOEIsS0FBSyxtREFBbUQ7UUFDdEYsMkJBQTJCLEtBQUssZ0RBQWdEO1FBQ2hGLHdDQUF3QyxLQUFLLDZEQUE2RDtRQUMxRyxnQ0FBZ0MsS0FBSyxxREFBcUQ7UUFDMUYsc0RBQXNELEtBQUssMkVBQTJFO1FBQ3RJLHFDQUFxQyxLQUFLLDBEQUEwRDtRQUNwRyxxQ0FBcUMsTUFBTSwwREFBMEQ7UUFDckcseUNBQXlDLE1BQU0sOERBQThEO0lBQ2pIO0lBQ0EsT0FBT0MsT0FBT0MsV0FBVyxDQUFDRCxPQUFPRSxPQUFPLENBQUNOLFVBQVVPLEdBQUcsQ0FBQyxTQUFVQyxFQUFFO1FBQy9ELElBQUlDLElBQUlELEVBQUUsQ0FBQyxFQUFFLEVBQUVFLElBQUlGLEVBQUUsQ0FBQyxFQUFFO1FBQ3hCLE9BQU87WUFDSEM7WUFDQXhCLGlEQUFVLENBQUN3QixFQUFFLElBQUlDO1NBQ3BCO0lBQ0w7QUFDSjtBQUNBLFNBQVNqQjtJQUNMLElBQUllLElBQUlHLElBQUlDLElBQUlDLElBQUlDO0lBQ3BCLElBQUksQ0FBRXZCLENBQUFBLFdBQVdDLE9BQU8sS0FBSyxLQUFJLEdBQzdCLE1BQU0sSUFBSXVCLE1BQU07SUFDcEIsT0FBTztRQUNIQyxRQUFRakI7UUFDUmtCLE9BQU9sQywrQ0FBUUEsQ0FBQztZQUFFb0IsT0FBTyxDQUFDSyxLQUFLdEIsYUFBYWlCLEtBQUssTUFBTSxRQUFRSyxPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdVLElBQUksQ0FBQ2hDO1lBQWVlLFFBQVEsQ0FBQ1UsS0FBS3pCLGFBQWFlLE1BQU0sTUFBTSxRQUFRVSxPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdPLElBQUksQ0FBQ2hDO1lBQWVnQixvQkFBb0IsQ0FBQ1UsS0FBSzFCLGFBQWFnQixrQkFBa0IsTUFBTSxRQUFRVSxPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdNLElBQUksQ0FBQ2hDO1lBQWVpQyxPQUFPQyxTQUFTLElBQUksQ0FBQ0MsSUFBSTtZQUFHQyxjQUFjO2dCQUN2V0MsaUJBQWlCLElBQUksQ0FBQyxlQUFlLENBQUMsaUJBQWlCLENBQUNDLElBQUk7Z0JBQzVEQyxvQkFBb0JDLGNBQWMsSUFBSSxDQUFDLGVBQWUsQ0FBQ0MsaUJBQWlCO1lBQzVFO1FBQUUsR0FBRyxDQUFDYixLQUFLLENBQUNELEtBQUssSUFBSSxDQUFDZSxLQUFLLEVBQUVDLGtCQUFrQixNQUFNLFFBQVFmLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBR0ksSUFBSSxDQUFDTDtJQUN0RztBQUNKO0FBQ0EsU0FBU2Y7SUFDTCxPQUFPO1FBQ0g4QixPQUFPO1lBQ0hFLHdCQUF3QkMsc0JBQXNCLElBQUksQ0FBQyxpQkFBaUI7UUFDeEU7SUFDSjtBQUNKO0FBQ0EsU0FBU25DO0lBQ0wsSUFBSW9DLFlBQVksSUFBSSxDQUFDQyxNQUFNLENBQUNELFNBQVM7SUFDckMsT0FBT2pELCtDQUFRQSxDQUFDQSwrQ0FBUUEsQ0FBQyxDQUFDLEdBQUdlLCtCQUErQm9DLEtBQUssQ0FBQyxJQUFJLElBQUk7UUFBRUMsOEJBQThCVCxjQUFjLElBQUksQ0FBQyx1QkFBdUI7UUFBR1UsZUFBZTtZQUM5SkMscUJBQXFCTixzQkFBc0IsSUFBSSxDQUFDLGNBQWMsQ0FBQyxzQkFBc0I7WUFDckZPLHlCQUF5QlAsc0JBQXNCLElBQUksQ0FBQyxjQUFjLENBQUMsMEJBQTBCO1lBQzdGUSxxQkFBcUJSLHNCQUFzQixJQUFJLENBQUMsc0JBQXNCO1FBQzFFO1FBQUdTLGtCQUFrQjtZQUNqQkMscUJBQXFCVixzQkFBc0JDLGNBQWMsUUFBUUEsY0FBYyxLQUFLLElBQUksS0FBSyxJQUFJQSxVQUFVUyxtQkFBbUI7WUFDOUhDLFFBQVFYLHNCQUFzQkMsY0FBYyxRQUFRQSxjQUFjLEtBQUssSUFBSSxLQUFLLElBQUlBLFVBQVVVLE1BQU07WUFDcEdDLFdBQVdaLHNCQUFzQkMsY0FBYyxRQUFRQSxjQUFjLEtBQUssSUFBSSxLQUFLLElBQUlBLFVBQVVXLFNBQVM7UUFDOUc7SUFBRTtBQUNWO0FBQ0EsU0FBU0MsVUFBVUMsQ0FBQztJQUNoQixPQUFPLENBQUMsQ0FBQ0EsS0FBSyxjQUFjQTtBQUNoQztBQUNBLFNBQVNkLHNCQUFzQmMsQ0FBQztJQUM1QixPQUFPRCxVQUFVQyxLQUFLQSxFQUFFckIsSUFBSSxHQUFHOUI7QUFDbkM7QUFDQSxTQUFTb0QsVUFBVUMsS0FBSztJQUNwQixPQUFPQSxTQUFTO0FBQ3BCO0FBQ0EsU0FBU3JCLGNBQWNpQixTQUFTO0lBQzVCLE9BQU9LLHFCQUFxQkwsV0FBV3BDLEdBQUcsQ0FBQyxTQUFVcUIsS0FBSztRQUFJLE9BQVE7WUFBRUEsT0FBT0E7UUFBTTtJQUFJO0FBQzdGO0FBQ0EsU0FBU29CLHFCQUFxQkwsU0FBUztJQUNuQyxPQUFPQSxZQUNIM0Qsb0RBQWFBLENBQUNBLG9EQUFhQSxDQUFDO1FBQ3hCK0Msc0JBQXNCWSxjQUFjLFFBQVFBLGNBQWMsS0FBSyxJQUFJLEtBQUssSUFBSUEsU0FBUyxDQUFDLGNBQWM7S0FDdkcsRUFBRUsscUJBQXFCTCxjQUFjLFFBQVFBLGNBQWMsS0FBSyxJQUFJLEtBQUssSUFBSUEsU0FBUyxDQUFDLE9BQU8sR0FBRyxPQUFPSyxxQkFBcUJMLGNBQWMsUUFBUUEsY0FBYyxLQUFLLElBQUksS0FBSyxJQUFJQSxTQUFTLENBQUMsUUFBUSxHQUFHLE1BQU1NLE1BQU0sQ0FBQ0gsYUFDcE4sRUFBRTtBQUNaO0FBQ0EsU0FBUzFCLFNBQVNDLElBQUk7SUFDbEIsSUFBSWI7SUFDSixPQUFPYSxPQUNIckMsb0RBQWFBLENBQUNBLG9EQUFhQSxDQUFDO1FBQ3ZCd0IsQ0FBQUEsS0FBS2EsU0FBUyxRQUFRQSxTQUFTLEtBQUssSUFBSSxLQUFLLElBQUlBLEtBQUtRLGtCQUFrQixNQUFNLFFBQVFyQixPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdVLElBQUksQ0FBQ0c7S0FDM0gsRUFBRUQsU0FBU0MsU0FBUyxRQUFRQSxTQUFTLEtBQUssSUFBSSxLQUFLLElBQUlBLEtBQUs2QixJQUFJLEdBQUcsT0FBTzlCLFNBQVNDLFNBQVMsUUFBUUEsU0FBUyxLQUFLLElBQUksS0FBSyxJQUFJQSxLQUFLOEIsS0FBSyxHQUFHLE1BQU1GLE1BQU0sQ0FBQ0gsYUFDeEosRUFBRTtBQUNaLEVBQ0EsOENBQThDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2xhY2stZ3JhcGhxbC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvY2FjaGluZy9nZXRNZW1vcnlJbnRlcm5hbHMuanM/MzAyNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfX2Fzc2lnbiwgX19zcHJlYWRBcnJheSB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgY2FjaGVTaXplcyB9IGZyb20gXCIuL3NpemVzLmpzXCI7XG52YXIgZ2xvYmFsQ2FjaGVzID0ge307XG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJHbG9iYWxDYWNoZShuYW1lLCBnZXRTaXplKSB7XG4gICAgZ2xvYmFsQ2FjaGVzW25hbWVdID0gZ2V0U2l6ZTtcbn1cbi8qKlxuICogRm9yIGludGVybmFsIHB1cnBvc2VzIG9ubHkgLSBwbGVhc2UgY2FsbCBgQXBvbGxvQ2xpZW50LmdldE1lbW9yeUludGVybmFsc2AgaW5zdGVhZFxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCB2YXIgZ2V0QXBvbGxvQ2xpZW50TWVtb3J5SW50ZXJuYWxzID0gZ2xvYmFsVGhpcy5fX0RFVl9fICE9PSBmYWxzZSA/XG4gICAgX2dldEFwb2xsb0NsaWVudE1lbW9yeUludGVybmFsc1xuICAgIDogdW5kZWZpbmVkO1xuLyoqXG4gKiBGb3IgaW50ZXJuYWwgcHVycG9zZXMgb25seSAtIHBsZWFzZSBjYWxsIGBBcG9sbG9DbGllbnQuZ2V0TWVtb3J5SW50ZXJuYWxzYCBpbnN0ZWFkXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IHZhciBnZXRJbk1lbW9yeUNhY2hlTWVtb3J5SW50ZXJuYWxzID0gZ2xvYmFsVGhpcy5fX0RFVl9fICE9PSBmYWxzZSA/XG4gICAgX2dldEluTWVtb3J5Q2FjaGVNZW1vcnlJbnRlcm5hbHNcbiAgICA6IHVuZGVmaW5lZDtcbi8qKlxuICogRm9yIGludGVybmFsIHB1cnBvc2VzIG9ubHkgLSBwbGVhc2UgY2FsbCBgQXBvbGxvQ2xpZW50LmdldE1lbW9yeUludGVybmFsc2AgaW5zdGVhZFxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCB2YXIgZ2V0QXBvbGxvQ2FjaGVNZW1vcnlJbnRlcm5hbHMgPSBnbG9iYWxUaGlzLl9fREVWX18gIT09IGZhbHNlID9cbiAgICBfZ2V0QXBvbGxvQ2FjaGVNZW1vcnlJbnRlcm5hbHNcbiAgICA6IHVuZGVmaW5lZDtcbmZ1bmN0aW9uIGdldEN1cnJlbnRDYWNoZVNpemVzKCkge1xuICAgIC8vIGBkZWZhdWx0Q2FjaGVTaXplc2AgaXMgYSBgY29uc3QgZW51bWAgdGhhdCB3aWxsIGJlIGlubGluZWQgZHVyaW5nIGJ1aWxkLCBzbyB3ZSBoYXZlIHRvIHJlY29uc3RydWN0IGl0J3Mgc2hhcGUgaGVyZVxuICAgIHZhciBkZWZhdWx0cyA9IHtcbiAgICAgICAgcGFyc2VyOiAxMDAwIC8qIGRlZmF1bHRDYWNoZVNpemVzW1wicGFyc2VyXCJdICovLFxuICAgICAgICBjYW5vbmljYWxTdHJpbmdpZnk6IDEwMDAgLyogZGVmYXVsdENhY2hlU2l6ZXNbXCJjYW5vbmljYWxTdHJpbmdpZnlcIl0gKi8sXG4gICAgICAgIHByaW50OiAyMDAwIC8qIGRlZmF1bHRDYWNoZVNpemVzW1wicHJpbnRcIl0gKi8sXG4gICAgICAgIFwiZG9jdW1lbnRUcmFuc2Zvcm0uY2FjaGVcIjogMjAwMCAvKiBkZWZhdWx0Q2FjaGVTaXplc1tcImRvY3VtZW50VHJhbnNmb3JtLmNhY2hlXCJdICovLFxuICAgICAgICBcInF1ZXJ5TWFuYWdlci5nZXREb2N1bWVudEluZm9cIjogMjAwMCAvKiBkZWZhdWx0Q2FjaGVTaXplc1tcInF1ZXJ5TWFuYWdlci5nZXREb2N1bWVudEluZm9cIl0gKi8sXG4gICAgICAgIFwiUGVyc2lzdGVkUXVlcnlMaW5rLnBlcnNpc3RlZFF1ZXJ5SGFzaGVzXCI6IDIwMDAgLyogZGVmYXVsdENhY2hlU2l6ZXNbXCJQZXJzaXN0ZWRRdWVyeUxpbmsucGVyc2lzdGVkUXVlcnlIYXNoZXNcIl0gKi8sXG4gICAgICAgIFwiZnJhZ21lbnRSZWdpc3RyeS50cmFuc2Zvcm1cIjogMjAwMCAvKiBkZWZhdWx0Q2FjaGVTaXplc1tcImZyYWdtZW50UmVnaXN0cnkudHJhbnNmb3JtXCJdICovLFxuICAgICAgICBcImZyYWdtZW50UmVnaXN0cnkubG9va3VwXCI6IDEwMDAgLyogZGVmYXVsdENhY2hlU2l6ZXNbXCJmcmFnbWVudFJlZ2lzdHJ5Lmxvb2t1cFwiXSAqLyxcbiAgICAgICAgXCJmcmFnbWVudFJlZ2lzdHJ5LmZpbmRGcmFnbWVudFNwcmVhZHNcIjogNDAwMCAvKiBkZWZhdWx0Q2FjaGVTaXplc1tcImZyYWdtZW50UmVnaXN0cnkuZmluZEZyYWdtZW50U3ByZWFkc1wiXSAqLyxcbiAgICAgICAgXCJjYWNoZS5mcmFnbWVudFF1ZXJ5RG9jdW1lbnRzXCI6IDEwMDAgLyogZGVmYXVsdENhY2hlU2l6ZXNbXCJjYWNoZS5mcmFnbWVudFF1ZXJ5RG9jdW1lbnRzXCJdICovLFxuICAgICAgICBcInJlbW92ZVR5cGVuYW1lRnJvbVZhcmlhYmxlcy5nZXRWYXJpYWJsZURlZmluaXRpb25zXCI6IDIwMDAgLyogZGVmYXVsdENhY2hlU2l6ZXNbXCJyZW1vdmVUeXBlbmFtZUZyb21WYXJpYWJsZXMuZ2V0VmFyaWFibGVEZWZpbml0aW9uc1wiXSAqLyxcbiAgICAgICAgXCJpbk1lbW9yeUNhY2hlLm1heWJlQnJvYWRjYXN0V2F0Y2hcIjogNTAwMCAvKiBkZWZhdWx0Q2FjaGVTaXplc1tcImluTWVtb3J5Q2FjaGUubWF5YmVCcm9hZGNhc3RXYXRjaFwiXSAqLyxcbiAgICAgICAgXCJpbk1lbW9yeUNhY2hlLmV4ZWN1dGVTZWxlY3Rpb25TZXRcIjogNTAwMDAgLyogZGVmYXVsdENhY2hlU2l6ZXNbXCJpbk1lbW9yeUNhY2hlLmV4ZWN1dGVTZWxlY3Rpb25TZXRcIl0gKi8sXG4gICAgICAgIFwiaW5NZW1vcnlDYWNoZS5leGVjdXRlU3ViU2VsZWN0ZWRBcnJheVwiOiAxMDAwMCAvKiBkZWZhdWx0Q2FjaGVTaXplc1tcImluTWVtb3J5Q2FjaGUuZXhlY3V0ZVN1YlNlbGVjdGVkQXJyYXlcIl0gKi8sXG4gICAgfTtcbiAgICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKE9iamVjdC5lbnRyaWVzKGRlZmF1bHRzKS5tYXAoZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHZhciBrID0gX2FbMF0sIHYgPSBfYVsxXTtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIGssXG4gICAgICAgICAgICBjYWNoZVNpemVzW2tdIHx8IHYsXG4gICAgICAgIF07XG4gICAgfSkpO1xufVxuZnVuY3Rpb24gX2dldEFwb2xsb0NsaWVudE1lbW9yeUludGVybmFscygpIHtcbiAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lO1xuICAgIGlmICghKGdsb2JhbFRoaXMuX19ERVZfXyAhPT0gZmFsc2UpKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJvbmx5IHN1cHBvcnRlZCBpbiBkZXZlbG9wbWVudCBtb2RlXCIpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGxpbWl0czogZ2V0Q3VycmVudENhY2hlU2l6ZXMoKSxcbiAgICAgICAgc2l6ZXM6IF9fYXNzaWduKHsgcHJpbnQ6IChfYSA9IGdsb2JhbENhY2hlcy5wcmludCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwoZ2xvYmFsQ2FjaGVzKSwgcGFyc2VyOiAoX2IgPSBnbG9iYWxDYWNoZXMucGFyc2VyKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChnbG9iYWxDYWNoZXMpLCBjYW5vbmljYWxTdHJpbmdpZnk6IChfYyA9IGdsb2JhbENhY2hlcy5jYW5vbmljYWxTdHJpbmdpZnkpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5jYWxsKGdsb2JhbENhY2hlcyksIGxpbmtzOiBsaW5rSW5mbyh0aGlzLmxpbmspLCBxdWVyeU1hbmFnZXI6IHtcbiAgICAgICAgICAgICAgICBnZXREb2N1bWVudEluZm86IHRoaXNbXCJxdWVyeU1hbmFnZXJcIl1bXCJ0cmFuc2Zvcm1DYWNoZVwiXS5zaXplLFxuICAgICAgICAgICAgICAgIGRvY3VtZW50VHJhbnNmb3JtczogdHJhbnNmb3JtSW5mbyh0aGlzW1wicXVlcnlNYW5hZ2VyXCJdLmRvY3VtZW50VHJhbnNmb3JtKSxcbiAgICAgICAgICAgIH0gfSwgKF9lID0gKF9kID0gdGhpcy5jYWNoZSkuZ2V0TWVtb3J5SW50ZXJuYWxzKSA9PT0gbnVsbCB8fCBfZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2UuY2FsbChfZCkpLFxuICAgIH07XG59XG5mdW5jdGlvbiBfZ2V0QXBvbGxvQ2FjaGVNZW1vcnlJbnRlcm5hbHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY2FjaGU6IHtcbiAgICAgICAgICAgIGZyYWdtZW50UXVlcnlEb2N1bWVudHM6IGdldFdyYXBwZXJJbmZvcm1hdGlvbih0aGlzW1wiZ2V0RnJhZ21lbnREb2NcIl0pLFxuICAgICAgICB9LFxuICAgIH07XG59XG5mdW5jdGlvbiBfZ2V0SW5NZW1vcnlDYWNoZU1lbW9yeUludGVybmFscygpIHtcbiAgICB2YXIgZnJhZ21lbnRzID0gdGhpcy5jb25maWcuZnJhZ21lbnRzO1xuICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgX2dldEFwb2xsb0NhY2hlTWVtb3J5SW50ZXJuYWxzLmFwcGx5KHRoaXMpKSwgeyBhZGRUeXBlbmFtZURvY3VtZW50VHJhbnNmb3JtOiB0cmFuc2Zvcm1JbmZvKHRoaXNbXCJhZGRUeXBlbmFtZVRyYW5zZm9ybVwiXSksIGluTWVtb3J5Q2FjaGU6IHtcbiAgICAgICAgICAgIGV4ZWN1dGVTZWxlY3Rpb25TZXQ6IGdldFdyYXBwZXJJbmZvcm1hdGlvbih0aGlzW1wic3RvcmVSZWFkZXJcIl1bXCJleGVjdXRlU2VsZWN0aW9uU2V0XCJdKSxcbiAgICAgICAgICAgIGV4ZWN1dGVTdWJTZWxlY3RlZEFycmF5OiBnZXRXcmFwcGVySW5mb3JtYXRpb24odGhpc1tcInN0b3JlUmVhZGVyXCJdW1wiZXhlY3V0ZVN1YlNlbGVjdGVkQXJyYXlcIl0pLFxuICAgICAgICAgICAgbWF5YmVCcm9hZGNhc3RXYXRjaDogZ2V0V3JhcHBlckluZm9ybWF0aW9uKHRoaXNbXCJtYXliZUJyb2FkY2FzdFdhdGNoXCJdKSxcbiAgICAgICAgfSwgZnJhZ21lbnRSZWdpc3RyeToge1xuICAgICAgICAgICAgZmluZEZyYWdtZW50U3ByZWFkczogZ2V0V3JhcHBlckluZm9ybWF0aW9uKGZyYWdtZW50cyA9PT0gbnVsbCB8fCBmcmFnbWVudHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGZyYWdtZW50cy5maW5kRnJhZ21lbnRTcHJlYWRzKSxcbiAgICAgICAgICAgIGxvb2t1cDogZ2V0V3JhcHBlckluZm9ybWF0aW9uKGZyYWdtZW50cyA9PT0gbnVsbCB8fCBmcmFnbWVudHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGZyYWdtZW50cy5sb29rdXApLFxuICAgICAgICAgICAgdHJhbnNmb3JtOiBnZXRXcmFwcGVySW5mb3JtYXRpb24oZnJhZ21lbnRzID09PSBudWxsIHx8IGZyYWdtZW50cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogZnJhZ21lbnRzLnRyYW5zZm9ybSksXG4gICAgICAgIH0gfSk7XG59XG5mdW5jdGlvbiBpc1dyYXBwZXIoZikge1xuICAgIHJldHVybiAhIWYgJiYgXCJkaXJ0eUtleVwiIGluIGY7XG59XG5mdW5jdGlvbiBnZXRXcmFwcGVySW5mb3JtYXRpb24oZikge1xuICAgIHJldHVybiBpc1dyYXBwZXIoZikgPyBmLnNpemUgOiB1bmRlZmluZWQ7XG59XG5mdW5jdGlvbiBpc0RlZmluZWQodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgIT0gbnVsbDtcbn1cbmZ1bmN0aW9uIHRyYW5zZm9ybUluZm8odHJhbnNmb3JtKSB7XG4gICAgcmV0dXJuIHJlY3Vyc2VUcmFuc2Zvcm1JbmZvKHRyYW5zZm9ybSkubWFwKGZ1bmN0aW9uIChjYWNoZSkgeyByZXR1cm4gKHsgY2FjaGU6IGNhY2hlIH0pOyB9KTtcbn1cbmZ1bmN0aW9uIHJlY3Vyc2VUcmFuc2Zvcm1JbmZvKHRyYW5zZm9ybSkge1xuICAgIHJldHVybiB0cmFuc2Zvcm0gP1xuICAgICAgICBfX3NwcmVhZEFycmF5KF9fc3ByZWFkQXJyYXkoW1xuICAgICAgICAgICAgZ2V0V3JhcHBlckluZm9ybWF0aW9uKHRyYW5zZm9ybSA9PT0gbnVsbCB8fCB0cmFuc2Zvcm0gPT09IHZvaWQgMCA/IHZvaWQgMCA6IHRyYW5zZm9ybVtcInBlcmZvcm1Xb3JrXCJdKVxuICAgICAgICBdLCByZWN1cnNlVHJhbnNmb3JtSW5mbyh0cmFuc2Zvcm0gPT09IG51bGwgfHwgdHJhbnNmb3JtID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0cmFuc2Zvcm1bXCJsZWZ0XCJdKSwgdHJ1ZSksIHJlY3Vyc2VUcmFuc2Zvcm1JbmZvKHRyYW5zZm9ybSA9PT0gbnVsbCB8fCB0cmFuc2Zvcm0gPT09IHZvaWQgMCA/IHZvaWQgMCA6IHRyYW5zZm9ybVtcInJpZ2h0XCJdKSwgdHJ1ZSkuZmlsdGVyKGlzRGVmaW5lZClcbiAgICAgICAgOiBbXTtcbn1cbmZ1bmN0aW9uIGxpbmtJbmZvKGxpbmspIHtcbiAgICB2YXIgX2E7XG4gICAgcmV0dXJuIGxpbmsgP1xuICAgICAgICBfX3NwcmVhZEFycmF5KF9fc3ByZWFkQXJyYXkoW1xuICAgICAgICAgICAgKF9hID0gbGluayA9PT0gbnVsbCB8fCBsaW5rID09PSB2b2lkIDAgPyB2b2lkIDAgOiBsaW5rLmdldE1lbW9yeUludGVybmFscykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwobGluaylcbiAgICAgICAgXSwgbGlua0luZm8obGluayA9PT0gbnVsbCB8fCBsaW5rID09PSB2b2lkIDAgPyB2b2lkIDAgOiBsaW5rLmxlZnQpLCB0cnVlKSwgbGlua0luZm8obGluayA9PT0gbnVsbCB8fCBsaW5rID09PSB2b2lkIDAgPyB2b2lkIDAgOiBsaW5rLnJpZ2h0KSwgdHJ1ZSkuZmlsdGVyKGlzRGVmaW5lZClcbiAgICAgICAgOiBbXTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldE1lbW9yeUludGVybmFscy5qcy5tYXAiXSwibmFtZXMiOlsiX19hc3NpZ24iLCJfX3NwcmVhZEFycmF5IiwiY2FjaGVTaXplcyIsImdsb2JhbENhY2hlcyIsInJlZ2lzdGVyR2xvYmFsQ2FjaGUiLCJuYW1lIiwiZ2V0U2l6ZSIsImdldEFwb2xsb0NsaWVudE1lbW9yeUludGVybmFscyIsImdsb2JhbFRoaXMiLCJfX0RFVl9fIiwiX2dldEFwb2xsb0NsaWVudE1lbW9yeUludGVybmFscyIsInVuZGVmaW5lZCIsImdldEluTWVtb3J5Q2FjaGVNZW1vcnlJbnRlcm5hbHMiLCJfZ2V0SW5NZW1vcnlDYWNoZU1lbW9yeUludGVybmFscyIsImdldEFwb2xsb0NhY2hlTWVtb3J5SW50ZXJuYWxzIiwiX2dldEFwb2xsb0NhY2hlTWVtb3J5SW50ZXJuYWxzIiwiZ2V0Q3VycmVudENhY2hlU2l6ZXMiLCJkZWZhdWx0cyIsInBhcnNlciIsImNhbm9uaWNhbFN0cmluZ2lmeSIsInByaW50IiwiT2JqZWN0IiwiZnJvbUVudHJpZXMiLCJlbnRyaWVzIiwibWFwIiwiX2EiLCJrIiwidiIsIl9iIiwiX2MiLCJfZCIsIl9lIiwiRXJyb3IiLCJsaW1pdHMiLCJzaXplcyIsImNhbGwiLCJsaW5rcyIsImxpbmtJbmZvIiwibGluayIsInF1ZXJ5TWFuYWdlciIsImdldERvY3VtZW50SW5mbyIsInNpemUiLCJkb2N1bWVudFRyYW5zZm9ybXMiLCJ0cmFuc2Zvcm1JbmZvIiwiZG9jdW1lbnRUcmFuc2Zvcm0iLCJjYWNoZSIsImdldE1lbW9yeUludGVybmFscyIsImZyYWdtZW50UXVlcnlEb2N1bWVudHMiLCJnZXRXcmFwcGVySW5mb3JtYXRpb24iLCJmcmFnbWVudHMiLCJjb25maWciLCJhcHBseSIsImFkZFR5cGVuYW1lRG9jdW1lbnRUcmFuc2Zvcm0iLCJpbk1lbW9yeUNhY2hlIiwiZXhlY3V0ZVNlbGVjdGlvblNldCIsImV4ZWN1dGVTdWJTZWxlY3RlZEFycmF5IiwibWF5YmVCcm9hZGNhc3RXYXRjaCIsImZyYWdtZW50UmVnaXN0cnkiLCJmaW5kRnJhZ21lbnRTcHJlYWRzIiwibG9va3VwIiwidHJhbnNmb3JtIiwiaXNXcmFwcGVyIiwiZiIsImlzRGVmaW5lZCIsInZhbHVlIiwicmVjdXJzZVRyYW5zZm9ybUluZm8iLCJmaWx0ZXIiLCJsZWZ0IiwicmlnaHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/caching/getMemoryInternals.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/caching/sizes.js":
/*!****************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/caching/sizes.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cacheSizes: () => (/* binding */ cacheSizes)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n\n\nvar cacheSizeSymbol = Symbol.for(\"apollo.cacheSize\");\n/**\n *\n * The global cache size configuration for Apollo Client.\n *\n * @remarks\n *\n * You can directly modify this object, but any modification will\n * only have an effect on caches that are created after the modification.\n *\n * So for global caches, such as `parser`, `canonicalStringify` and `print`,\n * you might need to call `.reset` on them, which will essentially re-create them.\n *\n * Alternatively, you can set `globalThis[Symbol.for(\"apollo.cacheSize\")]` before\n * you load the Apollo Client package:\n *\n * @example\n * ```ts\n * globalThis[Symbol.for(\"apollo.cacheSize\")] = {\n *   parser: 100\n * } satisfies Partial<CacheSizes> // the `satisfies` is optional if using TypeScript\n * ```\n */ var cacheSizes = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, _globals_index_js__WEBPACK_IMPORTED_MODULE_0__.global[cacheSizeSymbol]); //# sourceMappingURL=sizes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NhY2hpbmcvc2l6ZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWlDO0FBQ1k7QUFDN0MsSUFBSUUsa0JBQWtCQyxPQUFPQyxHQUFHLENBQUM7QUFDakM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQXFCQyxHQUNNLElBQUlDLGFBQWFMLCtDQUFRQSxDQUFDLENBQUMsR0FBR0MscURBQU0sQ0FBQ0MsZ0JBQWdCLEVBQUUsQ0FDOUQsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2xhY2stZ3JhcGhxbC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvY2FjaGluZy9zaXplcy5qcz8zMzVhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fYXNzaWduIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBnbG9iYWwgfSBmcm9tIFwiLi4vZ2xvYmFscy9pbmRleC5qc1wiO1xudmFyIGNhY2hlU2l6ZVN5bWJvbCA9IFN5bWJvbC5mb3IoXCJhcG9sbG8uY2FjaGVTaXplXCIpO1xuLyoqXG4gKlxuICogVGhlIGdsb2JhbCBjYWNoZSBzaXplIGNvbmZpZ3VyYXRpb24gZm9yIEFwb2xsbyBDbGllbnQuXG4gKlxuICogQHJlbWFya3NcbiAqXG4gKiBZb3UgY2FuIGRpcmVjdGx5IG1vZGlmeSB0aGlzIG9iamVjdCwgYnV0IGFueSBtb2RpZmljYXRpb24gd2lsbFxuICogb25seSBoYXZlIGFuIGVmZmVjdCBvbiBjYWNoZXMgdGhhdCBhcmUgY3JlYXRlZCBhZnRlciB0aGUgbW9kaWZpY2F0aW9uLlxuICpcbiAqIFNvIGZvciBnbG9iYWwgY2FjaGVzLCBzdWNoIGFzIGBwYXJzZXJgLCBgY2Fub25pY2FsU3RyaW5naWZ5YCBhbmQgYHByaW50YCxcbiAqIHlvdSBtaWdodCBuZWVkIHRvIGNhbGwgYC5yZXNldGAgb24gdGhlbSwgd2hpY2ggd2lsbCBlc3NlbnRpYWxseSByZS1jcmVhdGUgdGhlbS5cbiAqXG4gKiBBbHRlcm5hdGl2ZWx5LCB5b3UgY2FuIHNldCBgZ2xvYmFsVGhpc1tTeW1ib2wuZm9yKFwiYXBvbGxvLmNhY2hlU2l6ZVwiKV1gIGJlZm9yZVxuICogeW91IGxvYWQgdGhlIEFwb2xsbyBDbGllbnQgcGFja2FnZTpcbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHNcbiAqIGdsb2JhbFRoaXNbU3ltYm9sLmZvcihcImFwb2xsby5jYWNoZVNpemVcIildID0ge1xuICogICBwYXJzZXI6IDEwMFxuICogfSBzYXRpc2ZpZXMgUGFydGlhbDxDYWNoZVNpemVzPiAvLyB0aGUgYHNhdGlzZmllc2AgaXMgb3B0aW9uYWwgaWYgdXNpbmcgVHlwZVNjcmlwdFxuICogYGBgXG4gKi9cbmV4cG9ydCB2YXIgY2FjaGVTaXplcyA9IF9fYXNzaWduKHt9LCBnbG9iYWxbY2FjaGVTaXplU3ltYm9sXSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaXplcy5qcy5tYXAiXSwibmFtZXMiOlsiX19hc3NpZ24iLCJnbG9iYWwiLCJjYWNoZVNpemVTeW1ib2wiLCJTeW1ib2wiLCJmb3IiLCJjYWNoZVNpemVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/caching/sizes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/common/arrays.js":
/*!****************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/arrays.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isArray: () => (/* binding */ isArray),\n/* harmony export */   isNonEmptyArray: () => (/* binding */ isNonEmptyArray)\n/* harmony export */ });\n// A version of Array.isArray that works better with readonly arrays.\nvar isArray = Array.isArray;\nfunction isNonEmptyArray(value) {\n    return Array.isArray(value) && value.length > 0;\n} //# sourceMappingURL=arrays.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9hcnJheXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxxRUFBcUU7QUFDOUQsSUFBSUEsVUFBVUMsTUFBTUQsT0FBTyxDQUFDO0FBQzVCLFNBQVNFLGdCQUFnQkMsS0FBSztJQUNqQyxPQUFPRixNQUFNRCxPQUFPLENBQUNHLFVBQVVBLE1BQU1DLE1BQU0sR0FBRztBQUNsRCxFQUNBLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL3NsYWNrLWdyYXBocWwtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9hcnJheXMuanM/NGRmZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBBIHZlcnNpb24gb2YgQXJyYXkuaXNBcnJheSB0aGF0IHdvcmtzIGJldHRlciB3aXRoIHJlYWRvbmx5IGFycmF5cy5cbmV4cG9ydCB2YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5leHBvcnQgZnVuY3Rpb24gaXNOb25FbXB0eUFycmF5KHZhbHVlKSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsdWUpICYmIHZhbHVlLmxlbmd0aCA+IDA7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcnJheXMuanMubWFwIl0sIm5hbWVzIjpbImlzQXJyYXkiLCJBcnJheSIsImlzTm9uRW1wdHlBcnJheSIsInZhbHVlIiwibGVuZ3RoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/common/arrays.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js":
/*!****************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/canUse.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   canUseAsyncIteratorSymbol: () => (/* binding */ canUseAsyncIteratorSymbol),\n/* harmony export */   canUseDOM: () => (/* binding */ canUseDOM),\n/* harmony export */   canUseLayoutEffect: () => (/* binding */ canUseLayoutEffect),\n/* harmony export */   canUseSymbol: () => (/* binding */ canUseSymbol),\n/* harmony export */   canUseWeakMap: () => (/* binding */ canUseWeakMap),\n/* harmony export */   canUseWeakSet: () => (/* binding */ canUseWeakSet)\n/* harmony export */ });\n/* harmony import */ var _globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n\nvar isReactNative = (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function() {\n    return navigator.product;\n}) == \"ReactNative\";\nvar canUseWeakMap = typeof WeakMap === \"function\" && !(isReactNative && !global.HermesInternal);\nvar canUseWeakSet = typeof WeakSet === \"function\";\nvar canUseSymbol = typeof Symbol === \"function\" && typeof Symbol.for === \"function\";\nvar canUseAsyncIteratorSymbol = canUseSymbol && Symbol.asyncIterator;\nvar canUseDOM = typeof (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function() {\n    return window.document.createElement;\n}) === \"function\";\nvar usingJSDOM = // Following advice found in this comment from @domenic (maintainer of jsdom):\n// https://github.com/jsdom/jsdom/issues/1537#issuecomment-229405327\n//\n// Since we control the version of Jest and jsdom used when running Apollo\n// Client tests, and that version is recent enought to include \" jsdom/x.y.z\"\n// at the end of the user agent string, I believe this case is all we need to\n// check. Testing for \"Node.js\" was recommended for backwards compatibility\n// with older version of jsdom, but we don't have that problem.\n(0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function() {\n    return navigator.userAgent.indexOf(\"jsdom\") >= 0;\n}) || false;\n// Our tests should all continue to pass if we remove this !usingJSDOM\n// condition, thereby allowing useLayoutEffect when using jsdom. Unfortunately,\n// if we allow useLayoutEffect, then useSyncExternalStore generates many\n// warnings about useLayoutEffect doing nothing on the server. While these\n// warnings are harmless, this !usingJSDOM condition seems to be the best way to\n// prevent them (i.e. skipping useLayoutEffect when using jsdom).\nvar canUseLayoutEffect = (canUseDOM || isReactNative) && !usingJSDOM; //# sourceMappingURL=canUse.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9jYW5Vc2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUE0QztBQUM1QyxJQUFJQyxnQkFBZ0JELHdEQUFLQSxDQUFDO0lBQWMsT0FBT0UsVUFBVUMsT0FBTztBQUFFLE1BQU07QUFDakUsSUFBSUMsZ0JBQWdCLE9BQU9DLFlBQVksY0FDMUMsQ0FBRUosQ0FBQUEsaUJBQWlCLENBQUNLLE9BQU9DLGNBQWMsRUFBRTtBQUN4QyxJQUFJQyxnQkFBZ0IsT0FBT0MsWUFBWSxXQUFXO0FBQ2xELElBQUlDLGVBQWUsT0FBT0MsV0FBVyxjQUFjLE9BQU9BLE9BQU9DLEdBQUcsS0FBSyxXQUFXO0FBQ3BGLElBQUlDLDRCQUE0QkgsZ0JBQWdCQyxPQUFPRyxhQUFhLENBQUM7QUFDckUsSUFBSUMsWUFBWSxPQUFPZix3REFBS0EsQ0FBQztJQUFjLE9BQU9nQixPQUFPQyxRQUFRLENBQUNDLGFBQWE7QUFBRSxPQUFPLFdBQVc7QUFDMUcsSUFBSUMsYUFDSiw4RUFBOEU7QUFDOUUsb0VBQW9FO0FBQ3BFLEVBQUU7QUFDRiwwRUFBMEU7QUFDMUUsNkVBQTZFO0FBQzdFLDZFQUE2RTtBQUM3RSwyRUFBMkU7QUFDM0UsK0RBQStEO0FBQy9EbkIsd0RBQUtBLENBQUM7SUFBYyxPQUFPRSxVQUFVa0IsU0FBUyxDQUFDQyxPQUFPLENBQUMsWUFBWTtBQUFHLE1BQU07QUFDNUUsc0VBQXNFO0FBQ3RFLCtFQUErRTtBQUMvRSx3RUFBd0U7QUFDeEUsMEVBQTBFO0FBQzFFLGdGQUFnRjtBQUNoRixpRUFBaUU7QUFDMUQsSUFBSUMscUJBQXFCLENBQUNQLGFBQWFkLGFBQVksS0FBTSxDQUFDa0IsV0FBVyxDQUM1RSxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbGFjay1ncmFwaHFsLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L3V0aWxpdGllcy9jb21tb24vY2FuVXNlLmpzPzBmNWQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbWF5YmUgfSBmcm9tIFwiLi4vZ2xvYmFscy9pbmRleC5qc1wiO1xudmFyIGlzUmVhY3ROYXRpdmUgPSBtYXliZShmdW5jdGlvbiAoKSB7IHJldHVybiBuYXZpZ2F0b3IucHJvZHVjdDsgfSkgPT0gXCJSZWFjdE5hdGl2ZVwiO1xuZXhwb3J0IHZhciBjYW5Vc2VXZWFrTWFwID0gdHlwZW9mIFdlYWtNYXAgPT09IFwiZnVuY3Rpb25cIiAmJlxuICAgICEoaXNSZWFjdE5hdGl2ZSAmJiAhZ2xvYmFsLkhlcm1lc0ludGVybmFsKTtcbmV4cG9ydCB2YXIgY2FuVXNlV2Vha1NldCA9IHR5cGVvZiBXZWFrU2V0ID09PSBcImZ1bmN0aW9uXCI7XG5leHBvcnQgdmFyIGNhblVzZVN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLmZvciA9PT0gXCJmdW5jdGlvblwiO1xuZXhwb3J0IHZhciBjYW5Vc2VBc3luY0l0ZXJhdG9yU3ltYm9sID0gY2FuVXNlU3ltYm9sICYmIFN5bWJvbC5hc3luY0l0ZXJhdG9yO1xuZXhwb3J0IHZhciBjYW5Vc2VET00gPSB0eXBlb2YgbWF5YmUoZnVuY3Rpb24gKCkgeyByZXR1cm4gd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQ7IH0pID09PSBcImZ1bmN0aW9uXCI7XG52YXIgdXNpbmdKU0RPTSA9IFxuLy8gRm9sbG93aW5nIGFkdmljZSBmb3VuZCBpbiB0aGlzIGNvbW1lbnQgZnJvbSBAZG9tZW5pYyAobWFpbnRhaW5lciBvZiBqc2RvbSk6XG4vLyBodHRwczovL2dpdGh1Yi5jb20vanNkb20vanNkb20vaXNzdWVzLzE1MzcjaXNzdWVjb21tZW50LTIyOTQwNTMyN1xuLy9cbi8vIFNpbmNlIHdlIGNvbnRyb2wgdGhlIHZlcnNpb24gb2YgSmVzdCBhbmQganNkb20gdXNlZCB3aGVuIHJ1bm5pbmcgQXBvbGxvXG4vLyBDbGllbnQgdGVzdHMsIGFuZCB0aGF0IHZlcnNpb24gaXMgcmVjZW50IGVub3VnaHQgdG8gaW5jbHVkZSBcIiBqc2RvbS94LnkuelwiXG4vLyBhdCB0aGUgZW5kIG9mIHRoZSB1c2VyIGFnZW50IHN0cmluZywgSSBiZWxpZXZlIHRoaXMgY2FzZSBpcyBhbGwgd2UgbmVlZCB0b1xuLy8gY2hlY2suIFRlc3RpbmcgZm9yIFwiTm9kZS5qc1wiIHdhcyByZWNvbW1lbmRlZCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbi8vIHdpdGggb2xkZXIgdmVyc2lvbiBvZiBqc2RvbSwgYnV0IHdlIGRvbid0IGhhdmUgdGhhdCBwcm9ibGVtLlxubWF5YmUoZnVuY3Rpb24gKCkgeyByZXR1cm4gbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKFwianNkb21cIikgPj0gMDsgfSkgfHwgZmFsc2U7XG4vLyBPdXIgdGVzdHMgc2hvdWxkIGFsbCBjb250aW51ZSB0byBwYXNzIGlmIHdlIHJlbW92ZSB0aGlzICF1c2luZ0pTRE9NXG4vLyBjb25kaXRpb24sIHRoZXJlYnkgYWxsb3dpbmcgdXNlTGF5b3V0RWZmZWN0IHdoZW4gdXNpbmcganNkb20uIFVuZm9ydHVuYXRlbHksXG4vLyBpZiB3ZSBhbGxvdyB1c2VMYXlvdXRFZmZlY3QsIHRoZW4gdXNlU3luY0V4dGVybmFsU3RvcmUgZ2VuZXJhdGVzIG1hbnlcbi8vIHdhcm5pbmdzIGFib3V0IHVzZUxheW91dEVmZmVjdCBkb2luZyBub3RoaW5nIG9uIHRoZSBzZXJ2ZXIuIFdoaWxlIHRoZXNlXG4vLyB3YXJuaW5ncyBhcmUgaGFybWxlc3MsIHRoaXMgIXVzaW5nSlNET00gY29uZGl0aW9uIHNlZW1zIHRvIGJlIHRoZSBiZXN0IHdheSB0b1xuLy8gcHJldmVudCB0aGVtIChpLmUuIHNraXBwaW5nIHVzZUxheW91dEVmZmVjdCB3aGVuIHVzaW5nIGpzZG9tKS5cbmV4cG9ydCB2YXIgY2FuVXNlTGF5b3V0RWZmZWN0ID0gKGNhblVzZURPTSB8fCBpc1JlYWN0TmF0aXZlKSAmJiAhdXNpbmdKU0RPTTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNhblVzZS5qcy5tYXAiXSwibmFtZXMiOlsibWF5YmUiLCJpc1JlYWN0TmF0aXZlIiwibmF2aWdhdG9yIiwicHJvZHVjdCIsImNhblVzZVdlYWtNYXAiLCJXZWFrTWFwIiwiZ2xvYmFsIiwiSGVybWVzSW50ZXJuYWwiLCJjYW5Vc2VXZWFrU2V0IiwiV2Vha1NldCIsImNhblVzZVN5bWJvbCIsIlN5bWJvbCIsImZvciIsImNhblVzZUFzeW5jSXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwiY2FuVXNlRE9NIiwid2luZG93IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwidXNpbmdKU0RPTSIsInVzZXJBZ2VudCIsImluZGV4T2YiLCJjYW5Vc2VMYXlvdXRFZmZlY3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/common/canonicalStringify.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/canonicalStringify.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   canonicalStringify: () => (/* binding */ canonicalStringify)\n/* harmony export */ });\n/* harmony import */ var _utilities_caching_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/caching/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/caches.js\");\n/* harmony import */ var _utilities_caching_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utilities/caching/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/sizes.js\");\n/* harmony import */ var _caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../caching/getMemoryInternals.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/getMemoryInternals.js\");\n\n\n/**\n * Like JSON.stringify, but with object keys always sorted in the same order.\n *\n * To achieve performant sorting, this function uses a Map from JSON-serialized\n * arrays of keys (in any order) to sorted arrays of the same keys, with a\n * single sorted array reference shared by all permutations of the keys.\n *\n * As a drawback, this function will add a little bit more memory for every\n * object encountered that has different (more, less, a different order of) keys\n * than in the past.\n *\n * In a typical application, this extra memory usage should not play a\n * significant role, as `canonicalStringify` will be called for only a limited\n * number of object shapes, and the cache will not grow beyond a certain point.\n * But in some edge cases, this could be a problem, so we provide\n * canonicalStringify.reset() as a way of clearing the cache.\n * */ var canonicalStringify = Object.assign(function canonicalStringify(value) {\n    return JSON.stringify(value, stableObjectReplacer);\n}, {\n    reset: function() {\n        // Clearing the sortingMap will reclaim all cached memory, without\n        // affecting the logical results of canonicalStringify, but potentially\n        // sacrificing performance until the cache is refilled.\n        sortingMap = new _utilities_caching_index_js__WEBPACK_IMPORTED_MODULE_0__.AutoCleanedStrongCache(_utilities_caching_index_js__WEBPACK_IMPORTED_MODULE_1__.cacheSizes.canonicalStringify || 1000 /* defaultCacheSizes.canonicalStringify */ );\n    }\n});\nif (globalThis.__DEV__ !== false) {\n    (0,_caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_2__.registerGlobalCache)(\"canonicalStringify\", function() {\n        return sortingMap.size;\n    });\n}\n// Values are JSON-serialized arrays of object keys (in any order), and values\n// are sorted arrays of the same keys.\nvar sortingMap;\ncanonicalStringify.reset();\n// The JSON.stringify function takes an optional second argument called a\n// replacer function. This function is called for each key-value pair in the\n// object being stringified, and its return value is used instead of the\n// original value. If the replacer function returns a new value, that value is\n// stringified as JSON instead of the original value of the property.\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#the_replacer_parameter\nfunction stableObjectReplacer(key, value) {\n    if (value && typeof value === \"object\") {\n        var proto = Object.getPrototypeOf(value);\n        // We don't want to mess with objects that are not \"plain\" objects, which\n        // means their prototype is either Object.prototype or null. This check also\n        // prevents needlessly rearranging the indices of arrays.\n        if (proto === Object.prototype || proto === null) {\n            var keys = Object.keys(value);\n            // If keys is already sorted, let JSON.stringify serialize the original\n            // value instead of creating a new object with keys in the same order.\n            if (keys.every(everyKeyInOrder)) return value;\n            var unsortedKey = JSON.stringify(keys);\n            var sortedKeys = sortingMap.get(unsortedKey);\n            if (!sortedKeys) {\n                keys.sort();\n                var sortedKey = JSON.stringify(keys);\n                // Checking for sortedKey in the sortingMap allows us to share the same\n                // sorted array reference for all permutations of the same set of keys.\n                sortedKeys = sortingMap.get(sortedKey) || keys;\n                sortingMap.set(unsortedKey, sortedKeys);\n                sortingMap.set(sortedKey, sortedKeys);\n            }\n            var sortedObject_1 = Object.create(proto);\n            // Reassigning the keys in sorted order will cause JSON.stringify to\n            // serialize them in sorted order.\n            sortedKeys.forEach(function(key) {\n                sortedObject_1[key] = value[key];\n            });\n            return sortedObject_1;\n        }\n    }\n    return value;\n}\n// Since everything that happens in stableObjectReplacer benefits from being as\n// efficient as possible, we use a static function as the callback for\n// keys.every in order to test if the provided keys are already sorted without\n// allocating extra memory for a callback.\nfunction everyKeyInOrder(key, i, keys) {\n    return i === 0 || keys[i - 1] <= key;\n} //# sourceMappingURL=canonicalStringify.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/common/canonicalStringify.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/common/cloneDeep.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/cloneDeep.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cloneDeep: () => (/* binding */ cloneDeep)\n/* harmony export */ });\nvar toString = Object.prototype.toString;\n/**\n * Deeply clones a value to create a new instance.\n */ function cloneDeep(value) {\n    return cloneDeepHelper(value);\n}\nfunction cloneDeepHelper(val, seen) {\n    switch(toString.call(val)){\n        case \"[object Array]\":\n            {\n                seen = seen || new Map();\n                if (seen.has(val)) return seen.get(val);\n                var copy_1 = val.slice(0);\n                seen.set(val, copy_1);\n                copy_1.forEach(function(child, i) {\n                    copy_1[i] = cloneDeepHelper(child, seen);\n                });\n                return copy_1;\n            }\n        case \"[object Object]\":\n            {\n                seen = seen || new Map();\n                if (seen.has(val)) return seen.get(val);\n                // High fidelity polyfills of Object.create and Object.getPrototypeOf are\n                // possible in all JS environments, so we will assume they exist/work.\n                var copy_2 = Object.create(Object.getPrototypeOf(val));\n                seen.set(val, copy_2);\n                Object.keys(val).forEach(function(key) {\n                    copy_2[key] = cloneDeepHelper(val[key], seen);\n                });\n                return copy_2;\n            }\n        default:\n            return val;\n    }\n} //# sourceMappingURL=cloneDeep.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9jbG9uZURlZXAuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLElBQUlBLFdBQVdDLE9BQU9DLFNBQVMsQ0FBQ0YsUUFBUTtBQUN4Qzs7Q0FFQyxHQUNNLFNBQVNHLFVBQVVDLEtBQUs7SUFDM0IsT0FBT0MsZ0JBQWdCRDtBQUMzQjtBQUNBLFNBQVNDLGdCQUFnQkMsR0FBRyxFQUFFQyxJQUFJO0lBQzlCLE9BQVFQLFNBQVNRLElBQUksQ0FBQ0Y7UUFDbEIsS0FBSztZQUFrQjtnQkFDbkJDLE9BQU9BLFFBQVEsSUFBSUU7Z0JBQ25CLElBQUlGLEtBQUtHLEdBQUcsQ0FBQ0osTUFDVCxPQUFPQyxLQUFLSSxHQUFHLENBQUNMO2dCQUNwQixJQUFJTSxTQUFTTixJQUFJTyxLQUFLLENBQUM7Z0JBQ3ZCTixLQUFLTyxHQUFHLENBQUNSLEtBQUtNO2dCQUNkQSxPQUFPRyxPQUFPLENBQUMsU0FBVUMsS0FBSyxFQUFFQyxDQUFDO29CQUM3QkwsTUFBTSxDQUFDSyxFQUFFLEdBQUdaLGdCQUFnQlcsT0FBT1Q7Z0JBQ3ZDO2dCQUNBLE9BQU9LO1lBQ1g7UUFDQSxLQUFLO1lBQW1CO2dCQUNwQkwsT0FBT0EsUUFBUSxJQUFJRTtnQkFDbkIsSUFBSUYsS0FBS0csR0FBRyxDQUFDSixNQUNULE9BQU9DLEtBQUtJLEdBQUcsQ0FBQ0w7Z0JBQ3BCLHlFQUF5RTtnQkFDekUsc0VBQXNFO2dCQUN0RSxJQUFJWSxTQUFTakIsT0FBT2tCLE1BQU0sQ0FBQ2xCLE9BQU9tQixjQUFjLENBQUNkO2dCQUNqREMsS0FBS08sR0FBRyxDQUFDUixLQUFLWTtnQkFDZGpCLE9BQU9vQixJQUFJLENBQUNmLEtBQUtTLE9BQU8sQ0FBQyxTQUFVTyxHQUFHO29CQUNsQ0osTUFBTSxDQUFDSSxJQUFJLEdBQUdqQixnQkFBZ0JDLEdBQUcsQ0FBQ2dCLElBQUksRUFBRWY7Z0JBQzVDO2dCQUNBLE9BQU9XO1lBQ1g7UUFDQTtZQUNJLE9BQU9aO0lBQ2Y7QUFDSixFQUNBLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL3NsYWNrLWdyYXBocWwtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9jbG9uZURlZXAuanM/ODg0MCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuLyoqXG4gKiBEZWVwbHkgY2xvbmVzIGEgdmFsdWUgdG8gY3JlYXRlIGEgbmV3IGluc3RhbmNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY2xvbmVEZWVwKHZhbHVlKSB7XG4gICAgcmV0dXJuIGNsb25lRGVlcEhlbHBlcih2YWx1ZSk7XG59XG5mdW5jdGlvbiBjbG9uZURlZXBIZWxwZXIodmFsLCBzZWVuKSB7XG4gICAgc3dpdGNoICh0b1N0cmluZy5jYWxsKHZhbCkpIHtcbiAgICAgICAgY2FzZSBcIltvYmplY3QgQXJyYXldXCI6IHtcbiAgICAgICAgICAgIHNlZW4gPSBzZWVuIHx8IG5ldyBNYXAoKTtcbiAgICAgICAgICAgIGlmIChzZWVuLmhhcyh2YWwpKVxuICAgICAgICAgICAgICAgIHJldHVybiBzZWVuLmdldCh2YWwpO1xuICAgICAgICAgICAgdmFyIGNvcHlfMSA9IHZhbC5zbGljZSgwKTtcbiAgICAgICAgICAgIHNlZW4uc2V0KHZhbCwgY29weV8xKTtcbiAgICAgICAgICAgIGNvcHlfMS5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCwgaSkge1xuICAgICAgICAgICAgICAgIGNvcHlfMVtpXSA9IGNsb25lRGVlcEhlbHBlcihjaGlsZCwgc2Vlbik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBjb3B5XzE7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcIltvYmplY3QgT2JqZWN0XVwiOiB7XG4gICAgICAgICAgICBzZWVuID0gc2VlbiB8fCBuZXcgTWFwKCk7XG4gICAgICAgICAgICBpZiAoc2Vlbi5oYXModmFsKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gc2Vlbi5nZXQodmFsKTtcbiAgICAgICAgICAgIC8vIEhpZ2ggZmlkZWxpdHkgcG9seWZpbGxzIG9mIE9iamVjdC5jcmVhdGUgYW5kIE9iamVjdC5nZXRQcm90b3R5cGVPZiBhcmVcbiAgICAgICAgICAgIC8vIHBvc3NpYmxlIGluIGFsbCBKUyBlbnZpcm9ubWVudHMsIHNvIHdlIHdpbGwgYXNzdW1lIHRoZXkgZXhpc3Qvd29yay5cbiAgICAgICAgICAgIHZhciBjb3B5XzIgPSBPYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZih2YWwpKTtcbiAgICAgICAgICAgIHNlZW4uc2V0KHZhbCwgY29weV8yKTtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHZhbCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgY29weV8yW2tleV0gPSBjbG9uZURlZXBIZWxwZXIodmFsW2tleV0sIHNlZW4pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gY29weV8yO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gdmFsO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNsb25lRGVlcC5qcy5tYXAiXSwibmFtZXMiOlsidG9TdHJpbmciLCJPYmplY3QiLCJwcm90b3R5cGUiLCJjbG9uZURlZXAiLCJ2YWx1ZSIsImNsb25lRGVlcEhlbHBlciIsInZhbCIsInNlZW4iLCJjYWxsIiwiTWFwIiwiaGFzIiwiZ2V0IiwiY29weV8xIiwic2xpY2UiLCJzZXQiLCJmb3JFYWNoIiwiY2hpbGQiLCJpIiwiY29weV8yIiwiY3JlYXRlIiwiZ2V0UHJvdG90eXBlT2YiLCJrZXlzIiwia2V5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/common/cloneDeep.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/common/compact.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/compact.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compact: () => (/* binding */ compact)\n/* harmony export */ });\n/**\n * Merges the provided objects shallowly and removes\n * all properties with an `undefined` value\n */ function compact() {\n    var objects = [];\n    for(var _i = 0; _i < arguments.length; _i++){\n        objects[_i] = arguments[_i];\n    }\n    var result = Object.create(null);\n    objects.forEach(function(obj) {\n        if (!obj) return;\n        Object.keys(obj).forEach(function(key) {\n            var value = obj[key];\n            if (value !== void 0) {\n                result[key] = value;\n            }\n        });\n    });\n    return result;\n} //# sourceMappingURL=compact.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9jb21wYWN0LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7O0NBR0MsR0FDTSxTQUFTQTtJQUNaLElBQUlDLFVBQVUsRUFBRTtJQUNoQixJQUFLLElBQUlDLEtBQUssR0FBR0EsS0FBS0MsVUFBVUMsTUFBTSxFQUFFRixLQUFNO1FBQzFDRCxPQUFPLENBQUNDLEdBQUcsR0FBR0MsU0FBUyxDQUFDRCxHQUFHO0lBQy9CO0lBQ0EsSUFBSUcsU0FBU0MsT0FBT0MsTUFBTSxDQUFDO0lBQzNCTixRQUFRTyxPQUFPLENBQUMsU0FBVUMsR0FBRztRQUN6QixJQUFJLENBQUNBLEtBQ0Q7UUFDSkgsT0FBT0ksSUFBSSxDQUFDRCxLQUFLRCxPQUFPLENBQUMsU0FBVUcsR0FBRztZQUNsQyxJQUFJQyxRQUFRSCxHQUFHLENBQUNFLElBQUk7WUFDcEIsSUFBSUMsVUFBVSxLQUFLLEdBQUc7Z0JBQ2xCUCxNQUFNLENBQUNNLElBQUksR0FBR0M7WUFDbEI7UUFDSjtJQUNKO0lBQ0EsT0FBT1A7QUFDWCxFQUNBLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL3NsYWNrLWdyYXBocWwtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9jb21wYWN0LmpzPzZlNjQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBNZXJnZXMgdGhlIHByb3ZpZGVkIG9iamVjdHMgc2hhbGxvd2x5IGFuZCByZW1vdmVzXG4gKiBhbGwgcHJvcGVydGllcyB3aXRoIGFuIGB1bmRlZmluZWRgIHZhbHVlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21wYWN0KCkge1xuICAgIHZhciBvYmplY3RzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgb2JqZWN0c1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB2YXIgcmVzdWx0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBvYmplY3RzLmZvckVhY2goZnVuY3Rpb24gKG9iaikge1xuICAgICAgICBpZiAoIW9iailcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgT2JqZWN0LmtleXMob2JqKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IG9ialtrZXldO1xuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgICByZXN1bHRba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tcGFjdC5qcy5tYXAiXSwibmFtZXMiOlsiY29tcGFjdCIsIm9iamVjdHMiLCJfaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInJlc3VsdCIsIk9iamVjdCIsImNyZWF0ZSIsImZvckVhY2giLCJvYmoiLCJrZXlzIiwia2V5IiwidmFsdWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/common/compact.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/common/errorHandling.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/errorHandling.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getGraphQLErrorsFromResult: () => (/* binding */ getGraphQLErrorsFromResult),\n/* harmony export */   graphQLResultHasError: () => (/* binding */ graphQLResultHasError)\n/* harmony export */ });\n/* harmony import */ var _arrays_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arrays.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n/* harmony import */ var _incrementalResult_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./incrementalResult.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/incrementalResult.js\");\n\n\nfunction graphQLResultHasError(result) {\n    var errors = getGraphQLErrorsFromResult(result);\n    return (0,_arrays_js__WEBPACK_IMPORTED_MODULE_0__.isNonEmptyArray)(errors);\n}\nfunction getGraphQLErrorsFromResult(result) {\n    var graphQLErrors = (0,_arrays_js__WEBPACK_IMPORTED_MODULE_0__.isNonEmptyArray)(result.errors) ? result.errors.slice(0) : [];\n    if ((0,_incrementalResult_js__WEBPACK_IMPORTED_MODULE_1__.isExecutionPatchIncrementalResult)(result) && (0,_arrays_js__WEBPACK_IMPORTED_MODULE_0__.isNonEmptyArray)(result.incremental)) {\n        result.incremental.forEach(function(incrementalResult) {\n            if (incrementalResult.errors) {\n                graphQLErrors.push.apply(graphQLErrors, incrementalResult.errors);\n            }\n        });\n    }\n    return graphQLErrors;\n} //# sourceMappingURL=errorHandling.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9lcnJvckhhbmRsaW5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBOEM7QUFDNkI7QUFDcEUsU0FBU0Usc0JBQXNCQyxNQUFNO0lBQ3hDLElBQUlDLFNBQVNDLDJCQUEyQkY7SUFDeEMsT0FBT0gsMkRBQWVBLENBQUNJO0FBQzNCO0FBQ08sU0FBU0MsMkJBQTJCRixNQUFNO0lBQzdDLElBQUlHLGdCQUFnQk4sMkRBQWVBLENBQUNHLE9BQU9DLE1BQU0sSUFBSUQsT0FBT0MsTUFBTSxDQUFDRyxLQUFLLENBQUMsS0FBSyxFQUFFO0lBQ2hGLElBQUlOLHdGQUFpQ0EsQ0FBQ0UsV0FDbENILDJEQUFlQSxDQUFDRyxPQUFPSyxXQUFXLEdBQUc7UUFDckNMLE9BQU9LLFdBQVcsQ0FBQ0MsT0FBTyxDQUFDLFNBQVVDLGlCQUFpQjtZQUNsRCxJQUFJQSxrQkFBa0JOLE1BQU0sRUFBRTtnQkFDMUJFLGNBQWNLLElBQUksQ0FBQ0MsS0FBSyxDQUFDTixlQUFlSSxrQkFBa0JOLE1BQU07WUFDcEU7UUFDSjtJQUNKO0lBQ0EsT0FBT0U7QUFDWCxFQUNBLHlDQUF5QyIsInNvdXJjZXMiOlsid2VicGFjazovL3NsYWNrLWdyYXBocWwtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9lcnJvckhhbmRsaW5nLmpzPzdlZjQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNOb25FbXB0eUFycmF5IH0gZnJvbSBcIi4vYXJyYXlzLmpzXCI7XG5pbXBvcnQgeyBpc0V4ZWN1dGlvblBhdGNoSW5jcmVtZW50YWxSZXN1bHQgfSBmcm9tIFwiLi9pbmNyZW1lbnRhbFJlc3VsdC5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIGdyYXBoUUxSZXN1bHRIYXNFcnJvcihyZXN1bHQpIHtcbiAgICB2YXIgZXJyb3JzID0gZ2V0R3JhcGhRTEVycm9yc0Zyb21SZXN1bHQocmVzdWx0KTtcbiAgICByZXR1cm4gaXNOb25FbXB0eUFycmF5KGVycm9ycyk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0R3JhcGhRTEVycm9yc0Zyb21SZXN1bHQocmVzdWx0KSB7XG4gICAgdmFyIGdyYXBoUUxFcnJvcnMgPSBpc05vbkVtcHR5QXJyYXkocmVzdWx0LmVycm9ycykgPyByZXN1bHQuZXJyb3JzLnNsaWNlKDApIDogW107XG4gICAgaWYgKGlzRXhlY3V0aW9uUGF0Y2hJbmNyZW1lbnRhbFJlc3VsdChyZXN1bHQpICYmXG4gICAgICAgIGlzTm9uRW1wdHlBcnJheShyZXN1bHQuaW5jcmVtZW50YWwpKSB7XG4gICAgICAgIHJlc3VsdC5pbmNyZW1lbnRhbC5mb3JFYWNoKGZ1bmN0aW9uIChpbmNyZW1lbnRhbFJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKGluY3JlbWVudGFsUmVzdWx0LmVycm9ycykge1xuICAgICAgICAgICAgICAgIGdyYXBoUUxFcnJvcnMucHVzaC5hcHBseShncmFwaFFMRXJyb3JzLCBpbmNyZW1lbnRhbFJlc3VsdC5lcnJvcnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGdyYXBoUUxFcnJvcnM7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvckhhbmRsaW5nLmpzLm1hcCJdLCJuYW1lcyI6WyJpc05vbkVtcHR5QXJyYXkiLCJpc0V4ZWN1dGlvblBhdGNoSW5jcmVtZW50YWxSZXN1bHQiLCJncmFwaFFMUmVzdWx0SGFzRXJyb3IiLCJyZXN1bHQiLCJlcnJvcnMiLCJnZXRHcmFwaFFMRXJyb3JzRnJvbVJlc3VsdCIsImdyYXBoUUxFcnJvcnMiLCJzbGljZSIsImluY3JlbWVudGFsIiwiZm9yRWFjaCIsImluY3JlbWVudGFsUmVzdWx0IiwicHVzaCIsImFwcGx5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/common/errorHandling.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/common/incrementalResult.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/incrementalResult.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isApolloPayloadResult: () => (/* binding */ isApolloPayloadResult),\n/* harmony export */   isExecutionPatchIncrementalResult: () => (/* binding */ isExecutionPatchIncrementalResult),\n/* harmony export */   isExecutionPatchInitialResult: () => (/* binding */ isExecutionPatchInitialResult),\n/* harmony export */   isExecutionPatchResult: () => (/* binding */ isExecutionPatchResult),\n/* harmony export */   mergeIncrementalData: () => (/* binding */ mergeIncrementalData)\n/* harmony export */ });\n/* harmony import */ var _objects_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./objects.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/objects.js\");\n/* harmony import */ var _arrays_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./arrays.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n/* harmony import */ var _mergeDeep_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mergeDeep.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/mergeDeep.js\");\n\n\n\nfunction isExecutionPatchIncrementalResult(value) {\n    return \"incremental\" in value;\n}\nfunction isExecutionPatchInitialResult(value) {\n    return \"hasNext\" in value && \"data\" in value;\n}\nfunction isExecutionPatchResult(value) {\n    return isExecutionPatchIncrementalResult(value) || isExecutionPatchInitialResult(value);\n}\n// This function detects an Apollo payload result before it is transformed\n// into a FetchResult via HttpLink; it cannot detect an ApolloPayloadResult\n// once it leaves the link chain.\nfunction isApolloPayloadResult(value) {\n    return (0,_objects_js__WEBPACK_IMPORTED_MODULE_0__.isNonNullObject)(value) && \"payload\" in value;\n}\nfunction mergeIncrementalData(prevResult, result) {\n    var mergedData = prevResult;\n    var merger = new _mergeDeep_js__WEBPACK_IMPORTED_MODULE_1__.DeepMerger();\n    if (isExecutionPatchIncrementalResult(result) && (0,_arrays_js__WEBPACK_IMPORTED_MODULE_2__.isNonEmptyArray)(result.incremental)) {\n        result.incremental.forEach(function(_a) {\n            var data = _a.data, path = _a.path;\n            for(var i = path.length - 1; i >= 0; --i){\n                var key = path[i];\n                var isNumericKey = !isNaN(+key);\n                var parent_1 = isNumericKey ? [] : {};\n                parent_1[key] = data;\n                data = parent_1;\n            }\n            mergedData = merger.merge(mergedData, data);\n        });\n    }\n    return mergedData;\n} //# sourceMappingURL=incrementalResult.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9pbmNyZW1lbnRhbFJlc3VsdC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUErQztBQUNEO0FBQ0Y7QUFDckMsU0FBU0csa0NBQWtDQyxLQUFLO0lBQ25ELE9BQU8saUJBQWlCQTtBQUM1QjtBQUNPLFNBQVNDLDhCQUE4QkQsS0FBSztJQUMvQyxPQUFPLGFBQWFBLFNBQVMsVUFBVUE7QUFDM0M7QUFDTyxTQUFTRSx1QkFBdUJGLEtBQUs7SUFDeEMsT0FBUUQsa0NBQWtDQyxVQUN0Q0MsOEJBQThCRDtBQUN0QztBQUNBLDBFQUEwRTtBQUMxRSwyRUFBMkU7QUFDM0UsaUNBQWlDO0FBQzFCLFNBQVNHLHNCQUFzQkgsS0FBSztJQUN2QyxPQUFPSiw0REFBZUEsQ0FBQ0ksVUFBVSxhQUFhQTtBQUNsRDtBQUNPLFNBQVNJLHFCQUFxQkMsVUFBVSxFQUFFQyxNQUFNO0lBQ25ELElBQUlDLGFBQWFGO0lBQ2pCLElBQUlHLFNBQVMsSUFBSVYscURBQVVBO0lBQzNCLElBQUlDLGtDQUFrQ08sV0FDbENULDJEQUFlQSxDQUFDUyxPQUFPRyxXQUFXLEdBQUc7UUFDckNILE9BQU9HLFdBQVcsQ0FBQ0MsT0FBTyxDQUFDLFNBQVVDLEVBQUU7WUFDbkMsSUFBSUMsT0FBT0QsR0FBR0MsSUFBSSxFQUFFQyxPQUFPRixHQUFHRSxJQUFJO1lBQ2xDLElBQUssSUFBSUMsSUFBSUQsS0FBS0UsTUFBTSxHQUFHLEdBQUdELEtBQUssR0FBRyxFQUFFQSxFQUFHO2dCQUN2QyxJQUFJRSxNQUFNSCxJQUFJLENBQUNDLEVBQUU7Z0JBQ2pCLElBQUlHLGVBQWUsQ0FBQ0MsTUFBTSxDQUFDRjtnQkFDM0IsSUFBSUcsV0FBV0YsZUFBZSxFQUFFLEdBQUcsQ0FBQztnQkFDcENFLFFBQVEsQ0FBQ0gsSUFBSSxHQUFHSjtnQkFDaEJBLE9BQU9PO1lBQ1g7WUFDQVosYUFBYUMsT0FBT1ksS0FBSyxDQUFDYixZQUFZSztRQUMxQztJQUNKO0lBQ0EsT0FBT0w7QUFDWCxFQUNBLDZDQUE2QyIsInNvdXJjZXMiOlsid2VicGFjazovL3NsYWNrLWdyYXBocWwtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9pbmNyZW1lbnRhbFJlc3VsdC5qcz8yYjg5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzTm9uTnVsbE9iamVjdCB9IGZyb20gXCIuL29iamVjdHMuanNcIjtcbmltcG9ydCB7IGlzTm9uRW1wdHlBcnJheSB9IGZyb20gXCIuL2FycmF5cy5qc1wiO1xuaW1wb3J0IHsgRGVlcE1lcmdlciB9IGZyb20gXCIuL21lcmdlRGVlcC5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIGlzRXhlY3V0aW9uUGF0Y2hJbmNyZW1lbnRhbFJlc3VsdCh2YWx1ZSkge1xuICAgIHJldHVybiBcImluY3JlbWVudGFsXCIgaW4gdmFsdWU7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNFeGVjdXRpb25QYXRjaEluaXRpYWxSZXN1bHQodmFsdWUpIHtcbiAgICByZXR1cm4gXCJoYXNOZXh0XCIgaW4gdmFsdWUgJiYgXCJkYXRhXCIgaW4gdmFsdWU7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNFeGVjdXRpb25QYXRjaFJlc3VsdCh2YWx1ZSkge1xuICAgIHJldHVybiAoaXNFeGVjdXRpb25QYXRjaEluY3JlbWVudGFsUmVzdWx0KHZhbHVlKSB8fFxuICAgICAgICBpc0V4ZWN1dGlvblBhdGNoSW5pdGlhbFJlc3VsdCh2YWx1ZSkpO1xufVxuLy8gVGhpcyBmdW5jdGlvbiBkZXRlY3RzIGFuIEFwb2xsbyBwYXlsb2FkIHJlc3VsdCBiZWZvcmUgaXQgaXMgdHJhbnNmb3JtZWRcbi8vIGludG8gYSBGZXRjaFJlc3VsdCB2aWEgSHR0cExpbms7IGl0IGNhbm5vdCBkZXRlY3QgYW4gQXBvbGxvUGF5bG9hZFJlc3VsdFxuLy8gb25jZSBpdCBsZWF2ZXMgdGhlIGxpbmsgY2hhaW4uXG5leHBvcnQgZnVuY3Rpb24gaXNBcG9sbG9QYXlsb2FkUmVzdWx0KHZhbHVlKSB7XG4gICAgcmV0dXJuIGlzTm9uTnVsbE9iamVjdCh2YWx1ZSkgJiYgXCJwYXlsb2FkXCIgaW4gdmFsdWU7XG59XG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VJbmNyZW1lbnRhbERhdGEocHJldlJlc3VsdCwgcmVzdWx0KSB7XG4gICAgdmFyIG1lcmdlZERhdGEgPSBwcmV2UmVzdWx0O1xuICAgIHZhciBtZXJnZXIgPSBuZXcgRGVlcE1lcmdlcigpO1xuICAgIGlmIChpc0V4ZWN1dGlvblBhdGNoSW5jcmVtZW50YWxSZXN1bHQocmVzdWx0KSAmJlxuICAgICAgICBpc05vbkVtcHR5QXJyYXkocmVzdWx0LmluY3JlbWVudGFsKSkge1xuICAgICAgICByZXN1bHQuaW5jcmVtZW50YWwuZm9yRWFjaChmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgIHZhciBkYXRhID0gX2EuZGF0YSwgcGF0aCA9IF9hLnBhdGg7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gcGF0aC5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICAgICAgICAgIHZhciBrZXkgPSBwYXRoW2ldO1xuICAgICAgICAgICAgICAgIHZhciBpc051bWVyaWNLZXkgPSAhaXNOYU4oK2tleSk7XG4gICAgICAgICAgICAgICAgdmFyIHBhcmVudF8xID0gaXNOdW1lcmljS2V5ID8gW10gOiB7fTtcbiAgICAgICAgICAgICAgICBwYXJlbnRfMVtrZXldID0gZGF0YTtcbiAgICAgICAgICAgICAgICBkYXRhID0gcGFyZW50XzE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtZXJnZWREYXRhID0gbWVyZ2VyLm1lcmdlKG1lcmdlZERhdGEsIGRhdGEpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG1lcmdlZERhdGE7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmNyZW1lbnRhbFJlc3VsdC5qcy5tYXAiXSwibmFtZXMiOlsiaXNOb25OdWxsT2JqZWN0IiwiaXNOb25FbXB0eUFycmF5IiwiRGVlcE1lcmdlciIsImlzRXhlY3V0aW9uUGF0Y2hJbmNyZW1lbnRhbFJlc3VsdCIsInZhbHVlIiwiaXNFeGVjdXRpb25QYXRjaEluaXRpYWxSZXN1bHQiLCJpc0V4ZWN1dGlvblBhdGNoUmVzdWx0IiwiaXNBcG9sbG9QYXlsb2FkUmVzdWx0IiwibWVyZ2VJbmNyZW1lbnRhbERhdGEiLCJwcmV2UmVzdWx0IiwicmVzdWx0IiwibWVyZ2VkRGF0YSIsIm1lcmdlciIsImluY3JlbWVudGFsIiwiZm9yRWFjaCIsIl9hIiwiZGF0YSIsInBhdGgiLCJpIiwibGVuZ3RoIiwia2V5IiwiaXNOdW1lcmljS2V5IiwiaXNOYU4iLCJwYXJlbnRfMSIsIm1lcmdlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/common/incrementalResult.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/common/makeUniqueId.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/makeUniqueId.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   makeUniqueId: () => (/* binding */ makeUniqueId)\n/* harmony export */ });\nvar prefixCounts = new Map();\n// These IDs won't be globally unique, but they will be unique within this\n// process, thanks to the counter, and unguessable thanks to the random suffix.\nfunction makeUniqueId(prefix) {\n    var count = prefixCounts.get(prefix) || 1;\n    prefixCounts.set(prefix, count + 1);\n    return \"\".concat(prefix, \":\").concat(count, \":\").concat(Math.random().toString(36).slice(2));\n} //# sourceMappingURL=makeUniqueId.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9tYWtlVW5pcXVlSWQuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLElBQUlBLGVBQWUsSUFBSUM7QUFDdkIsMEVBQTBFO0FBQzFFLCtFQUErRTtBQUN4RSxTQUFTQyxhQUFhQyxNQUFNO0lBQy9CLElBQUlDLFFBQVFKLGFBQWFLLEdBQUcsQ0FBQ0YsV0FBVztJQUN4Q0gsYUFBYU0sR0FBRyxDQUFDSCxRQUFRQyxRQUFRO0lBQ2pDLE9BQU8sR0FBR0csTUFBTSxDQUFDSixRQUFRLEtBQUtJLE1BQU0sQ0FBQ0gsT0FBTyxLQUFLRyxNQUFNLENBQUNDLEtBQUtDLE1BQU0sR0FBR0MsUUFBUSxDQUFDLElBQUlDLEtBQUssQ0FBQztBQUM3RixFQUNBLHdDQUF3QyIsInNvdXJjZXMiOlsid2VicGFjazovL3NsYWNrLWdyYXBocWwtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9tYWtlVW5pcXVlSWQuanM/MjlhYSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgcHJlZml4Q291bnRzID0gbmV3IE1hcCgpO1xuLy8gVGhlc2UgSURzIHdvbid0IGJlIGdsb2JhbGx5IHVuaXF1ZSwgYnV0IHRoZXkgd2lsbCBiZSB1bmlxdWUgd2l0aGluIHRoaXNcbi8vIHByb2Nlc3MsIHRoYW5rcyB0byB0aGUgY291bnRlciwgYW5kIHVuZ3Vlc3NhYmxlIHRoYW5rcyB0byB0aGUgcmFuZG9tIHN1ZmZpeC5cbmV4cG9ydCBmdW5jdGlvbiBtYWtlVW5pcXVlSWQocHJlZml4KSB7XG4gICAgdmFyIGNvdW50ID0gcHJlZml4Q291bnRzLmdldChwcmVmaXgpIHx8IDE7XG4gICAgcHJlZml4Q291bnRzLnNldChwcmVmaXgsIGNvdW50ICsgMSk7XG4gICAgcmV0dXJuIFwiXCIuY29uY2F0KHByZWZpeCwgXCI6XCIpLmNvbmNhdChjb3VudCwgXCI6XCIpLmNvbmNhdChNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYWtlVW5pcXVlSWQuanMubWFwIl0sIm5hbWVzIjpbInByZWZpeENvdW50cyIsIk1hcCIsIm1ha2VVbmlxdWVJZCIsInByZWZpeCIsImNvdW50IiwiZ2V0Iiwic2V0IiwiY29uY2F0IiwiTWF0aCIsInJhbmRvbSIsInRvU3RyaW5nIiwic2xpY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/common/makeUniqueId.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/common/maybeDeepFreeze.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/maybeDeepFreeze.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   deepFreeze: () => (/* binding */ deepFreeze),\n/* harmony export */   maybeDeepFreeze: () => (/* binding */ maybeDeepFreeze)\n/* harmony export */ });\n/* harmony import */ var _objects_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./objects.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/objects.js\");\n\nfunction deepFreeze(value) {\n    var workSet = new Set([\n        value\n    ]);\n    workSet.forEach(function(obj) {\n        if ((0,_objects_js__WEBPACK_IMPORTED_MODULE_0__.isNonNullObject)(obj) && shallowFreeze(obj) === obj) {\n            Object.getOwnPropertyNames(obj).forEach(function(name) {\n                if ((0,_objects_js__WEBPACK_IMPORTED_MODULE_0__.isNonNullObject)(obj[name])) workSet.add(obj[name]);\n            });\n        }\n    });\n    return value;\n}\nfunction shallowFreeze(obj) {\n    if (globalThis.__DEV__ !== false && !Object.isFrozen(obj)) {\n        try {\n            Object.freeze(obj);\n        } catch (e) {\n            // Some types like Uint8Array and Node.js's Buffer cannot be frozen, but\n            // they all throw a TypeError when you try, so we re-throw any exceptions\n            // that are not TypeErrors, since that would be unexpected.\n            if (e instanceof TypeError) return null;\n            throw e;\n        }\n    }\n    return obj;\n}\nfunction maybeDeepFreeze(obj) {\n    if (globalThis.__DEV__ !== false) {\n        deepFreeze(obj);\n    }\n    return obj;\n} //# sourceMappingURL=maybeDeepFreeze.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9tYXliZURlZXBGcmVlemUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQStDO0FBQ3hDLFNBQVNDLFdBQVdDLEtBQUs7SUFDNUIsSUFBSUMsVUFBVSxJQUFJQyxJQUFJO1FBQUNGO0tBQU07SUFDN0JDLFFBQVFFLE9BQU8sQ0FBQyxTQUFVQyxHQUFHO1FBQ3pCLElBQUlOLDREQUFlQSxDQUFDTSxRQUFRQyxjQUFjRCxTQUFTQSxLQUFLO1lBQ3BERSxPQUFPQyxtQkFBbUIsQ0FBQ0gsS0FBS0QsT0FBTyxDQUFDLFNBQVVLLElBQUk7Z0JBQ2xELElBQUlWLDREQUFlQSxDQUFDTSxHQUFHLENBQUNJLEtBQUssR0FDekJQLFFBQVFRLEdBQUcsQ0FBQ0wsR0FBRyxDQUFDSSxLQUFLO1lBQzdCO1FBQ0o7SUFDSjtJQUNBLE9BQU9SO0FBQ1g7QUFDQSxTQUFTSyxjQUFjRCxHQUFHO0lBQ3RCLElBQUlNLFdBQVdDLE9BQU8sS0FBSyxTQUFTLENBQUNMLE9BQU9NLFFBQVEsQ0FBQ1IsTUFBTTtRQUN2RCxJQUFJO1lBQ0FFLE9BQU9PLE1BQU0sQ0FBQ1Q7UUFDbEIsRUFDQSxPQUFPVSxHQUFHO1lBQ04sd0VBQXdFO1lBQ3hFLHlFQUF5RTtZQUN6RSwyREFBMkQ7WUFDM0QsSUFBSUEsYUFBYUMsV0FDYixPQUFPO1lBQ1gsTUFBTUQ7UUFDVjtJQUNKO0lBQ0EsT0FBT1Y7QUFDWDtBQUNPLFNBQVNZLGdCQUFnQlosR0FBRztJQUMvQixJQUFJTSxXQUFXQyxPQUFPLEtBQUssT0FBTztRQUM5QlosV0FBV0s7SUFDZjtJQUNBLE9BQU9BO0FBQ1gsRUFDQSwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbGFjay1ncmFwaHFsLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L3V0aWxpdGllcy9jb21tb24vbWF5YmVEZWVwRnJlZXplLmpzPzQ1ZDUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNOb25OdWxsT2JqZWN0IH0gZnJvbSBcIi4vb2JqZWN0cy5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIGRlZXBGcmVlemUodmFsdWUpIHtcbiAgICB2YXIgd29ya1NldCA9IG5ldyBTZXQoW3ZhbHVlXSk7XG4gICAgd29ya1NldC5mb3JFYWNoKGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgaWYgKGlzTm9uTnVsbE9iamVjdChvYmopICYmIHNoYWxsb3dGcmVlemUob2JqKSA9PT0gb2JqKSB7XG4gICAgICAgICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNOb25OdWxsT2JqZWN0KG9ialtuYW1lXSkpXG4gICAgICAgICAgICAgICAgICAgIHdvcmtTZXQuYWRkKG9ialtuYW1lXSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIHNoYWxsb3dGcmVlemUob2JqKSB7XG4gICAgaWYgKGdsb2JhbFRoaXMuX19ERVZfXyAhPT0gZmFsc2UgJiYgIU9iamVjdC5pc0Zyb3plbihvYmopKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBPYmplY3QuZnJlZXplKG9iaik7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIFNvbWUgdHlwZXMgbGlrZSBVaW50OEFycmF5IGFuZCBOb2RlLmpzJ3MgQnVmZmVyIGNhbm5vdCBiZSBmcm96ZW4sIGJ1dFxuICAgICAgICAgICAgLy8gdGhleSBhbGwgdGhyb3cgYSBUeXBlRXJyb3Igd2hlbiB5b3UgdHJ5LCBzbyB3ZSByZS10aHJvdyBhbnkgZXhjZXB0aW9uc1xuICAgICAgICAgICAgLy8gdGhhdCBhcmUgbm90IFR5cGVFcnJvcnMsIHNpbmNlIHRoYXQgd291bGQgYmUgdW5leHBlY3RlZC5cbiAgICAgICAgICAgIGlmIChlIGluc3RhbmNlb2YgVHlwZUVycm9yKVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb2JqO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG1heWJlRGVlcEZyZWV6ZShvYmopIHtcbiAgICBpZiAoZ2xvYmFsVGhpcy5fX0RFVl9fICE9PSBmYWxzZSkge1xuICAgICAgICBkZWVwRnJlZXplKG9iaik7XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXliZURlZXBGcmVlemUuanMubWFwIl0sIm5hbWVzIjpbImlzTm9uTnVsbE9iamVjdCIsImRlZXBGcmVlemUiLCJ2YWx1ZSIsIndvcmtTZXQiLCJTZXQiLCJmb3JFYWNoIiwib2JqIiwic2hhbGxvd0ZyZWV6ZSIsIk9iamVjdCIsImdldE93blByb3BlcnR5TmFtZXMiLCJuYW1lIiwiYWRkIiwiZ2xvYmFsVGhpcyIsIl9fREVWX18iLCJpc0Zyb3plbiIsImZyZWV6ZSIsImUiLCJUeXBlRXJyb3IiLCJtYXliZURlZXBGcmVlemUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/common/maybeDeepFreeze.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/common/mergeDeep.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/mergeDeep.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DeepMerger: () => (/* binding */ DeepMerger),\n/* harmony export */   mergeDeep: () => (/* binding */ mergeDeep),\n/* harmony export */   mergeDeepArray: () => (/* binding */ mergeDeepArray)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _objects_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./objects.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/objects.js\");\n\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction mergeDeep() {\n    var sources = [];\n    for(var _i = 0; _i < arguments.length; _i++){\n        sources[_i] = arguments[_i];\n    }\n    return mergeDeepArray(sources);\n}\n// In almost any situation where you could succeed in getting the\n// TypeScript compiler to infer a tuple type for the sources array, you\n// could just use mergeDeep instead of mergeDeepArray, so instead of\n// trying to convert T[] to an intersection type we just infer the array\n// element type, which works perfectly when the sources array has a\n// consistent element type.\nfunction mergeDeepArray(sources) {\n    var target = sources[0] || {};\n    var count = sources.length;\n    if (count > 1) {\n        var merger = new DeepMerger();\n        for(var i = 1; i < count; ++i){\n            target = merger.merge(target, sources[i]);\n        }\n    }\n    return target;\n}\nvar defaultReconciler = function(target, source, property) {\n    return this.merge(target[property], source[property]);\n};\nvar DeepMerger = /** @class */ function() {\n    function DeepMerger(reconciler) {\n        if (reconciler === void 0) {\n            reconciler = defaultReconciler;\n        }\n        this.reconciler = reconciler;\n        this.isObject = _objects_js__WEBPACK_IMPORTED_MODULE_0__.isNonNullObject;\n        this.pastCopies = new Set();\n    }\n    DeepMerger.prototype.merge = function(target, source) {\n        var _this = this;\n        var context = [];\n        for(var _i = 2; _i < arguments.length; _i++){\n            context[_i - 2] = arguments[_i];\n        }\n        if ((0,_objects_js__WEBPACK_IMPORTED_MODULE_0__.isNonNullObject)(source) && (0,_objects_js__WEBPACK_IMPORTED_MODULE_0__.isNonNullObject)(target)) {\n            Object.keys(source).forEach(function(sourceKey) {\n                if (hasOwnProperty.call(target, sourceKey)) {\n                    var targetValue = target[sourceKey];\n                    if (source[sourceKey] !== targetValue) {\n                        var result = _this.reconciler.apply(_this, (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([\n                            target,\n                            source,\n                            sourceKey\n                        ], context, false));\n                        // A well-implemented reconciler may return targetValue to indicate\n                        // the merge changed nothing about the structure of the target.\n                        if (result !== targetValue) {\n                            target = _this.shallowCopyForMerge(target);\n                            target[sourceKey] = result;\n                        }\n                    }\n                } else {\n                    // If there is no collision, the target can safely share memory with\n                    // the source, and the recursion can terminate here.\n                    target = _this.shallowCopyForMerge(target);\n                    target[sourceKey] = source[sourceKey];\n                }\n            });\n            return target;\n        }\n        // If source (or target) is not an object, let source replace target.\n        return source;\n    };\n    DeepMerger.prototype.shallowCopyForMerge = function(value) {\n        if ((0,_objects_js__WEBPACK_IMPORTED_MODULE_0__.isNonNullObject)(value)) {\n            if (!this.pastCopies.has(value)) {\n                if (Array.isArray(value)) {\n                    value = value.slice(0);\n                } else {\n                    value = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({\n                        __proto__: Object.getPrototypeOf(value)\n                    }, value);\n                }\n                this.pastCopies.add(value);\n            }\n        }\n        return value;\n    };\n    return DeepMerger;\n}();\n //# sourceMappingURL=mergeDeep.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/common/mergeDeep.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/common/mergeOptions.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/mergeOptions.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mergeOptions: () => (/* binding */ mergeOptions)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _compact_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./compact.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/compact.js\");\n\n\nfunction mergeOptions(defaults, options) {\n    return (0,_compact_js__WEBPACK_IMPORTED_MODULE_0__.compact)(defaults, options, options.variables && {\n        variables: (0,_compact_js__WEBPACK_IMPORTED_MODULE_0__.compact)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, defaults && defaults.variables), options.variables))\n    });\n} //# sourceMappingURL=mergeOptions.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9tZXJnZU9wdGlvbnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWlDO0FBQ007QUFDaEMsU0FBU0UsYUFBYUMsUUFBUSxFQUFFQyxPQUFPO0lBQzFDLE9BQU9ILG9EQUFPQSxDQUFDRSxVQUFVQyxTQUFTQSxRQUFRQyxTQUFTLElBQUk7UUFDbkRBLFdBQVdKLG9EQUFPQSxDQUFDRCwrQ0FBUUEsQ0FBQ0EsK0NBQVFBLENBQUMsQ0FBQyxHQUFJRyxZQUFZQSxTQUFTRSxTQUFTLEdBQUlELFFBQVFDLFNBQVM7SUFDakc7QUFDSixFQUNBLHdDQUF3QyIsInNvdXJjZXMiOlsid2VicGFjazovL3NsYWNrLWdyYXBocWwtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9tZXJnZU9wdGlvbnMuanM/MDJiZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfX2Fzc2lnbiB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgY29tcGFjdCB9IGZyb20gXCIuL2NvbXBhY3QuanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBtZXJnZU9wdGlvbnMoZGVmYXVsdHMsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gY29tcGFjdChkZWZhdWx0cywgb3B0aW9ucywgb3B0aW9ucy52YXJpYWJsZXMgJiYge1xuICAgICAgICB2YXJpYWJsZXM6IGNvbXBhY3QoX19hc3NpZ24oX19hc3NpZ24oe30sIChkZWZhdWx0cyAmJiBkZWZhdWx0cy52YXJpYWJsZXMpKSwgb3B0aW9ucy52YXJpYWJsZXMpKSxcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlT3B0aW9ucy5qcy5tYXAiXSwibmFtZXMiOlsiX19hc3NpZ24iLCJjb21wYWN0IiwibWVyZ2VPcHRpb25zIiwiZGVmYXVsdHMiLCJvcHRpb25zIiwidmFyaWFibGVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/common/mergeOptions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/common/objects.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/objects.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isNonNullObject: () => (/* binding */ isNonNullObject),\n/* harmony export */   isPlainObject: () => (/* binding */ isPlainObject)\n/* harmony export */ });\nfunction isNonNullObject(obj) {\n    return obj !== null && typeof obj === \"object\";\n}\nfunction isPlainObject(obj) {\n    return obj !== null && typeof obj === \"object\" && (Object.getPrototypeOf(obj) === Object.prototype || Object.getPrototypeOf(obj) === null);\n} //# sourceMappingURL=objects.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9vYmplY3RzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQU8sU0FBU0EsZ0JBQWdCQyxHQUFHO0lBQy9CLE9BQU9BLFFBQVEsUUFBUSxPQUFPQSxRQUFRO0FBQzFDO0FBQ08sU0FBU0MsY0FBY0QsR0FBRztJQUM3QixPQUFRQSxRQUFRLFFBQ1osT0FBT0EsUUFBUSxZQUNkRSxDQUFBQSxPQUFPQyxjQUFjLENBQUNILFNBQVNFLE9BQU9FLFNBQVMsSUFDNUNGLE9BQU9DLGNBQWMsQ0FBQ0gsU0FBUyxJQUFHO0FBQzlDLEVBQ0EsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2xhY2stZ3JhcGhxbC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvY29tbW9uL29iamVjdHMuanM/MjE1OCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gaXNOb25OdWxsT2JqZWN0KG9iaikge1xuICAgIHJldHVybiBvYmogIT09IG51bGwgJiYgdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1BsYWluT2JqZWN0KG9iaikge1xuICAgIHJldHVybiAob2JqICE9PSBudWxsICYmXG4gICAgICAgIHR5cGVvZiBvYmogPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgKE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopID09PSBPYmplY3QucHJvdG90eXBlIHx8XG4gICAgICAgICAgICBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKSA9PT0gbnVsbCkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b2JqZWN0cy5qcy5tYXAiXSwibmFtZXMiOlsiaXNOb25OdWxsT2JqZWN0Iiwib2JqIiwiaXNQbGFpbk9iamVjdCIsIk9iamVjdCIsImdldFByb3RvdHlwZU9mIiwicHJvdG90eXBlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/common/objects.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/common/stringifyForDisplay.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/stringifyForDisplay.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   stringifyForDisplay: () => (/* binding */ stringifyForDisplay)\n/* harmony export */ });\n/* harmony import */ var _makeUniqueId_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./makeUniqueId.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/makeUniqueId.js\");\n\nfunction stringifyForDisplay(value, space) {\n    if (space === void 0) {\n        space = 0;\n    }\n    var undefId = (0,_makeUniqueId_js__WEBPACK_IMPORTED_MODULE_0__.makeUniqueId)(\"stringifyForDisplay\");\n    return JSON.stringify(value, function(key, value) {\n        return value === void 0 ? undefId : value;\n    }, space).split(JSON.stringify(undefId)).join(\"<undefined>\");\n} //# sourceMappingURL=stringifyForDisplay.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9zdHJpbmdpZnlGb3JEaXNwbGF5LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQWlEO0FBQzFDLFNBQVNDLG9CQUFvQkMsS0FBSyxFQUFFQyxLQUFLO0lBQzVDLElBQUlBLFVBQVUsS0FBSyxHQUFHO1FBQUVBLFFBQVE7SUFBRztJQUNuQyxJQUFJQyxVQUFVSiw4REFBWUEsQ0FBQztJQUMzQixPQUFPSyxLQUFLQyxTQUFTLENBQUNKLE9BQU8sU0FBVUssR0FBRyxFQUFFTCxLQUFLO1FBQzdDLE9BQU9BLFVBQVUsS0FBSyxJQUFJRSxVQUFVRjtJQUN4QyxHQUFHQyxPQUNFSyxLQUFLLENBQUNILEtBQUtDLFNBQVMsQ0FBQ0YsVUFDckJLLElBQUksQ0FBQztBQUNkLEVBQ0EsK0NBQStDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2xhY2stZ3JhcGhxbC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvY29tbW9uL3N0cmluZ2lmeUZvckRpc3BsYXkuanM/MjJjNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBtYWtlVW5pcXVlSWQgfSBmcm9tIFwiLi9tYWtlVW5pcXVlSWQuanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdpZnlGb3JEaXNwbGF5KHZhbHVlLCBzcGFjZSkge1xuICAgIGlmIChzcGFjZSA9PT0gdm9pZCAwKSB7IHNwYWNlID0gMDsgfVxuICAgIHZhciB1bmRlZklkID0gbWFrZVVuaXF1ZUlkKFwic3RyaW5naWZ5Rm9yRGlzcGxheVwiKTtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFsdWUsIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gdm9pZCAwID8gdW5kZWZJZCA6IHZhbHVlO1xuICAgIH0sIHNwYWNlKVxuICAgICAgICAuc3BsaXQoSlNPTi5zdHJpbmdpZnkodW5kZWZJZCkpXG4gICAgICAgIC5qb2luKFwiPHVuZGVmaW5lZD5cIik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdHJpbmdpZnlGb3JEaXNwbGF5LmpzLm1hcCJdLCJuYW1lcyI6WyJtYWtlVW5pcXVlSWQiLCJzdHJpbmdpZnlGb3JEaXNwbGF5IiwidmFsdWUiLCJzcGFjZSIsInVuZGVmSWQiLCJKU09OIiwic3RyaW5naWZ5Iiwia2V5Iiwic3BsaXQiLCJqb2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/common/stringifyForDisplay.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/deprecation/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/deprecation/index.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   muteDeprecations: () => (/* binding */ muteDeprecations),\n/* harmony export */   warnDeprecated: () => (/* binding */ warnDeprecated),\n/* harmony export */   warnRemovedOption: () => (/* binding */ warnRemovedOption),\n/* harmony export */   withDisabledDeprecations: () => (/* binding */ withDisabledDeprecations)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var optimism__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! optimism */ \"(ssr)/./node_modules/optimism/lib/index.js\");\n/* harmony import */ var _globals_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n\n\n\nvar muteAllDeprecations = Symbol.for(\"apollo.deprecations\");\nvar global = _globals_index_js__WEBPACK_IMPORTED_MODULE_1__.global;\nvar slot = new optimism__WEBPACK_IMPORTED_MODULE_0__.Slot();\nfunction isMuted(name) {\n    return global[muteAllDeprecations] || (slot.getValue() || []).includes(name);\n}\nfunction muteDeprecations(name) {\n    var args = [];\n    for(var _i = 1; _i < arguments.length; _i++){\n        args[_i - 1] = arguments[_i];\n    }\n    return slot.withValue.apply(slot, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([\n        Array.isArray(name) ? name : [\n            name\n        ]\n    ], args, false));\n}\nfunction warnRemovedOption(options, name, callSite, recommendation) {\n    if (recommendation === void 0) {\n        recommendation = \"Please remove this option.\";\n    }\n    warnDeprecated(name, function() {\n        if (name in options) {\n            globalThis.__DEV__ !== false && _globals_index_js__WEBPACK_IMPORTED_MODULE_1__.invariant.warn(104, callSite, name, recommendation);\n        }\n    });\n}\nfunction warnDeprecated(name, cb) {\n    if (!isMuted(name)) {\n        cb();\n    }\n}\nfunction withDisabledDeprecations() {\n    var _a;\n    var prev = global[muteAllDeprecations];\n    global[muteAllDeprecations] = true;\n    return _a = {}, _a[Symbol.dispose] = function() {\n        global[muteAllDeprecations] = prev;\n    }, _a;\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2RlcHJlY2F0aW9uL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBc0M7QUFDTjtBQUN5QztBQUN6RSxJQUFJSyxzQkFBc0JDLE9BQU9DLEdBQUcsQ0FBQztBQUNyQyxJQUFJSixTQUFTQyxxREFBYUE7QUFDMUIsSUFBSUksT0FBTyxJQUFJUCwwQ0FBSUE7QUFDbkIsU0FBU1EsUUFBUUMsSUFBSTtJQUNqQixPQUFPUCxNQUFNLENBQUNFLG9CQUFvQixJQUFJLENBQUNHLEtBQUtHLFFBQVEsTUFBTSxFQUFFLEVBQUVDLFFBQVEsQ0FBQ0Y7QUFDM0U7QUFDTyxTQUFTRyxpQkFBaUJILElBQUk7SUFDakMsSUFBSUksT0FBTyxFQUFFO0lBQ2IsSUFBSyxJQUFJQyxLQUFLLEdBQUdBLEtBQUtDLFVBQVVDLE1BQU0sRUFBRUYsS0FBTTtRQUMxQ0QsSUFBSSxDQUFDQyxLQUFLLEVBQUUsR0FBR0MsU0FBUyxDQUFDRCxHQUFHO0lBQ2hDO0lBQ0EsT0FBT1AsS0FBS1UsU0FBUyxDQUFDQyxLQUFLLENBQUNYLE1BQU1SLG9EQUFhQSxDQUFDO1FBQUNvQixNQUFNQyxPQUFPLENBQUNYLFFBQVFBLE9BQU87WUFBQ0E7U0FBSztLQUFDLEVBQUVJLE1BQU07QUFDakc7QUFDTyxTQUFTUSxrQkFBa0JDLE9BQU8sRUFBRWIsSUFBSSxFQUFFYyxRQUFRLEVBQUVDLGNBQWM7SUFDckUsSUFBSUEsbUJBQW1CLEtBQUssR0FBRztRQUFFQSxpQkFBaUI7SUFBOEI7SUFDaEZDLGVBQWVoQixNQUFNO1FBQ2pCLElBQUlBLFFBQVFhLFNBQVM7WUFDakJJLFdBQVdDLE9BQU8sS0FBSyxTQUFTMUIsd0RBQVNBLENBQUMyQixJQUFJLENBQUMsS0FBS0wsVUFBVWQsTUFBTWU7UUFDeEU7SUFDSjtBQUNKO0FBQ08sU0FBU0MsZUFBZWhCLElBQUksRUFBRW9CLEVBQUU7SUFDbkMsSUFBSSxDQUFDckIsUUFBUUMsT0FBTztRQUNoQm9CO0lBQ0o7QUFDSjtBQUNPLFNBQVNDO0lBQ1osSUFBSUM7SUFDSixJQUFJQyxPQUFPOUIsTUFBTSxDQUFDRSxvQkFBb0I7SUFDdENGLE1BQU0sQ0FBQ0Usb0JBQW9CLEdBQUc7SUFDOUIsT0FBTzJCLEtBQUssQ0FBQyxHQUNUQSxFQUFFLENBQUMxQixPQUFPNEIsT0FBTyxDQUFDLEdBQUc7UUFDakIvQixNQUFNLENBQUNFLG9CQUFvQixHQUFHNEI7SUFDbEMsR0FDQUQ7QUFDUixFQUNBLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3NsYWNrLWdyYXBocWwtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2RlcHJlY2F0aW9uL2luZGV4LmpzPzEyNDgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX19zcHJlYWRBcnJheSB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU2xvdCB9IGZyb20gXCJvcHRpbWlzbVwiO1xuaW1wb3J0IHsgaW52YXJpYW50LCBnbG9iYWwgYXMgdW50eXBlZEdsb2JhbCB9IGZyb20gXCIuLi9nbG9iYWxzL2luZGV4LmpzXCI7XG52YXIgbXV0ZUFsbERlcHJlY2F0aW9ucyA9IFN5bWJvbC5mb3IoXCJhcG9sbG8uZGVwcmVjYXRpb25zXCIpO1xudmFyIGdsb2JhbCA9IHVudHlwZWRHbG9iYWw7XG52YXIgc2xvdCA9IG5ldyBTbG90KCk7XG5mdW5jdGlvbiBpc011dGVkKG5hbWUpIHtcbiAgICByZXR1cm4gZ2xvYmFsW211dGVBbGxEZXByZWNhdGlvbnNdIHx8IChzbG90LmdldFZhbHVlKCkgfHwgW10pLmluY2x1ZGVzKG5hbWUpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG11dGVEZXByZWNhdGlvbnMobmFtZSkge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgYXJnc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgcmV0dXJuIHNsb3Qud2l0aFZhbHVlLmFwcGx5KHNsb3QsIF9fc3ByZWFkQXJyYXkoW0FycmF5LmlzQXJyYXkobmFtZSkgPyBuYW1lIDogW25hbWVdXSwgYXJncywgZmFsc2UpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3YXJuUmVtb3ZlZE9wdGlvbihvcHRpb25zLCBuYW1lLCBjYWxsU2l0ZSwgcmVjb21tZW5kYXRpb24pIHtcbiAgICBpZiAocmVjb21tZW5kYXRpb24gPT09IHZvaWQgMCkgeyByZWNvbW1lbmRhdGlvbiA9IFwiUGxlYXNlIHJlbW92ZSB0aGlzIG9wdGlvbi5cIjsgfVxuICAgIHdhcm5EZXByZWNhdGVkKG5hbWUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKG5hbWUgaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgZ2xvYmFsVGhpcy5fX0RFVl9fICE9PSBmYWxzZSAmJiBpbnZhcmlhbnQud2FybigxMDQsIGNhbGxTaXRlLCBuYW1lLCByZWNvbW1lbmRhdGlvbik7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3YXJuRGVwcmVjYXRlZChuYW1lLCBjYikge1xuICAgIGlmICghaXNNdXRlZChuYW1lKSkge1xuICAgICAgICBjYigpO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiB3aXRoRGlzYWJsZWREZXByZWNhdGlvbnMoKSB7XG4gICAgdmFyIF9hO1xuICAgIHZhciBwcmV2ID0gZ2xvYmFsW211dGVBbGxEZXByZWNhdGlvbnNdO1xuICAgIGdsb2JhbFttdXRlQWxsRGVwcmVjYXRpb25zXSA9IHRydWU7XG4gICAgcmV0dXJuIF9hID0ge30sXG4gICAgICAgIF9hW1N5bWJvbC5kaXNwb3NlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGdsb2JhbFttdXRlQWxsRGVwcmVjYXRpb25zXSA9IHByZXY7XG4gICAgICAgIH0sXG4gICAgICAgIF9hO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIl9fc3ByZWFkQXJyYXkiLCJTbG90IiwiaW52YXJpYW50IiwiZ2xvYmFsIiwidW50eXBlZEdsb2JhbCIsIm11dGVBbGxEZXByZWNhdGlvbnMiLCJTeW1ib2wiLCJmb3IiLCJzbG90IiwiaXNNdXRlZCIsIm5hbWUiLCJnZXRWYWx1ZSIsImluY2x1ZGVzIiwibXV0ZURlcHJlY2F0aW9ucyIsImFyZ3MiLCJfaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsIndpdGhWYWx1ZSIsImFwcGx5IiwiQXJyYXkiLCJpc0FycmF5Iiwid2FyblJlbW92ZWRPcHRpb24iLCJvcHRpb25zIiwiY2FsbFNpdGUiLCJyZWNvbW1lbmRhdGlvbiIsIndhcm5EZXByZWNhdGVkIiwiZ2xvYmFsVGhpcyIsIl9fREVWX18iLCJ3YXJuIiwiY2IiLCJ3aXRoRGlzYWJsZWREZXByZWNhdGlvbnMiLCJfYSIsInByZXYiLCJkaXNwb3NlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/deprecation/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/globals/global.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/globals/global.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _maybe_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./maybe.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/maybe.js\");\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_maybe_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function() {\n    return globalThis;\n}) || (0,_maybe_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function() {\n    return window;\n}) || (0,_maybe_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function() {\n    return self;\n}) || (0,_maybe_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function() {\n    return global;\n}) || // We don't expect the Function constructor ever to be invoked at runtime, as\n// long as at least one of globalThis, window, self, or global is defined, so\n// we are under no obligation to make it easy for static analysis tools to\n// detect syntactic usage of the Function constructor. If you think you can\n// improve your static analysis to detect this obfuscation, think again. This\n// is an arms race you cannot win, at least not in JavaScript.\n(0,_maybe_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function() {\n    return _maybe_js__WEBPACK_IMPORTED_MODULE_0__.maybe.constructor(\"return this\")();\n})); //# sourceMappingURL=global.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2dsb2JhbHMvZ2xvYmFsLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQW1DO0FBQ25DLGlFQUFnQkEsZ0RBQUtBLENBQUM7SUFBYyxPQUFPQztBQUFZLE1BQ25ERCxnREFBS0EsQ0FBQztJQUFjLE9BQU9FO0FBQVEsTUFDbkNGLGdEQUFLQSxDQUFDO0lBQWMsT0FBT0c7QUFBTSxNQUNqQ0gsZ0RBQUtBLENBQUM7SUFBYyxPQUFPSTtBQUFRLE1BQU0sNkVBQTZFO0FBQzFILDZFQUE2RTtBQUM3RSwwRUFBMEU7QUFDMUUsMkVBQTJFO0FBQzNFLDZFQUE2RTtBQUM3RSw4REFBOEQ7QUFDOURKLGdEQUFLQSxDQUFDO0lBQ0YsT0FBT0EsNENBQUtBLENBQUNLLFdBQVcsQ0FBQztBQUM3QixFQUFFLEVBQUUsQ0FDSixrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbGFjay1ncmFwaHFsLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L3V0aWxpdGllcy9nbG9iYWxzL2dsb2JhbC5qcz84NDg4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1heWJlIH0gZnJvbSBcIi4vbWF5YmUuanNcIjtcbmV4cG9ydCBkZWZhdWx0IChtYXliZShmdW5jdGlvbiAoKSB7IHJldHVybiBnbG9iYWxUaGlzOyB9KSB8fFxuICAgIG1heWJlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHdpbmRvdzsgfSkgfHxcbiAgICBtYXliZShmdW5jdGlvbiAoKSB7IHJldHVybiBzZWxmOyB9KSB8fFxuICAgIG1heWJlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdsb2JhbDsgfSkgfHwgLy8gV2UgZG9uJ3QgZXhwZWN0IHRoZSBGdW5jdGlvbiBjb25zdHJ1Y3RvciBldmVyIHRvIGJlIGludm9rZWQgYXQgcnVudGltZSwgYXNcbi8vIGxvbmcgYXMgYXQgbGVhc3Qgb25lIG9mIGdsb2JhbFRoaXMsIHdpbmRvdywgc2VsZiwgb3IgZ2xvYmFsIGlzIGRlZmluZWQsIHNvXG4vLyB3ZSBhcmUgdW5kZXIgbm8gb2JsaWdhdGlvbiB0byBtYWtlIGl0IGVhc3kgZm9yIHN0YXRpYyBhbmFseXNpcyB0b29scyB0b1xuLy8gZGV0ZWN0IHN5bnRhY3RpYyB1c2FnZSBvZiB0aGUgRnVuY3Rpb24gY29uc3RydWN0b3IuIElmIHlvdSB0aGluayB5b3UgY2FuXG4vLyBpbXByb3ZlIHlvdXIgc3RhdGljIGFuYWx5c2lzIHRvIGRldGVjdCB0aGlzIG9iZnVzY2F0aW9uLCB0aGluayBhZ2Fpbi4gVGhpc1xuLy8gaXMgYW4gYXJtcyByYWNlIHlvdSBjYW5ub3Qgd2luLCBhdCBsZWFzdCBub3QgaW4gSmF2YVNjcmlwdC5cbm1heWJlKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbWF5YmUuY29uc3RydWN0b3IoXCJyZXR1cm4gdGhpc1wiKSgpO1xufSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2xvYmFsLmpzLm1hcCJdLCJuYW1lcyI6WyJtYXliZSIsImdsb2JhbFRoaXMiLCJ3aW5kb3ciLCJzZWxmIiwiZ2xvYmFsIiwiY29uc3RydWN0b3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/globals/global.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/globals/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/globals/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEV: () => (/* binding */ DEV),\n/* harmony export */   InvariantError: () => (/* reexport safe */ _invariantWrappers_js__WEBPACK_IMPORTED_MODULE_0__.InvariantError),\n/* harmony export */   __DEV__: () => (/* binding */ DEV),\n/* harmony export */   global: () => (/* reexport safe */ _global_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]),\n/* harmony export */   invariant: () => (/* reexport safe */ _invariantWrappers_js__WEBPACK_IMPORTED_MODULE_0__.invariant),\n/* harmony export */   maybe: () => (/* reexport safe */ _maybe_js__WEBPACK_IMPORTED_MODULE_1__.maybe),\n/* harmony export */   newInvariantError: () => (/* reexport safe */ _invariantWrappers_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)\n/* harmony export */ });\n/* harmony import */ var _invariantWrappers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./invariantWrappers.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/invariantWrappers.js\");\n/* harmony import */ var _maybe_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./maybe.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/maybe.js\");\n/* harmony import */ var _global_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./global.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/global.js\");\n\n\n\n\n/**\n * @deprecated we do not use this internally anymore,\n * it is just exported for backwards compatibility\n */ // this file is extempt from automatic `__DEV__` replacement\n// so we have to write it out here\n// @ts-ignore\nvar DEV = globalThis.__DEV__ !== false;\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2dsb2JhbHMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUF1RjtBQUNwRDtBQUNhO0FBQ1E7QUFDeEQ7OztDQUdDLEdBQ0QsNERBQTREO0FBQzVELGtDQUFrQztBQUNsQyxhQUFhO0FBQ04sSUFBSU0sTUFBTUMsV0FBV0MsT0FBTyxLQUFLLE1BQU07QUFDcEIsQ0FDMUIsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2xhY2stZ3JhcGhxbC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvZ2xvYmFscy9pbmRleC5qcz9kMzgyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGludmFyaWFudCwgbmV3SW52YXJpYW50RXJyb3IsIEludmFyaWFudEVycm9yLCB9IGZyb20gXCIuL2ludmFyaWFudFdyYXBwZXJzLmpzXCI7XG5leHBvcnQgeyBtYXliZSB9IGZyb20gXCIuL21heWJlLmpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGdsb2JhbCB9IGZyb20gXCIuL2dsb2JhbC5qc1wiO1xuZXhwb3J0IHsgaW52YXJpYW50LCBuZXdJbnZhcmlhbnRFcnJvciwgSW52YXJpYW50RXJyb3IgfTtcbi8qKlxuICogQGRlcHJlY2F0ZWQgd2UgZG8gbm90IHVzZSB0aGlzIGludGVybmFsbHkgYW55bW9yZSxcbiAqIGl0IGlzIGp1c3QgZXhwb3J0ZWQgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG4gKi9cbi8vIHRoaXMgZmlsZSBpcyBleHRlbXB0IGZyb20gYXV0b21hdGljIGBfX0RFVl9fYCByZXBsYWNlbWVudFxuLy8gc28gd2UgaGF2ZSB0byB3cml0ZSBpdCBvdXQgaGVyZVxuLy8gQHRzLWlnbm9yZVxuZXhwb3J0IHZhciBERVYgPSBnbG9iYWxUaGlzLl9fREVWX18gIT09IGZhbHNlO1xuZXhwb3J0IHsgREVWIGFzIF9fREVWX18gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJpbnZhcmlhbnQiLCJuZXdJbnZhcmlhbnRFcnJvciIsIkludmFyaWFudEVycm9yIiwibWF5YmUiLCJkZWZhdWx0IiwiZ2xvYmFsIiwiREVWIiwiZ2xvYmFsVGhpcyIsIl9fREVWX18iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/globals/invariantWrappers.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/globals/invariantWrappers.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApolloErrorMessageHandler: () => (/* binding */ ApolloErrorMessageHandler),\n/* harmony export */   InvariantError: () => (/* reexport safe */ ts_invariant__WEBPACK_IMPORTED_MODULE_0__.InvariantError),\n/* harmony export */   invariant: () => (/* binding */ invariant),\n/* harmony export */   newInvariantError: () => (/* binding */ newInvariantError)\n/* harmony export */ });\n/* harmony import */ var ts_invariant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ts-invariant */ \"(ssr)/./node_modules/ts-invariant/lib/invariant.js\");\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../version.js */ \"(ssr)/./node_modules/@apollo/client/version.js\");\n/* harmony import */ var _global_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./global.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/global.js\");\n/* harmony import */ var _common_stringifyForDisplay_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/stringifyForDisplay.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/stringifyForDisplay.js\");\n\n\n\n\nfunction wrap(fn) {\n    return function(message) {\n        var args = [];\n        for(var _i = 1; _i < arguments.length; _i++){\n            args[_i - 1] = arguments[_i];\n        }\n        if (typeof message === \"number\") {\n            var arg0 = message;\n            message = getHandledErrorMsg(arg0);\n            if (!message) {\n                message = getFallbackErrorMsg(arg0, args);\n                args = [];\n            }\n        }\n        fn.apply(void 0, [\n            message\n        ].concat(args));\n    };\n}\nvar invariant = Object.assign(function invariant(condition, message) {\n    var args = [];\n    for(var _i = 2; _i < arguments.length; _i++){\n        args[_i - 2] = arguments[_i];\n    }\n    if (!condition) {\n        (0,ts_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(condition, getHandledErrorMsg(message, args) || getFallbackErrorMsg(message, args));\n    }\n}, {\n    debug: wrap(ts_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant.debug),\n    log: wrap(ts_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant.log),\n    warn: wrap(ts_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant.warn),\n    error: wrap(ts_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant.error)\n});\n/**\n * Returns an InvariantError.\n *\n * `message` can only be a string, a concatenation of strings, or a ternary statement\n * that results in a string. This will be enforced on build, where the message will\n * be replaced with a message number.\n * String substitutions with %s are supported and will also return\n * pretty-stringified objects.\n * Excess `optionalParams` will be swallowed.\n */ function newInvariantError(message) {\n    var optionalParams = [];\n    for(var _i = 1; _i < arguments.length; _i++){\n        optionalParams[_i - 1] = arguments[_i];\n    }\n    return new ts_invariant__WEBPACK_IMPORTED_MODULE_0__.InvariantError(getHandledErrorMsg(message, optionalParams) || getFallbackErrorMsg(message, optionalParams));\n}\nvar ApolloErrorMessageHandler = Symbol.for(\"ApolloErrorMessageHandler_\" + _version_js__WEBPACK_IMPORTED_MODULE_2__.version);\nfunction stringify(arg) {\n    if (typeof arg == \"string\") {\n        return arg;\n    }\n    try {\n        return (0,_common_stringifyForDisplay_js__WEBPACK_IMPORTED_MODULE_3__.stringifyForDisplay)(arg, 2).slice(0, 1000);\n    } catch (_a) {\n        return \"<non-serializable>\";\n    }\n}\nfunction getHandledErrorMsg(message, messageArgs) {\n    if (messageArgs === void 0) {\n        messageArgs = [];\n    }\n    if (!message) return;\n    return _global_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"][ApolloErrorMessageHandler] && _global_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"][ApolloErrorMessageHandler](message, messageArgs.map(stringify));\n}\nfunction getFallbackErrorMsg(message, messageArgs) {\n    if (messageArgs === void 0) {\n        messageArgs = [];\n    }\n    if (!message) return;\n    return \"An error occurred! For more details, see the full error text at https://go.apollo.dev/c/err#\".concat(encodeURIComponent(JSON.stringify({\n        version: _version_js__WEBPACK_IMPORTED_MODULE_2__.version,\n        message: message,\n        args: messageArgs.map(stringify)\n    })));\n}\n //# sourceMappingURL=invariantWrappers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2dsb2JhbHMvaW52YXJpYW50V3JhcHBlcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBOEU7QUFDbkM7QUFDVjtBQUNzQztBQUN2RSxTQUFTTSxLQUFLQyxFQUFFO0lBQ1osT0FBTyxTQUFVQyxPQUFPO1FBQ3BCLElBQUlDLE9BQU8sRUFBRTtRQUNiLElBQUssSUFBSUMsS0FBSyxHQUFHQSxLQUFLQyxVQUFVQyxNQUFNLEVBQUVGLEtBQU07WUFDMUNELElBQUksQ0FBQ0MsS0FBSyxFQUFFLEdBQUdDLFNBQVMsQ0FBQ0QsR0FBRztRQUNoQztRQUNBLElBQUksT0FBT0YsWUFBWSxVQUFVO1lBQzdCLElBQUlLLE9BQU9MO1lBQ1hBLFVBQVVNLG1CQUFtQkQ7WUFDN0IsSUFBSSxDQUFDTCxTQUFTO2dCQUNWQSxVQUFVTyxvQkFBb0JGLE1BQU1KO2dCQUNwQ0EsT0FBTyxFQUFFO1lBQ2I7UUFDSjtRQUNBRixHQUFHUyxLQUFLLENBQUMsS0FBSyxHQUFHO1lBQUNSO1NBQVEsQ0FBQ1MsTUFBTSxDQUFDUjtJQUN0QztBQUNKO0FBQ0EsSUFBSVQsWUFBWWtCLE9BQU9DLE1BQU0sQ0FBQyxTQUFTbkIsVUFBVW9CLFNBQVMsRUFBRVosT0FBTztJQUMvRCxJQUFJQyxPQUFPLEVBQUU7SUFDYixJQUFLLElBQUlDLEtBQUssR0FBR0EsS0FBS0MsVUFBVUMsTUFBTSxFQUFFRixLQUFNO1FBQzFDRCxJQUFJLENBQUNDLEtBQUssRUFBRSxHQUFHQyxTQUFTLENBQUNELEdBQUc7SUFDaEM7SUFDQSxJQUFJLENBQUNVLFdBQVc7UUFDWm5CLHVEQUFpQkEsQ0FBQ21CLFdBQVdOLG1CQUFtQk4sU0FBU0MsU0FBU00sb0JBQW9CUCxTQUFTQztJQUNuRztBQUNKLEdBQUc7SUFDQ1ksT0FBT2YsS0FBS0wsbURBQWlCQSxDQUFDb0IsS0FBSztJQUNuQ0MsS0FBS2hCLEtBQUtMLG1EQUFpQkEsQ0FBQ3FCLEdBQUc7SUFDL0JDLE1BQU1qQixLQUFLTCxtREFBaUJBLENBQUNzQixJQUFJO0lBQ2pDQyxPQUFPbEIsS0FBS0wsbURBQWlCQSxDQUFDdUIsS0FBSztBQUN2QztBQUNBOzs7Ozs7Ozs7Q0FTQyxHQUNELFNBQVNDLGtCQUFrQmpCLE9BQU87SUFDOUIsSUFBSWtCLGlCQUFpQixFQUFFO0lBQ3ZCLElBQUssSUFBSWhCLEtBQUssR0FBR0EsS0FBS0MsVUFBVUMsTUFBTSxFQUFFRixLQUFNO1FBQzFDZ0IsY0FBYyxDQUFDaEIsS0FBSyxFQUFFLEdBQUdDLFNBQVMsQ0FBQ0QsR0FBRztJQUMxQztJQUNBLE9BQU8sSUFBSVIsd0RBQWNBLENBQUNZLG1CQUFtQk4sU0FBU2tCLG1CQUNsRFgsb0JBQW9CUCxTQUFTa0I7QUFDckM7QUFDQSxJQUFJQyw0QkFBNEJDLE9BQU9DLEdBQUcsQ0FBQywrQkFBK0IxQixnREFBT0E7QUFDakYsU0FBUzJCLFVBQVVDLEdBQUc7SUFDbEIsSUFBSSxPQUFPQSxPQUFPLFVBQVU7UUFDeEIsT0FBT0E7SUFDWDtJQUNBLElBQUk7UUFDQSxPQUFPMUIsbUZBQW1CQSxDQUFDMEIsS0FBSyxHQUFHQyxLQUFLLENBQUMsR0FBRztJQUNoRCxFQUNBLE9BQU9DLElBQUk7UUFDUCxPQUFPO0lBQ1g7QUFDSjtBQUNBLFNBQVNuQixtQkFBbUJOLE9BQU8sRUFBRTBCLFdBQVc7SUFDNUMsSUFBSUEsZ0JBQWdCLEtBQUssR0FBRztRQUFFQSxjQUFjLEVBQUU7SUFBRTtJQUNoRCxJQUFJLENBQUMxQixTQUNEO0lBQ0osT0FBUUosa0RBQU0sQ0FBQ3VCLDBCQUEwQixJQUNyQ3ZCLGtEQUFNLENBQUN1QiwwQkFBMEIsQ0FBQ25CLFNBQVMwQixZQUFZQyxHQUFHLENBQUNMO0FBQ25FO0FBQ0EsU0FBU2Ysb0JBQW9CUCxPQUFPLEVBQUUwQixXQUFXO0lBQzdDLElBQUlBLGdCQUFnQixLQUFLLEdBQUc7UUFBRUEsY0FBYyxFQUFFO0lBQUU7SUFDaEQsSUFBSSxDQUFDMUIsU0FDRDtJQUNKLE9BQU8sK0ZBQStGUyxNQUFNLENBQUNtQixtQkFBbUJDLEtBQUtQLFNBQVMsQ0FBQztRQUMzSTNCLFNBQVNBLGdEQUFPQTtRQUNoQkssU0FBU0E7UUFDVEMsTUFBTXlCLFlBQVlDLEdBQUcsQ0FBQ0w7SUFDMUI7QUFDSjtBQUNvRixDQUNwRiw2Q0FBNkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbGFjay1ncmFwaHFsLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L3V0aWxpdGllcy9nbG9iYWxzL2ludmFyaWFudFdyYXBwZXJzLmpzP2M3M2UiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW52YXJpYW50IGFzIG9yaWdpbmFsSW52YXJpYW50LCBJbnZhcmlhbnRFcnJvciB9IGZyb20gXCJ0cy1pbnZhcmlhbnRcIjtcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tIFwiLi4vLi4vdmVyc2lvbi5qc1wiO1xuaW1wb3J0IGdsb2JhbCBmcm9tIFwiLi9nbG9iYWwuanNcIjtcbmltcG9ydCB7IHN0cmluZ2lmeUZvckRpc3BsYXkgfSBmcm9tIFwiLi4vY29tbW9uL3N0cmluZ2lmeUZvckRpc3BsYXkuanNcIjtcbmZ1bmN0aW9uIHdyYXAoZm4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBtZXNzYWdlID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICB2YXIgYXJnMCA9IG1lc3NhZ2U7XG4gICAgICAgICAgICBtZXNzYWdlID0gZ2V0SGFuZGxlZEVycm9yTXNnKGFyZzApO1xuICAgICAgICAgICAgaWYgKCFtZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IGdldEZhbGxiYWNrRXJyb3JNc2coYXJnMCwgYXJncyk7XG4gICAgICAgICAgICAgICAgYXJncyA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZuLmFwcGx5KHZvaWQgMCwgW21lc3NhZ2VdLmNvbmNhdChhcmdzKSk7XG4gICAgfTtcbn1cbnZhciBpbnZhcmlhbnQgPSBPYmplY3QuYXNzaWduKGZ1bmN0aW9uIGludmFyaWFudChjb25kaXRpb24sIG1lc3NhZ2UpIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMjsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGFyZ3NbX2kgLSAyXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICAgIG9yaWdpbmFsSW52YXJpYW50KGNvbmRpdGlvbiwgZ2V0SGFuZGxlZEVycm9yTXNnKG1lc3NhZ2UsIGFyZ3MpIHx8IGdldEZhbGxiYWNrRXJyb3JNc2cobWVzc2FnZSwgYXJncykpO1xuICAgIH1cbn0sIHtcbiAgICBkZWJ1Zzogd3JhcChvcmlnaW5hbEludmFyaWFudC5kZWJ1ZyksXG4gICAgbG9nOiB3cmFwKG9yaWdpbmFsSW52YXJpYW50LmxvZyksXG4gICAgd2Fybjogd3JhcChvcmlnaW5hbEludmFyaWFudC53YXJuKSxcbiAgICBlcnJvcjogd3JhcChvcmlnaW5hbEludmFyaWFudC5lcnJvciksXG59KTtcbi8qKlxuICogUmV0dXJucyBhbiBJbnZhcmlhbnRFcnJvci5cbiAqXG4gKiBgbWVzc2FnZWAgY2FuIG9ubHkgYmUgYSBzdHJpbmcsIGEgY29uY2F0ZW5hdGlvbiBvZiBzdHJpbmdzLCBvciBhIHRlcm5hcnkgc3RhdGVtZW50XG4gKiB0aGF0IHJlc3VsdHMgaW4gYSBzdHJpbmcuIFRoaXMgd2lsbCBiZSBlbmZvcmNlZCBvbiBidWlsZCwgd2hlcmUgdGhlIG1lc3NhZ2Ugd2lsbFxuICogYmUgcmVwbGFjZWQgd2l0aCBhIG1lc3NhZ2UgbnVtYmVyLlxuICogU3RyaW5nIHN1YnN0aXR1dGlvbnMgd2l0aCAlcyBhcmUgc3VwcG9ydGVkIGFuZCB3aWxsIGFsc28gcmV0dXJuXG4gKiBwcmV0dHktc3RyaW5naWZpZWQgb2JqZWN0cy5cbiAqIEV4Y2VzcyBgb3B0aW9uYWxQYXJhbXNgIHdpbGwgYmUgc3dhbGxvd2VkLlxuICovXG5mdW5jdGlvbiBuZXdJbnZhcmlhbnRFcnJvcihtZXNzYWdlKSB7XG4gICAgdmFyIG9wdGlvbmFsUGFyYW1zID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgb3B0aW9uYWxQYXJhbXNbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHJldHVybiBuZXcgSW52YXJpYW50RXJyb3IoZ2V0SGFuZGxlZEVycm9yTXNnKG1lc3NhZ2UsIG9wdGlvbmFsUGFyYW1zKSB8fFxuICAgICAgICBnZXRGYWxsYmFja0Vycm9yTXNnKG1lc3NhZ2UsIG9wdGlvbmFsUGFyYW1zKSk7XG59XG52YXIgQXBvbGxvRXJyb3JNZXNzYWdlSGFuZGxlciA9IFN5bWJvbC5mb3IoXCJBcG9sbG9FcnJvck1lc3NhZ2VIYW5kbGVyX1wiICsgdmVyc2lvbik7XG5mdW5jdGlvbiBzdHJpbmdpZnkoYXJnKSB7XG4gICAgaWYgKHR5cGVvZiBhcmcgPT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gYXJnO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gc3RyaW5naWZ5Rm9yRGlzcGxheShhcmcsIDIpLnNsaWNlKDAsIDEwMDApO1xuICAgIH1cbiAgICBjYXRjaCAoX2EpIHtcbiAgICAgICAgcmV0dXJuIFwiPG5vbi1zZXJpYWxpemFibGU+XCI7XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0SGFuZGxlZEVycm9yTXNnKG1lc3NhZ2UsIG1lc3NhZ2VBcmdzKSB7XG4gICAgaWYgKG1lc3NhZ2VBcmdzID09PSB2b2lkIDApIHsgbWVzc2FnZUFyZ3MgPSBbXTsgfVxuICAgIGlmICghbWVzc2FnZSlcbiAgICAgICAgcmV0dXJuO1xuICAgIHJldHVybiAoZ2xvYmFsW0Fwb2xsb0Vycm9yTWVzc2FnZUhhbmRsZXJdICYmXG4gICAgICAgIGdsb2JhbFtBcG9sbG9FcnJvck1lc3NhZ2VIYW5kbGVyXShtZXNzYWdlLCBtZXNzYWdlQXJncy5tYXAoc3RyaW5naWZ5KSkpO1xufVxuZnVuY3Rpb24gZ2V0RmFsbGJhY2tFcnJvck1zZyhtZXNzYWdlLCBtZXNzYWdlQXJncykge1xuICAgIGlmIChtZXNzYWdlQXJncyA9PT0gdm9pZCAwKSB7IG1lc3NhZ2VBcmdzID0gW107IH1cbiAgICBpZiAoIW1lc3NhZ2UpXG4gICAgICAgIHJldHVybjtcbiAgICByZXR1cm4gXCJBbiBlcnJvciBvY2N1cnJlZCEgRm9yIG1vcmUgZGV0YWlscywgc2VlIHRoZSBmdWxsIGVycm9yIHRleHQgYXQgaHR0cHM6Ly9nby5hcG9sbG8uZGV2L2MvZXJyI1wiLmNvbmNhdChlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICB2ZXJzaW9uOiB2ZXJzaW9uLFxuICAgICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgICBhcmdzOiBtZXNzYWdlQXJncy5tYXAoc3RyaW5naWZ5KSxcbiAgICB9KSkpO1xufVxuZXhwb3J0IHsgaW52YXJpYW50LCBJbnZhcmlhbnRFcnJvciwgbmV3SW52YXJpYW50RXJyb3IsIEFwb2xsb0Vycm9yTWVzc2FnZUhhbmRsZXIsIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnZhcmlhbnRXcmFwcGVycy5qcy5tYXAiXSwibmFtZXMiOlsiaW52YXJpYW50Iiwib3JpZ2luYWxJbnZhcmlhbnQiLCJJbnZhcmlhbnRFcnJvciIsInZlcnNpb24iLCJnbG9iYWwiLCJzdHJpbmdpZnlGb3JEaXNwbGF5Iiwid3JhcCIsImZuIiwibWVzc2FnZSIsImFyZ3MiLCJfaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsImFyZzAiLCJnZXRIYW5kbGVkRXJyb3JNc2ciLCJnZXRGYWxsYmFja0Vycm9yTXNnIiwiYXBwbHkiLCJjb25jYXQiLCJPYmplY3QiLCJhc3NpZ24iLCJjb25kaXRpb24iLCJkZWJ1ZyIsImxvZyIsIndhcm4iLCJlcnJvciIsIm5ld0ludmFyaWFudEVycm9yIiwib3B0aW9uYWxQYXJhbXMiLCJBcG9sbG9FcnJvck1lc3NhZ2VIYW5kbGVyIiwiU3ltYm9sIiwiZm9yIiwic3RyaW5naWZ5IiwiYXJnIiwic2xpY2UiLCJfYSIsIm1lc3NhZ2VBcmdzIiwibWFwIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/globals/invariantWrappers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/globals/maybe.js":
/*!****************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/globals/maybe.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   maybe: () => (/* binding */ maybe)\n/* harmony export */ });\nfunction maybe(thunk) {\n    try {\n        return thunk();\n    } catch (_a) {}\n} //# sourceMappingURL=maybe.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2dsb2JhbHMvbWF5YmUuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLFNBQVNBLE1BQU1DLEtBQUs7SUFDdkIsSUFBSTtRQUNBLE9BQU9BO0lBQ1gsRUFDQSxPQUFPQyxJQUFJLENBQUU7QUFDakIsRUFDQSxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbGFjay1ncmFwaHFsLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L3V0aWxpdGllcy9nbG9iYWxzL21heWJlLmpzPzE1YTUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIG1heWJlKHRodW5rKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIHRodW5rKCk7XG4gICAgfVxuICAgIGNhdGNoIChfYSkgeyB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXliZS5qcy5tYXAiXSwibmFtZXMiOlsibWF5YmUiLCJ0aHVuayIsIl9hIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/globals/maybe.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/graphql/DocumentTransform.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/graphql/DocumentTransform.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DocumentTransform: () => (/* binding */ DocumentTransform)\n/* harmony export */ });\n/* harmony import */ var _wry_trie__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wry/trie */ \"(ssr)/./node_modules/@wry/trie/lib/index.js\");\n/* harmony import */ var _common_canUse_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/canUse.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n/* harmony import */ var _getFromAST_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./getFromAST.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n/* harmony import */ var _globals_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _wry_caches__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @wry/caches */ \"(ssr)/./node_modules/@wry/caches/lib/weak.js\");\n/* harmony import */ var optimism__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! optimism */ \"(ssr)/./node_modules/optimism/lib/index.js\");\n/* harmony import */ var _caching_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../caching/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/sizes.js\");\n\n\n\n\n\n\n\nfunction identity(document) {\n    return document;\n}\nvar DocumentTransform = /** @class */ function() {\n    function DocumentTransform(transform, options) {\n        if (options === void 0) {\n            options = Object.create(null);\n        }\n        this.resultCache = _common_canUse_js__WEBPACK_IMPORTED_MODULE_3__.canUseWeakSet ? new WeakSet() : new Set();\n        this.transform = transform;\n        if (options.getCacheKey) {\n            // Override default `getCacheKey` function, which returns [document].\n            this.getCacheKey = options.getCacheKey;\n        }\n        this.cached = options.cache !== false;\n        this.resetCache();\n    }\n    // This default implementation of getCacheKey can be overridden by providing\n    // options.getCacheKey to the DocumentTransform constructor. In general, a\n    // getCacheKey function may either return an array of keys (often including\n    // the document) to be used as a cache key, or undefined to indicate the\n    // transform for this document should not be cached.\n    DocumentTransform.prototype.getCacheKey = function(document) {\n        return [\n            document\n        ];\n    };\n    DocumentTransform.identity = function() {\n        // No need to cache this transform since it just returns the document\n        // unchanged. This should save a bit of memory that would otherwise be\n        // needed to populate the `documentCache` of this transform.\n        return new DocumentTransform(identity, {\n            cache: false\n        });\n    };\n    DocumentTransform.split = function(predicate, left, right) {\n        if (right === void 0) {\n            right = DocumentTransform.identity();\n        }\n        return Object.assign(new DocumentTransform(function(document) {\n            var documentTransform = predicate(document) ? left : right;\n            return documentTransform.transformDocument(document);\n        }, // Reasonably assume both `left` and `right` transforms handle their own caching\n        {\n            cache: false\n        }), {\n            left: left,\n            right: right\n        });\n    };\n    /**\n     * Resets the internal cache of this transform, if it has one.\n     */ DocumentTransform.prototype.resetCache = function() {\n        var _this = this;\n        if (this.cached) {\n            var stableCacheKeys_1 = new _wry_trie__WEBPACK_IMPORTED_MODULE_0__.Trie(_common_canUse_js__WEBPACK_IMPORTED_MODULE_3__.canUseWeakMap);\n            this.performWork = (0,optimism__WEBPACK_IMPORTED_MODULE_2__.wrap)(DocumentTransform.prototype.performWork.bind(this), {\n                makeCacheKey: function(document) {\n                    var cacheKeys = _this.getCacheKey(document);\n                    if (cacheKeys) {\n                        (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_1__.invariant)(Array.isArray(cacheKeys), 105);\n                        return stableCacheKeys_1.lookupArray(cacheKeys);\n                    }\n                },\n                max: _caching_index_js__WEBPACK_IMPORTED_MODULE_4__.cacheSizes[\"documentTransform.cache\"],\n                cache: _wry_caches__WEBPACK_IMPORTED_MODULE_5__.WeakCache\n            });\n        }\n    };\n    DocumentTransform.prototype.performWork = function(document) {\n        (0,_getFromAST_js__WEBPACK_IMPORTED_MODULE_6__.checkDocument)(document);\n        return this.transform(document);\n    };\n    DocumentTransform.prototype.transformDocument = function(document) {\n        // If a user passes an already transformed result back to this function,\n        // immediately return it.\n        if (this.resultCache.has(document)) {\n            return document;\n        }\n        var transformedDocument = this.performWork(document);\n        this.resultCache.add(transformedDocument);\n        return transformedDocument;\n    };\n    DocumentTransform.prototype.concat = function(otherTransform) {\n        var _this = this;\n        return Object.assign(new DocumentTransform(function(document) {\n            return otherTransform.transformDocument(_this.transformDocument(document));\n        }, // Reasonably assume both transforms handle their own caching\n        {\n            cache: false\n        }), {\n            left: this,\n            right: otherTransform\n        });\n    };\n    return DocumentTransform;\n}();\n //# sourceMappingURL=DocumentTransform.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/graphql/DocumentTransform.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/graphql/directives.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/graphql/directives.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getDirectiveNames: () => (/* binding */ getDirectiveNames),\n/* harmony export */   getFragmentMaskMode: () => (/* binding */ getFragmentMaskMode),\n/* harmony export */   getInclusionDirectives: () => (/* binding */ getInclusionDirectives),\n/* harmony export */   hasAllDirectives: () => (/* binding */ hasAllDirectives),\n/* harmony export */   hasAnyDirectives: () => (/* binding */ hasAnyDirectives),\n/* harmony export */   hasClientExports: () => (/* binding */ hasClientExports),\n/* harmony export */   hasDirectives: () => (/* binding */ hasDirectives),\n/* harmony export */   shouldInclude: () => (/* binding */ shouldInclude)\n/* harmony export */ });\n/* harmony import */ var _globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! graphql */ \"(ssr)/./node_modules/graphql/language/visitor.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! graphql */ \"(ssr)/./node_modules/graphql/language/kinds.mjs\");\n\n\nfunction shouldInclude(_a, variables) {\n    var directives = _a.directives;\n    if (!directives || !directives.length) {\n        return true;\n    }\n    return getInclusionDirectives(directives).every(function(_a) {\n        var directive = _a.directive, ifArgument = _a.ifArgument;\n        var evaledValue = false;\n        if (ifArgument.value.kind === \"Variable\") {\n            evaledValue = variables && variables[ifArgument.value.name.value];\n            (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(evaledValue !== void 0, 106, directive.name.value);\n        } else {\n            evaledValue = ifArgument.value.value;\n        }\n        return directive.name.value === \"skip\" ? !evaledValue : evaledValue;\n    });\n}\nfunction getDirectiveNames(root) {\n    var names = [];\n    (0,graphql__WEBPACK_IMPORTED_MODULE_1__.visit)(root, {\n        Directive: function(node) {\n            names.push(node.name.value);\n        }\n    });\n    return names;\n}\nvar hasAnyDirectives = function(names, root) {\n    return hasDirectives(names, root, false);\n};\nvar hasAllDirectives = function(names, root) {\n    return hasDirectives(names, root, true);\n};\nfunction hasDirectives(names, root, all) {\n    var nameSet = new Set(names);\n    var uniqueCount = nameSet.size;\n    (0,graphql__WEBPACK_IMPORTED_MODULE_1__.visit)(root, {\n        Directive: function(node) {\n            if (nameSet.delete(node.name.value) && (!all || !nameSet.size)) {\n                return graphql__WEBPACK_IMPORTED_MODULE_1__.BREAK;\n            }\n        }\n    });\n    // If we found all the names, nameSet will be empty. If we only care about\n    // finding some of them, the < condition is sufficient.\n    return all ? !nameSet.size : nameSet.size < uniqueCount;\n}\nfunction hasClientExports(document) {\n    return document && hasDirectives([\n        \"client\",\n        \"export\"\n    ], document, true);\n}\nfunction isInclusionDirective(_a) {\n    var value = _a.name.value;\n    return value === \"skip\" || value === \"include\";\n}\nfunction getInclusionDirectives(directives) {\n    var result = [];\n    if (directives && directives.length) {\n        directives.forEach(function(directive) {\n            if (!isInclusionDirective(directive)) return;\n            var directiveArguments = directive.arguments;\n            var directiveName = directive.name.value;\n            (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(directiveArguments && directiveArguments.length === 1, 107, directiveName);\n            var ifArgument = directiveArguments[0];\n            (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(ifArgument.name && ifArgument.name.value === \"if\", 108, directiveName);\n            var ifValue = ifArgument.value;\n            // means it has to be a variable value if this is a valid @skip or @include directive\n            (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(ifValue && (ifValue.kind === \"Variable\" || ifValue.kind === \"BooleanValue\"), 109, directiveName);\n            result.push({\n                directive: directive,\n                ifArgument: ifArgument\n            });\n        });\n    }\n    return result;\n}\n/** @internal */ function getFragmentMaskMode(fragment) {\n    var _a, _b;\n    var directive = (_a = fragment.directives) === null || _a === void 0 ? void 0 : _a.find(function(_a) {\n        var name = _a.name;\n        return name.value === \"unmask\";\n    });\n    if (!directive) {\n        return \"mask\";\n    }\n    var modeArg = (_b = directive.arguments) === null || _b === void 0 ? void 0 : _b.find(function(_a) {\n        var name = _a.name;\n        return name.value === \"mode\";\n    });\n    if (globalThis.__DEV__ !== false) {\n        if (modeArg) {\n            if (modeArg.value.kind === graphql__WEBPACK_IMPORTED_MODULE_2__.Kind.VARIABLE) {\n                globalThis.__DEV__ !== false && _globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(110);\n            } else if (modeArg.value.kind !== graphql__WEBPACK_IMPORTED_MODULE_2__.Kind.STRING) {\n                globalThis.__DEV__ !== false && _globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(111);\n            } else if (modeArg.value.value !== \"migrate\") {\n                globalThis.__DEV__ !== false && _globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(112, modeArg.value.value);\n            }\n        }\n    }\n    if (modeArg && \"value\" in modeArg.value && modeArg.value.value === \"migrate\") {\n        return \"migrate\";\n    }\n    return \"unmask\";\n} //# sourceMappingURL=directives.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2dyYXBocWwvZGlyZWN0aXZlcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFnRDtBQUNIO0FBQ3RDLFNBQVNJLGNBQWNDLEVBQUUsRUFBRUMsU0FBUztJQUN2QyxJQUFJQyxhQUFhRixHQUFHRSxVQUFVO0lBQzlCLElBQUksQ0FBQ0EsY0FBYyxDQUFDQSxXQUFXQyxNQUFNLEVBQUU7UUFDbkMsT0FBTztJQUNYO0lBQ0EsT0FBT0MsdUJBQXVCRixZQUFZRyxLQUFLLENBQUMsU0FBVUwsRUFBRTtRQUN4RCxJQUFJTSxZQUFZTixHQUFHTSxTQUFTLEVBQUVDLGFBQWFQLEdBQUdPLFVBQVU7UUFDeEQsSUFBSUMsY0FBYztRQUNsQixJQUFJRCxXQUFXRSxLQUFLLENBQUNDLElBQUksS0FBSyxZQUFZO1lBQ3RDRixjQUNJUCxhQUFhQSxTQUFTLENBQUNNLFdBQVdFLEtBQUssQ0FBQ0UsSUFBSSxDQUFDRixLQUFLLENBQUM7WUFDdkRkLDREQUFTQSxDQUFDYSxnQkFBZ0IsS0FBSyxHQUFHLEtBQUtGLFVBQVVLLElBQUksQ0FBQ0YsS0FBSztRQUMvRCxPQUNLO1lBQ0RELGNBQWNELFdBQVdFLEtBQUssQ0FBQ0EsS0FBSztRQUN4QztRQUNBLE9BQU9ILFVBQVVLLElBQUksQ0FBQ0YsS0FBSyxLQUFLLFNBQVMsQ0FBQ0QsY0FBY0E7SUFDNUQ7QUFDSjtBQUNPLFNBQVNJLGtCQUFrQkMsSUFBSTtJQUNsQyxJQUFJQyxRQUFRLEVBQUU7SUFDZGxCLDhDQUFLQSxDQUFDaUIsTUFBTTtRQUNSRSxXQUFXLFNBQVVDLElBQUk7WUFDckJGLE1BQU1HLElBQUksQ0FBQ0QsS0FBS0wsSUFBSSxDQUFDRixLQUFLO1FBQzlCO0lBQ0o7SUFDQSxPQUFPSztBQUNYO0FBQ08sSUFBSUksbUJBQW1CLFNBQVVKLEtBQUssRUFBRUQsSUFBSTtJQUMvQyxPQUFPTSxjQUFjTCxPQUFPRCxNQUFNO0FBQ3RD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QUFXQyxPQUFPLEtBQUssU0FBUy9DLHdEQUFTQSxDQUFDaUQsSUFBSSxDQUFDO1lBQ25ELE9BQ0ssSUFBSUosUUFBUS9CLEtBQUssQ0FBQ0MsSUFBSSxLQUFLWix5Q0FBSUEsQ0FBQytDLE1BQU0sRUFBRTtnQkFDekNKLFdBQVdDLE9BQU8sS0FBSyxTQUFTL0Msd0RBQVNBLENBQUNpRCxJQUFJLENBQUM7WUFDbkQsT0FDSyxJQUFJSixRQUFRL0IsS0FBSyxDQUFDQSxLQUFLLEtBQUssV0FBVztnQkFDeENnQyxXQUFXQyxPQUFPLEtBQUssU0FBUy9DLHdEQUFTQSxDQUFDaUQsSUFBSSxDQUFDLEtBQUtKLFFBQVEvQixLQUFLLENBQUNBLEtBQUs7WUFDM0U7UUFDSjtJQUNKO0lBQ0EsSUFBSStCLFdBQ0EsV0FBV0EsUUFBUS9CLEtBQUssSUFDeEIrQixRQUFRL0IsS0FBSyxDQUFDQSxLQUFLLEtBQUssV0FBVztRQUNuQyxPQUFPO0lBQ1g7SUFDQSxPQUFPO0FBQ1gsRUFDQSxzQ0FBc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbGFjay1ncmFwaHFsLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L3V0aWxpdGllcy9ncmFwaHFsL2RpcmVjdGl2ZXMuanM/ZTAwMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpbnZhcmlhbnQgfSBmcm9tIFwiLi4vZ2xvYmFscy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgdmlzaXQsIEJSRUFLLCBLaW5kIH0gZnJvbSBcImdyYXBocWxcIjtcbmV4cG9ydCBmdW5jdGlvbiBzaG91bGRJbmNsdWRlKF9hLCB2YXJpYWJsZXMpIHtcbiAgICB2YXIgZGlyZWN0aXZlcyA9IF9hLmRpcmVjdGl2ZXM7XG4gICAgaWYgKCFkaXJlY3RpdmVzIHx8ICFkaXJlY3RpdmVzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGdldEluY2x1c2lvbkRpcmVjdGl2ZXMoZGlyZWN0aXZlcykuZXZlcnkoZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHZhciBkaXJlY3RpdmUgPSBfYS5kaXJlY3RpdmUsIGlmQXJndW1lbnQgPSBfYS5pZkFyZ3VtZW50O1xuICAgICAgICB2YXIgZXZhbGVkVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgaWYgKGlmQXJndW1lbnQudmFsdWUua2luZCA9PT0gXCJWYXJpYWJsZVwiKSB7XG4gICAgICAgICAgICBldmFsZWRWYWx1ZSA9XG4gICAgICAgICAgICAgICAgdmFyaWFibGVzICYmIHZhcmlhYmxlc1tpZkFyZ3VtZW50LnZhbHVlLm5hbWUudmFsdWVdO1xuICAgICAgICAgICAgaW52YXJpYW50KGV2YWxlZFZhbHVlICE9PSB2b2lkIDAsIDEwNiwgZGlyZWN0aXZlLm5hbWUudmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZXZhbGVkVmFsdWUgPSBpZkFyZ3VtZW50LnZhbHVlLnZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkaXJlY3RpdmUubmFtZS52YWx1ZSA9PT0gXCJza2lwXCIgPyAhZXZhbGVkVmFsdWUgOiBldmFsZWRWYWx1ZTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXREaXJlY3RpdmVOYW1lcyhyb290KSB7XG4gICAgdmFyIG5hbWVzID0gW107XG4gICAgdmlzaXQocm9vdCwge1xuICAgICAgICBEaXJlY3RpdmU6IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICBuYW1lcy5wdXNoKG5vZGUubmFtZS52YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgfSk7XG4gICAgcmV0dXJuIG5hbWVzO1xufVxuZXhwb3J0IHZhciBoYXNBbnlEaXJlY3RpdmVzID0gZnVuY3Rpb24gKG5hbWVzLCByb290KSB7XG4gICAgcmV0dXJuIGhhc0RpcmVjdGl2ZXMobmFtZXMsIHJvb3QsIGZhbHNlKTtcbn07XG5leHBvcnQgdmFyIGhhc0FsbERpcmVjdGl2ZXMgPSBmdW5jdGlvbiAobmFtZXMsIHJvb3QpIHtcbiAgICByZXR1cm4gaGFzRGlyZWN0aXZlcyhuYW1lcywgcm9vdCwgdHJ1ZSk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIGhhc0RpcmVjdGl2ZXMobmFtZXMsIHJvb3QsIGFsbCkge1xuICAgIHZhciBuYW1lU2V0ID0gbmV3IFNldChuYW1lcyk7XG4gICAgdmFyIHVuaXF1ZUNvdW50ID0gbmFtZVNldC5zaXplO1xuICAgIHZpc2l0KHJvb3QsIHtcbiAgICAgICAgRGlyZWN0aXZlOiBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgaWYgKG5hbWVTZXQuZGVsZXRlKG5vZGUubmFtZS52YWx1ZSkgJiYgKCFhbGwgfHwgIW5hbWVTZXQuc2l6ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gQlJFQUs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfSk7XG4gICAgLy8gSWYgd2UgZm91bmQgYWxsIHRoZSBuYW1lcywgbmFtZVNldCB3aWxsIGJlIGVtcHR5LiBJZiB3ZSBvbmx5IGNhcmUgYWJvdXRcbiAgICAvLyBmaW5kaW5nIHNvbWUgb2YgdGhlbSwgdGhlIDwgY29uZGl0aW9uIGlzIHN1ZmZpY2llbnQuXG4gICAgcmV0dXJuIGFsbCA/ICFuYW1lU2V0LnNpemUgOiBuYW1lU2V0LnNpemUgPCB1bmlxdWVDb3VudDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBoYXNDbGllbnRFeHBvcnRzKGRvY3VtZW50KSB7XG4gICAgcmV0dXJuIGRvY3VtZW50ICYmIGhhc0RpcmVjdGl2ZXMoW1wiY2xpZW50XCIsIFwiZXhwb3J0XCJdLCBkb2N1bWVudCwgdHJ1ZSk7XG59XG5mdW5jdGlvbiBpc0luY2x1c2lvbkRpcmVjdGl2ZShfYSkge1xuICAgIHZhciB2YWx1ZSA9IF9hLm5hbWUudmFsdWU7XG4gICAgcmV0dXJuIHZhbHVlID09PSBcInNraXBcIiB8fCB2YWx1ZSA9PT0gXCJpbmNsdWRlXCI7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0SW5jbHVzaW9uRGlyZWN0aXZlcyhkaXJlY3RpdmVzKSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIGlmIChkaXJlY3RpdmVzICYmIGRpcmVjdGl2ZXMubGVuZ3RoKSB7XG4gICAgICAgIGRpcmVjdGl2ZXMuZm9yRWFjaChmdW5jdGlvbiAoZGlyZWN0aXZlKSB7XG4gICAgICAgICAgICBpZiAoIWlzSW5jbHVzaW9uRGlyZWN0aXZlKGRpcmVjdGl2ZSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgdmFyIGRpcmVjdGl2ZUFyZ3VtZW50cyA9IGRpcmVjdGl2ZS5hcmd1bWVudHM7XG4gICAgICAgICAgICB2YXIgZGlyZWN0aXZlTmFtZSA9IGRpcmVjdGl2ZS5uYW1lLnZhbHVlO1xuICAgICAgICAgICAgaW52YXJpYW50KGRpcmVjdGl2ZUFyZ3VtZW50cyAmJiBkaXJlY3RpdmVBcmd1bWVudHMubGVuZ3RoID09PSAxLCAxMDcsIGRpcmVjdGl2ZU5hbWUpO1xuICAgICAgICAgICAgdmFyIGlmQXJndW1lbnQgPSBkaXJlY3RpdmVBcmd1bWVudHNbMF07XG4gICAgICAgICAgICBpbnZhcmlhbnQoaWZBcmd1bWVudC5uYW1lICYmIGlmQXJndW1lbnQubmFtZS52YWx1ZSA9PT0gXCJpZlwiLCAxMDgsIGRpcmVjdGl2ZU5hbWUpO1xuICAgICAgICAgICAgdmFyIGlmVmFsdWUgPSBpZkFyZ3VtZW50LnZhbHVlO1xuICAgICAgICAgICAgLy8gbWVhbnMgaXQgaGFzIHRvIGJlIGEgdmFyaWFibGUgdmFsdWUgaWYgdGhpcyBpcyBhIHZhbGlkIEBza2lwIG9yIEBpbmNsdWRlIGRpcmVjdGl2ZVxuICAgICAgICAgICAgaW52YXJpYW50KGlmVmFsdWUgJiZcbiAgICAgICAgICAgICAgICAoaWZWYWx1ZS5raW5kID09PSBcIlZhcmlhYmxlXCIgfHwgaWZWYWx1ZS5raW5kID09PSBcIkJvb2xlYW5WYWx1ZVwiKSwgMTA5LCBkaXJlY3RpdmVOYW1lKTtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHsgZGlyZWN0aXZlOiBkaXJlY3RpdmUsIGlmQXJndW1lbnQ6IGlmQXJndW1lbnQgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEZyYWdtZW50TWFza01vZGUoZnJhZ21lbnQpIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIHZhciBkaXJlY3RpdmUgPSAoX2EgPSBmcmFnbWVudC5kaXJlY3RpdmVzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZmluZChmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgdmFyIG5hbWUgPSBfYS5uYW1lO1xuICAgICAgICByZXR1cm4gbmFtZS52YWx1ZSA9PT0gXCJ1bm1hc2tcIjtcbiAgICB9KTtcbiAgICBpZiAoIWRpcmVjdGl2ZSkge1xuICAgICAgICByZXR1cm4gXCJtYXNrXCI7XG4gICAgfVxuICAgIHZhciBtb2RlQXJnID0gKF9iID0gZGlyZWN0aXZlLmFyZ3VtZW50cykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmZpbmQoZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHZhciBuYW1lID0gX2EubmFtZTtcbiAgICAgICAgcmV0dXJuIG5hbWUudmFsdWUgPT09IFwibW9kZVwiO1xuICAgIH0pO1xuICAgIGlmIChnbG9iYWxUaGlzLl9fREVWX18gIT09IGZhbHNlKSB7XG4gICAgICAgIGlmIChtb2RlQXJnKSB7XG4gICAgICAgICAgICBpZiAobW9kZUFyZy52YWx1ZS5raW5kID09PSBLaW5kLlZBUklBQkxFKSB7XG4gICAgICAgICAgICAgICAgZ2xvYmFsVGhpcy5fX0RFVl9fICE9PSBmYWxzZSAmJiBpbnZhcmlhbnQud2FybigxMTApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobW9kZUFyZy52YWx1ZS5raW5kICE9PSBLaW5kLlNUUklORykge1xuICAgICAgICAgICAgICAgIGdsb2JhbFRoaXMuX19ERVZfXyAhPT0gZmFsc2UgJiYgaW52YXJpYW50Lndhcm4oMTExKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG1vZGVBcmcudmFsdWUudmFsdWUgIT09IFwibWlncmF0ZVwiKSB7XG4gICAgICAgICAgICAgICAgZ2xvYmFsVGhpcy5fX0RFVl9fICE9PSBmYWxzZSAmJiBpbnZhcmlhbnQud2FybigxMTIsIG1vZGVBcmcudmFsdWUudmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChtb2RlQXJnICYmXG4gICAgICAgIFwidmFsdWVcIiBpbiBtb2RlQXJnLnZhbHVlICYmXG4gICAgICAgIG1vZGVBcmcudmFsdWUudmFsdWUgPT09IFwibWlncmF0ZVwiKSB7XG4gICAgICAgIHJldHVybiBcIm1pZ3JhdGVcIjtcbiAgICB9XG4gICAgcmV0dXJuIFwidW5tYXNrXCI7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kaXJlY3RpdmVzLmpzLm1hcCJdLCJuYW1lcyI6WyJpbnZhcmlhbnQiLCJ2aXNpdCIsIkJSRUFLIiwiS2luZCIsInNob3VsZEluY2x1ZGUiLCJfYSIsInZhcmlhYmxlcyIsImRpcmVjdGl2ZXMiLCJsZW5ndGgiLCJnZXRJbmNsdXNpb25EaXJlY3RpdmVzIiwiZXZlcnkiLCJkaXJlY3RpdmUiLCJpZkFyZ3VtZW50IiwiZXZhbGVkVmFsdWUiLCJ2YWx1ZSIsImtpbmQiLCJuYW1lIiwiZ2V0RGlyZWN0aXZlTmFtZXMiLCJyb290IiwibmFtZXMiLCJEaXJlY3RpdmUiLCJub2RlIiwicHVzaCIsImhhc0FueURpcmVjdGl2ZXMiLCJoYXNEaXJlY3RpdmVzIiwiaGFzQWxsRGlyZWN0aXZlcyIsImFsbCIsIm5hbWVTZXQiLCJTZXQiLCJ1bmlxdWVDb3VudCIsInNpemUiLCJkZWxldGUiLCJoYXNDbGllbnRFeHBvcnRzIiwiZG9jdW1lbnQiLCJpc0luY2x1c2lvbkRpcmVjdGl2ZSIsInJlc3VsdCIsImZvckVhY2giLCJkaXJlY3RpdmVBcmd1bWVudHMiLCJhcmd1bWVudHMiLCJkaXJlY3RpdmVOYW1lIiwiaWZWYWx1ZSIsImdldEZyYWdtZW50TWFza01vZGUiLCJmcmFnbWVudCIsIl9iIiwiZmluZCIsIm1vZGVBcmciLCJnbG9iYWxUaGlzIiwiX19ERVZfXyIsIlZBUklBQkxFIiwid2FybiIsIlNUUklORyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/graphql/directives.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/graphql/fragments.js":
/*!********************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/graphql/fragments.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createFragmentMap: () => (/* binding */ createFragmentMap),\n/* harmony export */   getFragmentFromSelection: () => (/* binding */ getFragmentFromSelection),\n/* harmony export */   getFragmentQueryDocument: () => (/* binding */ getFragmentQueryDocument),\n/* harmony export */   isFullyUnmaskedOperation: () => (/* binding */ isFullyUnmaskedOperation)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! graphql */ \"(ssr)/./node_modules/graphql/language/visitor.mjs\");\n\n\n\n/**\n * Returns a query document which adds a single query operation that only\n * spreads the target fragment inside of it.\n *\n * So for example a document of:\n *\n * ```graphql\n * fragment foo on Foo { a b c }\n * ```\n *\n * Turns into:\n *\n * ```graphql\n * { ...foo }\n *\n * fragment foo on Foo { a b c }\n * ```\n *\n * The target fragment will either be the only fragment in the document, or a\n * fragment specified by the provided `fragmentName`. If there is more than one\n * fragment, but a `fragmentName` was not defined then an error will be thrown.\n */ function getFragmentQueryDocument(document, fragmentName) {\n    var actualFragmentName = fragmentName;\n    // Build an array of all our fragment definitions that will be used for\n    // validations. We also do some validations on the other definitions in the\n    // document while building this list.\n    var fragments = [];\n    document.definitions.forEach(function(definition) {\n        // Throw an error if we encounter an operation definition because we will\n        // define our own operation definition later on.\n        if (definition.kind === \"OperationDefinition\") {\n            throw (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(113, definition.operation, definition.name ? \" named '\".concat(definition.name.value, \"'\") : \"\");\n        }\n        // Add our definition to the fragments array if it is a fragment\n        // definition.\n        if (definition.kind === \"FragmentDefinition\") {\n            fragments.push(definition);\n        }\n    });\n    // If the user did not give us a fragment name then let us try to get a\n    // name from a single fragment in the definition.\n    if (typeof actualFragmentName === \"undefined\") {\n        (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(fragments.length === 1, 114, fragments.length);\n        actualFragmentName = fragments[0].name.value;\n    }\n    // Generate a query document with an operation that simply spreads the\n    // fragment inside of it.\n    var query = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, document), {\n        definitions: (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([\n            {\n                kind: \"OperationDefinition\",\n                // OperationTypeNode is an enum\n                operation: \"query\",\n                selectionSet: {\n                    kind: \"SelectionSet\",\n                    selections: [\n                        {\n                            kind: \"FragmentSpread\",\n                            name: {\n                                kind: \"Name\",\n                                value: actualFragmentName\n                            }\n                        }\n                    ]\n                }\n            }\n        ], document.definitions, true)\n    });\n    return query;\n}\n// Utility function that takes a list of fragment definitions and makes a hash out of them\n// that maps the name of the fragment to the fragment definition.\nfunction createFragmentMap(fragments) {\n    if (fragments === void 0) {\n        fragments = [];\n    }\n    var symTable = {};\n    fragments.forEach(function(fragment) {\n        symTable[fragment.name.value] = fragment;\n    });\n    return symTable;\n}\nfunction getFragmentFromSelection(selection, fragmentMap) {\n    switch(selection.kind){\n        case \"InlineFragment\":\n            return selection;\n        case \"FragmentSpread\":\n            {\n                var fragmentName = selection.name.value;\n                if (typeof fragmentMap === \"function\") {\n                    return fragmentMap(fragmentName);\n                }\n                var fragment = fragmentMap && fragmentMap[fragmentName];\n                (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(fragment, 115, fragmentName);\n                return fragment || null;\n            }\n        default:\n            return null;\n    }\n}\nfunction isFullyUnmaskedOperation(document) {\n    var isUnmasked = true;\n    (0,graphql__WEBPACK_IMPORTED_MODULE_2__.visit)(document, {\n        FragmentSpread: function(node) {\n            isUnmasked = !!node.directives && node.directives.some(function(directive) {\n                return directive.name.value === \"unmask\";\n            });\n            if (!isUnmasked) {\n                return graphql__WEBPACK_IMPORTED_MODULE_2__.BREAK;\n            }\n        }\n    });\n    return isUnmasked;\n} //# sourceMappingURL=fragments.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/graphql/fragments.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/graphql/getFromAST.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkDocument: () => (/* binding */ checkDocument),\n/* harmony export */   getDefaultValues: () => (/* binding */ getDefaultValues),\n/* harmony export */   getFragmentDefinition: () => (/* binding */ getFragmentDefinition),\n/* harmony export */   getFragmentDefinitions: () => (/* binding */ getFragmentDefinitions),\n/* harmony export */   getMainDefinition: () => (/* binding */ getMainDefinition),\n/* harmony export */   getOperationDefinition: () => (/* binding */ getOperationDefinition),\n/* harmony export */   getOperationName: () => (/* binding */ getOperationName),\n/* harmony export */   getQueryDefinition: () => (/* binding */ getQueryDefinition)\n/* harmony export */ });\n/* harmony import */ var _globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _storeUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./storeUtils.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n\n\n// Checks the document for errors and throws an exception if there is an error.\nfunction checkDocument(doc) {\n    (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(doc && doc.kind === \"Document\", 116);\n    var operations = doc.definitions.filter(function(d) {\n        return d.kind !== \"FragmentDefinition\";\n    }).map(function(definition) {\n        if (definition.kind !== \"OperationDefinition\") {\n            throw (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(117, definition.kind);\n        }\n        return definition;\n    });\n    (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(operations.length <= 1, 118, operations.length);\n    return doc;\n}\nfunction getOperationDefinition(doc) {\n    checkDocument(doc);\n    return doc.definitions.filter(function(definition) {\n        return definition.kind === \"OperationDefinition\";\n    })[0];\n}\nfunction getOperationName(doc) {\n    return doc.definitions.filter(function(definition) {\n        return definition.kind === \"OperationDefinition\" && !!definition.name;\n    }).map(function(x) {\n        return x.name.value;\n    })[0] || null;\n}\n// Returns the FragmentDefinitions from a particular document as an array\nfunction getFragmentDefinitions(doc) {\n    return doc.definitions.filter(function(definition) {\n        return definition.kind === \"FragmentDefinition\";\n    });\n}\nfunction getQueryDefinition(doc) {\n    var queryDef = getOperationDefinition(doc);\n    (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(queryDef && queryDef.operation === \"query\", 119);\n    return queryDef;\n}\nfunction getFragmentDefinition(doc) {\n    (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(doc.kind === \"Document\", 120);\n    (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(doc.definitions.length <= 1, 121);\n    var fragmentDef = doc.definitions[0];\n    (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(fragmentDef.kind === \"FragmentDefinition\", 122);\n    return fragmentDef;\n}\n/**\n * Returns the first operation definition found in this document.\n * If no operation definition is found, the first fragment definition will be returned.\n * If no definitions are found, an error will be thrown.\n */ function getMainDefinition(queryDoc) {\n    checkDocument(queryDoc);\n    var fragmentDefinition;\n    for(var _i = 0, _a = queryDoc.definitions; _i < _a.length; _i++){\n        var definition = _a[_i];\n        if (definition.kind === \"OperationDefinition\") {\n            var operation = definition.operation;\n            if (operation === \"query\" || operation === \"mutation\" || operation === \"subscription\") {\n                return definition;\n            }\n        }\n        if (definition.kind === \"FragmentDefinition\" && !fragmentDefinition) {\n            // we do this because we want to allow multiple fragment definitions\n            // to precede an operation definition.\n            fragmentDefinition = definition;\n        }\n    }\n    if (fragmentDefinition) {\n        return fragmentDefinition;\n    }\n    throw (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(123);\n}\nfunction getDefaultValues(definition) {\n    var defaultValues = Object.create(null);\n    var defs = definition && definition.variableDefinitions;\n    if (defs && defs.length) {\n        defs.forEach(function(def) {\n            if (def.defaultValue) {\n                (0,_storeUtils_js__WEBPACK_IMPORTED_MODULE_1__.valueToObjectRepresentation)(defaultValues, def.variable.name, def.defaultValue);\n            }\n        });\n    }\n    return defaultValues;\n} //# sourceMappingURL=getFromAST.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/graphql/print.js":
/*!****************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/graphql/print.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   print: () => (/* binding */ print)\n/* harmony export */ });\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql */ \"(ssr)/./node_modules/graphql/language/printer.mjs\");\n/* harmony import */ var _caching_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../caching/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/caches.js\");\n/* harmony import */ var _caching_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../caching/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/sizes.js\");\n/* harmony import */ var _caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../caching/getMemoryInternals.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/getMemoryInternals.js\");\n\n\n\nvar printCache;\nvar print = Object.assign(function(ast) {\n    var result = printCache.get(ast);\n    if (!result) {\n        result = (0,graphql__WEBPACK_IMPORTED_MODULE_0__.print)(ast);\n        printCache.set(ast, result);\n    }\n    return result;\n}, {\n    reset: function() {\n        printCache = new _caching_index_js__WEBPACK_IMPORTED_MODULE_1__.AutoCleanedWeakCache(_caching_index_js__WEBPACK_IMPORTED_MODULE_2__.cacheSizes.print || 2000 /* defaultCacheSizes.print */ );\n    }\n});\nprint.reset();\nif (globalThis.__DEV__ !== false) {\n    (0,_caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_3__.registerGlobalCache)(\"print\", function() {\n        return printCache ? printCache.size : 0;\n    });\n} //# sourceMappingURL=print.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2dyYXBocWwvcHJpbnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBNkM7QUFDMkI7QUFDRDtBQUN2RSxJQUFJSztBQUNHLElBQUlMLFFBQVFNLE9BQU9DLE1BQU0sQ0FBQyxTQUFVQyxHQUFHO0lBQzFDLElBQUlDLFNBQVNKLFdBQVdLLEdBQUcsQ0FBQ0Y7SUFDNUIsSUFBSSxDQUFDQyxRQUFRO1FBQ1RBLFNBQVNSLDhDQUFTQSxDQUFDTztRQUNuQkgsV0FBV00sR0FBRyxDQUFDSCxLQUFLQztJQUN4QjtJQUNBLE9BQU9BO0FBQ1gsR0FBRztJQUNDRyxPQUFPO1FBQ0hQLGFBQWEsSUFBSUgsbUVBQW9CQSxDQUFDQyx5REFBVUEsQ0FBQ0gsS0FBSyxJQUFJLEtBQUssMkJBQTJCO0lBQzlGO0FBQ0osR0FBRztBQUNIQSxNQUFNWSxLQUFLO0FBQ1gsSUFBSUMsV0FBV0MsT0FBTyxLQUFLLE9BQU87SUFDOUJWLG1GQUFtQkEsQ0FBQyxTQUFTO1FBQWMsT0FBUUMsYUFBYUEsV0FBV1UsSUFBSSxHQUFHO0lBQUk7QUFDMUYsRUFDQSxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbGFjay1ncmFwaHFsLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L3V0aWxpdGllcy9ncmFwaHFsL3ByaW50LmpzP2UyOGQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcHJpbnQgYXMgb3JpZ1ByaW50IH0gZnJvbSBcImdyYXBocWxcIjtcbmltcG9ydCB7IEF1dG9DbGVhbmVkV2Vha0NhY2hlLCBjYWNoZVNpemVzLCB9IGZyb20gXCIuLi9jYWNoaW5nL2luZGV4LmpzXCI7XG5pbXBvcnQgeyByZWdpc3Rlckdsb2JhbENhY2hlIH0gZnJvbSBcIi4uL2NhY2hpbmcvZ2V0TWVtb3J5SW50ZXJuYWxzLmpzXCI7XG52YXIgcHJpbnRDYWNoZTtcbmV4cG9ydCB2YXIgcHJpbnQgPSBPYmplY3QuYXNzaWduKGZ1bmN0aW9uIChhc3QpIHtcbiAgICB2YXIgcmVzdWx0ID0gcHJpbnRDYWNoZS5nZXQoYXN0KTtcbiAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICByZXN1bHQgPSBvcmlnUHJpbnQoYXN0KTtcbiAgICAgICAgcHJpbnRDYWNoZS5zZXQoYXN0LCByZXN1bHQpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufSwge1xuICAgIHJlc2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHByaW50Q2FjaGUgPSBuZXcgQXV0b0NsZWFuZWRXZWFrQ2FjaGUoY2FjaGVTaXplcy5wcmludCB8fCAyMDAwIC8qIGRlZmF1bHRDYWNoZVNpemVzLnByaW50ICovKTtcbiAgICB9LFxufSk7XG5wcmludC5yZXNldCgpO1xuaWYgKGdsb2JhbFRoaXMuX19ERVZfXyAhPT0gZmFsc2UpIHtcbiAgICByZWdpc3Rlckdsb2JhbENhY2hlKFwicHJpbnRcIiwgZnVuY3Rpb24gKCkgeyByZXR1cm4gKHByaW50Q2FjaGUgPyBwcmludENhY2hlLnNpemUgOiAwKTsgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcmludC5qcy5tYXAiXSwibmFtZXMiOlsicHJpbnQiLCJvcmlnUHJpbnQiLCJBdXRvQ2xlYW5lZFdlYWtDYWNoZSIsImNhY2hlU2l6ZXMiLCJyZWdpc3Rlckdsb2JhbENhY2hlIiwicHJpbnRDYWNoZSIsIk9iamVjdCIsImFzc2lnbiIsImFzdCIsInJlc3VsdCIsImdldCIsInNldCIsInJlc2V0IiwiZ2xvYmFsVGhpcyIsIl9fREVWX18iLCJzaXplIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/graphql/print.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/graphql/storeUtils.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   argumentsObjectFromField: () => (/* binding */ argumentsObjectFromField),\n/* harmony export */   getStoreKeyName: () => (/* binding */ getStoreKeyName),\n/* harmony export */   getTypenameFromResult: () => (/* binding */ getTypenameFromResult),\n/* harmony export */   isDocumentNode: () => (/* binding */ isDocumentNode),\n/* harmony export */   isField: () => (/* binding */ isField),\n/* harmony export */   isInlineFragment: () => (/* binding */ isInlineFragment),\n/* harmony export */   isReference: () => (/* binding */ isReference),\n/* harmony export */   makeReference: () => (/* binding */ makeReference),\n/* harmony export */   resultKeyNameFromField: () => (/* binding */ resultKeyNameFromField),\n/* harmony export */   storeKeyNameFromField: () => (/* binding */ storeKeyNameFromField),\n/* harmony export */   valueToObjectRepresentation: () => (/* binding */ valueToObjectRepresentation)\n/* harmony export */ });\n/* harmony import */ var _globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _common_objects_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/objects.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/objects.js\");\n/* harmony import */ var _fragments_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./fragments.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/fragments.js\");\n/* harmony import */ var _common_canonicalStringify_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/canonicalStringify.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canonicalStringify.js\");\n\n\n\n\nfunction makeReference(id) {\n    return {\n        __ref: String(id)\n    };\n}\nfunction isReference(obj) {\n    return Boolean(obj && typeof obj === \"object\" && typeof obj.__ref === \"string\");\n}\nfunction isDocumentNode(value) {\n    return (0,_common_objects_js__WEBPACK_IMPORTED_MODULE_1__.isNonNullObject)(value) && value.kind === \"Document\" && Array.isArray(value.definitions);\n}\nfunction isStringValue(value) {\n    return value.kind === \"StringValue\";\n}\nfunction isBooleanValue(value) {\n    return value.kind === \"BooleanValue\";\n}\nfunction isIntValue(value) {\n    return value.kind === \"IntValue\";\n}\nfunction isFloatValue(value) {\n    return value.kind === \"FloatValue\";\n}\nfunction isVariable(value) {\n    return value.kind === \"Variable\";\n}\nfunction isObjectValue(value) {\n    return value.kind === \"ObjectValue\";\n}\nfunction isListValue(value) {\n    return value.kind === \"ListValue\";\n}\nfunction isEnumValue(value) {\n    return value.kind === \"EnumValue\";\n}\nfunction isNullValue(value) {\n    return value.kind === \"NullValue\";\n}\nfunction valueToObjectRepresentation(argObj, name, value, variables) {\n    if (isIntValue(value) || isFloatValue(value)) {\n        argObj[name.value] = Number(value.value);\n    } else if (isBooleanValue(value) || isStringValue(value)) {\n        argObj[name.value] = value.value;\n    } else if (isObjectValue(value)) {\n        var nestedArgObj_1 = {};\n        value.fields.map(function(obj) {\n            return valueToObjectRepresentation(nestedArgObj_1, obj.name, obj.value, variables);\n        });\n        argObj[name.value] = nestedArgObj_1;\n    } else if (isVariable(value)) {\n        var variableValue = (variables || {})[value.name.value];\n        argObj[name.value] = variableValue;\n    } else if (isListValue(value)) {\n        argObj[name.value] = value.values.map(function(listValue) {\n            var nestedArgArrayObj = {};\n            valueToObjectRepresentation(nestedArgArrayObj, name, listValue, variables);\n            return nestedArgArrayObj[name.value];\n        });\n    } else if (isEnumValue(value)) {\n        argObj[name.value] = value.value;\n    } else if (isNullValue(value)) {\n        argObj[name.value] = null;\n    } else {\n        throw (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(124, name.value, value.kind);\n    }\n}\nfunction storeKeyNameFromField(field, variables) {\n    var directivesObj = null;\n    if (field.directives) {\n        directivesObj = {};\n        field.directives.forEach(function(directive) {\n            directivesObj[directive.name.value] = {};\n            if (directive.arguments) {\n                directive.arguments.forEach(function(_a) {\n                    var name = _a.name, value = _a.value;\n                    return valueToObjectRepresentation(directivesObj[directive.name.value], name, value, variables);\n                });\n            }\n        });\n    }\n    var argObj = null;\n    if (field.arguments && field.arguments.length) {\n        argObj = {};\n        field.arguments.forEach(function(_a) {\n            var name = _a.name, value = _a.value;\n            return valueToObjectRepresentation(argObj, name, value, variables);\n        });\n    }\n    return getStoreKeyName(field.name.value, argObj, directivesObj);\n}\nvar KNOWN_DIRECTIVES = [\n    \"connection\",\n    \"include\",\n    \"skip\",\n    \"client\",\n    \"rest\",\n    \"export\",\n    \"nonreactive\"\n];\n// Default stable JSON.stringify implementation used by getStoreKeyName. Can be\n// updated/replaced with something better by calling\n// getStoreKeyName.setStringify(newStringifyFunction).\nvar storeKeyNameStringify = _common_canonicalStringify_js__WEBPACK_IMPORTED_MODULE_2__.canonicalStringify;\nvar getStoreKeyName = Object.assign(function(fieldName, args, directives) {\n    if (args && directives && directives[\"connection\"] && directives[\"connection\"][\"key\"]) {\n        if (directives[\"connection\"][\"filter\"] && directives[\"connection\"][\"filter\"].length > 0) {\n            var filterKeys = directives[\"connection\"][\"filter\"] ? directives[\"connection\"][\"filter\"] : [];\n            filterKeys.sort();\n            var filteredArgs_1 = {};\n            filterKeys.forEach(function(key) {\n                filteredArgs_1[key] = args[key];\n            });\n            return \"\".concat(directives[\"connection\"][\"key\"], \"(\").concat(storeKeyNameStringify(filteredArgs_1), \")\");\n        } else {\n            return directives[\"connection\"][\"key\"];\n        }\n    }\n    var completeFieldName = fieldName;\n    if (args) {\n        // We can't use `JSON.stringify` here since it's non-deterministic,\n        // and can lead to different store key names being created even though\n        // the `args` object used during creation has the same properties/values.\n        var stringifiedArgs = storeKeyNameStringify(args);\n        completeFieldName += \"(\".concat(stringifiedArgs, \")\");\n    }\n    if (directives) {\n        Object.keys(directives).forEach(function(key) {\n            if (KNOWN_DIRECTIVES.indexOf(key) !== -1) return;\n            if (directives[key] && Object.keys(directives[key]).length) {\n                completeFieldName += \"@\".concat(key, \"(\").concat(storeKeyNameStringify(directives[key]), \")\");\n            } else {\n                completeFieldName += \"@\".concat(key);\n            }\n        });\n    }\n    return completeFieldName;\n}, {\n    setStringify: function(s) {\n        var previous = storeKeyNameStringify;\n        storeKeyNameStringify = s;\n        return previous;\n    }\n});\nfunction argumentsObjectFromField(field, variables) {\n    if (field.arguments && field.arguments.length) {\n        var argObj_1 = {};\n        field.arguments.forEach(function(_a) {\n            var name = _a.name, value = _a.value;\n            return valueToObjectRepresentation(argObj_1, name, value, variables);\n        });\n        return argObj_1;\n    }\n    return null;\n}\nfunction resultKeyNameFromField(field) {\n    return field.alias ? field.alias.value : field.name.value;\n}\nfunction getTypenameFromResult(result, selectionSet, fragmentMap) {\n    var fragments;\n    for(var _i = 0, _a = selectionSet.selections; _i < _a.length; _i++){\n        var selection = _a[_i];\n        if (isField(selection)) {\n            if (selection.name.value === \"__typename\") {\n                return result[resultKeyNameFromField(selection)];\n            }\n        } else if (fragments) {\n            fragments.push(selection);\n        } else {\n            fragments = [\n                selection\n            ];\n        }\n    }\n    if (typeof result.__typename === \"string\") {\n        return result.__typename;\n    }\n    if (fragments) {\n        for(var _b = 0, fragments_1 = fragments; _b < fragments_1.length; _b++){\n            var selection = fragments_1[_b];\n            var typename = getTypenameFromResult(result, (0,_fragments_js__WEBPACK_IMPORTED_MODULE_3__.getFragmentFromSelection)(selection, fragmentMap).selectionSet, fragmentMap);\n            if (typeof typename === \"string\") {\n                return typename;\n            }\n        }\n    }\n}\nfunction isField(selection) {\n    return selection.kind === \"Field\";\n}\nfunction isInlineFragment(selection) {\n    return selection.kind === \"InlineFragment\";\n} //# sourceMappingURL=storeUtils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/graphql/transform.js":
/*!********************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/graphql/transform.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addNonReactiveToNamedFragments: () => (/* binding */ addNonReactiveToNamedFragments),\n/* harmony export */   addTypenameToDocument: () => (/* binding */ addTypenameToDocument),\n/* harmony export */   buildQueryFromSelectionSet: () => (/* binding */ buildQueryFromSelectionSet),\n/* harmony export */   removeArgumentsFromDocument: () => (/* binding */ removeArgumentsFromDocument),\n/* harmony export */   removeClientSetsFromDocument: () => (/* binding */ removeClientSetsFromDocument),\n/* harmony export */   removeConnectionDirectiveFromDocument: () => (/* binding */ removeConnectionDirectiveFromDocument),\n/* harmony export */   removeDirectivesFromDocument: () => (/* binding */ removeDirectivesFromDocument),\n/* harmony export */   removeFragmentSpreadFromDocument: () => (/* binding */ removeFragmentSpreadFromDocument)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! graphql */ \"(ssr)/./node_modules/graphql/language/kinds.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! graphql */ \"(ssr)/./node_modules/graphql/language/visitor.mjs\");\n/* harmony import */ var _getFromAST_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getFromAST.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n/* harmony import */ var _storeUtils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./storeUtils.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _fragments_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./fragments.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/fragments.js\");\n/* harmony import */ var _common_arrays_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../common/arrays.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n\n\n\n\n\n\n\nvar TYPENAME_FIELD = {\n    kind: graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.FIELD,\n    name: {\n        kind: graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.NAME,\n        value: \"__typename\"\n    }\n};\nfunction isEmpty(op, fragmentMap) {\n    return !op || op.selectionSet.selections.every(function(selection) {\n        return selection.kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.FRAGMENT_SPREAD && isEmpty(fragmentMap[selection.name.value], fragmentMap);\n    });\n}\nfunction nullIfDocIsEmpty(doc) {\n    return isEmpty((0,_getFromAST_js__WEBPACK_IMPORTED_MODULE_2__.getOperationDefinition)(doc) || (0,_getFromAST_js__WEBPACK_IMPORTED_MODULE_2__.getFragmentDefinition)(doc), (0,_fragments_js__WEBPACK_IMPORTED_MODULE_3__.createFragmentMap)((0,_getFromAST_js__WEBPACK_IMPORTED_MODULE_2__.getFragmentDefinitions)(doc))) ? null : doc;\n}\nfunction getDirectiveMatcher(configs) {\n    var names = new Map();\n    var tests = new Map();\n    configs.forEach(function(directive) {\n        if (directive) {\n            if (directive.name) {\n                names.set(directive.name, directive);\n            } else if (directive.test) {\n                tests.set(directive.test, directive);\n            }\n        }\n    });\n    return function(directive) {\n        var config = names.get(directive.name.value);\n        if (!config && tests.size) {\n            tests.forEach(function(testConfig, test) {\n                if (test(directive)) {\n                    config = testConfig;\n                }\n            });\n        }\n        return config;\n    };\n}\nfunction makeInUseGetterFunction(defaultKey) {\n    var map = new Map();\n    return function inUseGetterFunction(key) {\n        if (key === void 0) {\n            key = defaultKey;\n        }\n        var inUse = map.get(key);\n        if (!inUse) {\n            map.set(key, inUse = {\n                // Variable and fragment spread names used directly within this\n                // operation or fragment definition, as identified by key. These sets\n                // will be populated during the first traversal of the document in\n                // removeDirectivesFromDocument below.\n                variables: new Set(),\n                fragmentSpreads: new Set()\n            });\n        }\n        return inUse;\n    };\n}\nfunction removeDirectivesFromDocument(directives, doc) {\n    (0,_getFromAST_js__WEBPACK_IMPORTED_MODULE_2__.checkDocument)(doc);\n    // Passing empty strings to makeInUseGetterFunction means we handle anonymous\n    // operations as if their names were \"\". Anonymous fragment definitions are\n    // not supposed to be possible, but the same default naming strategy seems\n    // appropriate for that case as well.\n    var getInUseByOperationName = makeInUseGetterFunction(\"\");\n    var getInUseByFragmentName = makeInUseGetterFunction(\"\");\n    var getInUse = function(ancestors) {\n        for(var p = 0, ancestor = void 0; p < ancestors.length && (ancestor = ancestors[p]); ++p){\n            if ((0,_common_arrays_js__WEBPACK_IMPORTED_MODULE_4__.isArray)(ancestor)) continue;\n            if (ancestor.kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.OPERATION_DEFINITION) {\n                // If an operation is anonymous, we use the empty string as its key.\n                return getInUseByOperationName(ancestor.name && ancestor.name.value);\n            }\n            if (ancestor.kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.FRAGMENT_DEFINITION) {\n                return getInUseByFragmentName(ancestor.name.value);\n            }\n        }\n        globalThis.__DEV__ !== false && _globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.error(125);\n        return null;\n    };\n    var operationCount = 0;\n    for(var i = doc.definitions.length - 1; i >= 0; --i){\n        if (doc.definitions[i].kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.OPERATION_DEFINITION) {\n            ++operationCount;\n        }\n    }\n    var directiveMatcher = getDirectiveMatcher(directives);\n    var shouldRemoveField = function(nodeDirectives) {\n        return (0,_common_arrays_js__WEBPACK_IMPORTED_MODULE_4__.isNonEmptyArray)(nodeDirectives) && nodeDirectives.map(directiveMatcher).some(function(config) {\n            return config && config.remove;\n        });\n    };\n    var originalFragmentDefsByPath = new Map();\n    // Any time the first traversal of the document below makes a change like\n    // removing a fragment (by returning null), this variable should be set to\n    // true. Once it becomes true, it should never be set to false again. If this\n    // variable remains false throughout the traversal, then we can return the\n    // original doc immediately without any modifications.\n    var firstVisitMadeChanges = false;\n    var fieldOrInlineFragmentVisitor = {\n        enter: function(node) {\n            if (shouldRemoveField(node.directives)) {\n                firstVisitMadeChanges = true;\n                return null;\n            }\n        }\n    };\n    var docWithoutDirectiveSubtrees = (0,graphql__WEBPACK_IMPORTED_MODULE_5__.visit)(doc, {\n        // These two AST node types share the same implementation, defined above.\n        Field: fieldOrInlineFragmentVisitor,\n        InlineFragment: fieldOrInlineFragmentVisitor,\n        VariableDefinition: {\n            enter: function() {\n                // VariableDefinition nodes do not count as variables in use, though\n                // they do contain Variable nodes that might be visited below. To avoid\n                // counting variable declarations as usages, we skip visiting the\n                // contents of this VariableDefinition node by returning false.\n                return false;\n            }\n        },\n        Variable: {\n            enter: function(node, _key, _parent, _path, ancestors) {\n                var inUse = getInUse(ancestors);\n                if (inUse) {\n                    inUse.variables.add(node.name.value);\n                }\n            }\n        },\n        FragmentSpread: {\n            enter: function(node, _key, _parent, _path, ancestors) {\n                if (shouldRemoveField(node.directives)) {\n                    firstVisitMadeChanges = true;\n                    return null;\n                }\n                var inUse = getInUse(ancestors);\n                if (inUse) {\n                    inUse.fragmentSpreads.add(node.name.value);\n                }\n            // We might like to remove this FragmentSpread by returning null here if\n            // the corresponding FragmentDefinition node is also going to be removed\n            // by the logic below, but we can't control the relative order of those\n            // events, so we have to postpone the removal of dangling FragmentSpread\n            // nodes until after the current visit of the document has finished.\n            }\n        },\n        FragmentDefinition: {\n            enter: function(node, _key, _parent, path) {\n                originalFragmentDefsByPath.set(JSON.stringify(path), node);\n            },\n            leave: function(node, _key, _parent, path) {\n                var originalNode = originalFragmentDefsByPath.get(JSON.stringify(path));\n                if (node === originalNode) {\n                    // If the FragmentNode received by this leave function is identical to\n                    // the one received by the corresponding enter function (above), then\n                    // the visitor must not have made any changes within this\n                    // FragmentDefinition node. This fragment definition may still be\n                    // removed if there are no ...spread references to it, but it won't be\n                    // removed just because it has only a __typename field.\n                    return node;\n                }\n                if (// This logic applies only if the document contains one or more\n                // operations, since removing all fragments from a document containing\n                // only fragments makes the document useless.\n                operationCount > 0 && node.selectionSet.selections.every(function(selection) {\n                    return selection.kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.FIELD && selection.name.value === \"__typename\";\n                })) {\n                    // This is a somewhat opinionated choice: if a FragmentDefinition ends\n                    // up having no fields other than __typename, we remove the whole\n                    // fragment definition, and later prune ...spread references to it.\n                    getInUseByFragmentName(node.name.value).removed = true;\n                    firstVisitMadeChanges = true;\n                    return null;\n                }\n            }\n        },\n        Directive: {\n            leave: function(node) {\n                // If a matching directive is found, remove the directive itself. Note\n                // that this does not remove the target (field, argument, etc) of the\n                // directive, but only the directive itself.\n                if (directiveMatcher(node)) {\n                    firstVisitMadeChanges = true;\n                    return null;\n                }\n            }\n        }\n    });\n    if (!firstVisitMadeChanges) {\n        // If our first pass did not change anything about the document, then there\n        // is no cleanup we need to do, and we can return the original doc.\n        return doc;\n    }\n    // Utility for making sure inUse.transitiveVars is recursively populated.\n    // Because this logic assumes inUse.fragmentSpreads has been completely\n    // populated and inUse.removed has been set if appropriate,\n    // populateTransitiveVars must be called after that information has been\n    // collected by the first traversal of the document.\n    var populateTransitiveVars = function(inUse) {\n        if (!inUse.transitiveVars) {\n            inUse.transitiveVars = new Set(inUse.variables);\n            if (!inUse.removed) {\n                inUse.fragmentSpreads.forEach(function(childFragmentName) {\n                    populateTransitiveVars(getInUseByFragmentName(childFragmentName)).transitiveVars.forEach(function(varName) {\n                        inUse.transitiveVars.add(varName);\n                    });\n                });\n            }\n        }\n        return inUse;\n    };\n    // Since we've been keeping track of fragment spreads used by particular\n    // operations and fragment definitions, we now need to compute the set of all\n    // spreads used (transitively) by any operations in the document.\n    var allFragmentNamesUsed = new Set();\n    docWithoutDirectiveSubtrees.definitions.forEach(function(def) {\n        if (def.kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.OPERATION_DEFINITION) {\n            populateTransitiveVars(getInUseByOperationName(def.name && def.name.value)).fragmentSpreads.forEach(function(childFragmentName) {\n                allFragmentNamesUsed.add(childFragmentName);\n            });\n        } else if (def.kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.FRAGMENT_DEFINITION && // If there are no operations in the document, then all fragment\n        // definitions count as usages of their own fragment names. This heuristic\n        // prevents accidentally removing all fragment definitions from the\n        // document just because it contains no operations that use the fragments.\n        operationCount === 0 && !getInUseByFragmentName(def.name.value).removed) {\n            allFragmentNamesUsed.add(def.name.value);\n        }\n    });\n    // Now that we have added all fragment spreads used by operations to the\n    // allFragmentNamesUsed set, we can complete the set by transitively adding\n    // all fragment spreads used by those fragments, and so on.\n    allFragmentNamesUsed.forEach(function(fragmentName) {\n        // Once all the childFragmentName strings added here have been seen already,\n        // the top-level allFragmentNamesUsed.forEach loop will terminate.\n        populateTransitiveVars(getInUseByFragmentName(fragmentName)).fragmentSpreads.forEach(function(childFragmentName) {\n            allFragmentNamesUsed.add(childFragmentName);\n        });\n    });\n    var fragmentWillBeRemoved = function(fragmentName) {\n        return !!// A fragment definition will be removed if there are no spreads that refer\n        // to it, or the fragment was explicitly removed because it had no fields\n        // other than __typename.\n        (!allFragmentNamesUsed.has(fragmentName) || getInUseByFragmentName(fragmentName).removed);\n    };\n    var enterVisitor = {\n        enter: function(node) {\n            if (fragmentWillBeRemoved(node.name.value)) {\n                return null;\n            }\n        }\n    };\n    return nullIfDocIsEmpty((0,graphql__WEBPACK_IMPORTED_MODULE_5__.visit)(docWithoutDirectiveSubtrees, {\n        // If the fragment is going to be removed, then leaving any dangling\n        // FragmentSpread nodes with the same name would be a mistake.\n        FragmentSpread: enterVisitor,\n        // This is where the fragment definition is actually removed.\n        FragmentDefinition: enterVisitor,\n        OperationDefinition: {\n            leave: function(node) {\n                // Upon leaving each operation in the depth-first AST traversal, prune\n                // any variables that are declared by the operation but unused within.\n                if (node.variableDefinitions) {\n                    var usedVariableNames_1 = populateTransitiveVars(// If an operation is anonymous, we use the empty string as its key.\n                    getInUseByOperationName(node.name && node.name.value)).transitiveVars;\n                    // According to the GraphQL spec, all variables declared by an\n                    // operation must either be used by that operation or used by some\n                    // fragment included transitively into that operation:\n                    // https://spec.graphql.org/draft/#sec-All-Variables-Used\n                    //\n                    // To stay on the right side of this validation rule, if/when we\n                    // remove the last $var references from an operation or its fragments,\n                    // we must also remove the corresponding $var declaration from the\n                    // enclosing operation. This pruning applies only to operations and\n                    // not fragment definitions, at the moment. Fragments may be able to\n                    // declare variables eventually, but today they can only consume them.\n                    if (usedVariableNames_1.size < node.variableDefinitions.length) {\n                        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, node), {\n                            variableDefinitions: node.variableDefinitions.filter(function(varDef) {\n                                return usedVariableNames_1.has(varDef.variable.name.value);\n                            })\n                        });\n                    }\n                }\n            }\n        }\n    }));\n}\nvar addTypenameToDocument = Object.assign(function(doc) {\n    return (0,graphql__WEBPACK_IMPORTED_MODULE_5__.visit)(doc, {\n        SelectionSet: {\n            enter: function(node, _key, parent) {\n                // Don't add __typename to OperationDefinitions.\n                if (parent && parent.kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.OPERATION_DEFINITION) {\n                    return;\n                }\n                // No changes if no selections.\n                var selections = node.selections;\n                if (!selections) {\n                    return;\n                }\n                // If selections already have a __typename, or are part of an\n                // introspection query, do nothing.\n                var skip = selections.some(function(selection) {\n                    return (0,_storeUtils_js__WEBPACK_IMPORTED_MODULE_7__.isField)(selection) && (selection.name.value === \"__typename\" || selection.name.value.lastIndexOf(\"__\", 0) === 0);\n                });\n                if (skip) {\n                    return;\n                }\n                // If this SelectionSet is @export-ed as an input variable, it should\n                // not have a __typename field (see issue #4691).\n                var field = parent;\n                if ((0,_storeUtils_js__WEBPACK_IMPORTED_MODULE_7__.isField)(field) && field.directives && field.directives.some(function(d) {\n                    return d.name.value === \"export\";\n                })) {\n                    return;\n                }\n                // Create and return a new SelectionSet with a __typename Field.\n                return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, node), {\n                    selections: (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__spreadArray)([], selections, true), [\n                        TYPENAME_FIELD\n                    ], false)\n                });\n            }\n        }\n    });\n}, {\n    added: function(field) {\n        return field === TYPENAME_FIELD;\n    }\n});\nvar connectionRemoveConfig = {\n    test: function(directive) {\n        var willRemove = directive.name.value === \"connection\";\n        if (willRemove) {\n            if (!directive.arguments || !directive.arguments.some(function(arg) {\n                return arg.name.value === \"key\";\n            })) {\n                globalThis.__DEV__ !== false && _globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(126);\n            }\n        }\n        return willRemove;\n    }\n};\nfunction removeConnectionDirectiveFromDocument(doc) {\n    return removeDirectivesFromDocument([\n        connectionRemoveConfig\n    ], (0,_getFromAST_js__WEBPACK_IMPORTED_MODULE_2__.checkDocument)(doc));\n}\nfunction hasDirectivesInSelectionSet(directives, selectionSet, nestedCheck) {\n    if (nestedCheck === void 0) {\n        nestedCheck = true;\n    }\n    return !!selectionSet && selectionSet.selections && selectionSet.selections.some(function(selection) {\n        return hasDirectivesInSelection(directives, selection, nestedCheck);\n    });\n}\nfunction hasDirectivesInSelection(directives, selection, nestedCheck) {\n    if (nestedCheck === void 0) {\n        nestedCheck = true;\n    }\n    if (!(0,_storeUtils_js__WEBPACK_IMPORTED_MODULE_7__.isField)(selection)) {\n        return true;\n    }\n    if (!selection.directives) {\n        return false;\n    }\n    return selection.directives.some(getDirectiveMatcher(directives)) || nestedCheck && hasDirectivesInSelectionSet(directives, selection.selectionSet, nestedCheck);\n}\nfunction getArgumentMatcher(config) {\n    return function argumentMatcher(argument) {\n        return config.some(function(aConfig) {\n            return argument.value && argument.value.kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.VARIABLE && argument.value.name && (aConfig.name === argument.value.name.value || aConfig.test && aConfig.test(argument));\n        });\n    };\n}\nfunction removeArgumentsFromDocument(config, doc) {\n    var argMatcher = getArgumentMatcher(config);\n    return nullIfDocIsEmpty((0,graphql__WEBPACK_IMPORTED_MODULE_5__.visit)(doc, {\n        OperationDefinition: {\n            enter: function(node) {\n                return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, node), {\n                    // Remove matching top level variables definitions.\n                    variableDefinitions: node.variableDefinitions ? node.variableDefinitions.filter(function(varDef) {\n                        return !config.some(function(arg) {\n                            return arg.name === varDef.variable.name.value;\n                        });\n                    }) : []\n                });\n            }\n        },\n        Field: {\n            enter: function(node) {\n                // If `remove` is set to true for an argument, and an argument match\n                // is found for a field, remove the field as well.\n                var shouldRemoveField = config.some(function(argConfig) {\n                    return argConfig.remove;\n                });\n                if (shouldRemoveField) {\n                    var argMatchCount_1 = 0;\n                    if (node.arguments) {\n                        node.arguments.forEach(function(arg) {\n                            if (argMatcher(arg)) {\n                                argMatchCount_1 += 1;\n                            }\n                        });\n                    }\n                    if (argMatchCount_1 === 1) {\n                        return null;\n                    }\n                }\n            }\n        },\n        Argument: {\n            enter: function(node) {\n                // Remove all matching arguments.\n                if (argMatcher(node)) {\n                    return null;\n                }\n            }\n        }\n    }));\n}\nfunction removeFragmentSpreadFromDocument(config, doc) {\n    function enter(node) {\n        if (config.some(function(def) {\n            return def.name === node.name.value;\n        })) {\n            return null;\n        }\n    }\n    return nullIfDocIsEmpty((0,graphql__WEBPACK_IMPORTED_MODULE_5__.visit)(doc, {\n        FragmentSpread: {\n            enter: enter\n        },\n        FragmentDefinition: {\n            enter: enter\n        }\n    }));\n}\n// If the incoming document is a query, return it as is. Otherwise, build a\n// new document containing a query operation based on the selection set\n// of the previous main operation.\nfunction buildQueryFromSelectionSet(document) {\n    var definition = (0,_getFromAST_js__WEBPACK_IMPORTED_MODULE_2__.getMainDefinition)(document);\n    var definitionOperation = definition.operation;\n    if (definitionOperation === \"query\") {\n        // Already a query, so return the existing document.\n        return document;\n    }\n    // Build a new query using the selection set of the main operation.\n    var modifiedDoc = (0,graphql__WEBPACK_IMPORTED_MODULE_5__.visit)(document, {\n        OperationDefinition: {\n            enter: function(node) {\n                return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, node), {\n                    operation: \"query\"\n                });\n            }\n        }\n    });\n    return modifiedDoc;\n}\n// Remove fields / selection sets that include an @client directive.\nfunction removeClientSetsFromDocument(document) {\n    (0,_getFromAST_js__WEBPACK_IMPORTED_MODULE_2__.checkDocument)(document);\n    var modifiedDoc = removeDirectivesFromDocument([\n        {\n            test: function(directive) {\n                return directive.name.value === \"client\";\n            },\n            remove: true\n        }\n    ], document);\n    return modifiedDoc;\n}\nfunction addNonReactiveToNamedFragments(document) {\n    (0,_getFromAST_js__WEBPACK_IMPORTED_MODULE_2__.checkDocument)(document);\n    return (0,graphql__WEBPACK_IMPORTED_MODULE_5__.visit)(document, {\n        FragmentSpread: function(node) {\n            var _a;\n            // Do not add `@nonreactive` if the fragment is marked with `@unmask`\n            // since we want to react to changes in this fragment.\n            if ((_a = node.directives) === null || _a === void 0 ? void 0 : _a.some(function(directive) {\n                return directive.name.value === \"unmask\";\n            })) {\n                return;\n            }\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, node), {\n                directives: (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__spreadArray)([], node.directives || [], true), [\n                    {\n                        kind: graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.DIRECTIVE,\n                        name: {\n                            kind: graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.NAME,\n                            value: \"nonreactive\"\n                        }\n                    }\n                ], false)\n            });\n        }\n    });\n} //# sourceMappingURL=transform.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2dyYXBocWwvdHJhbnNmb3JtLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBZ0Q7QUFDQTtBQUNWO0FBQ3FHO0FBQ2pHO0FBQ1M7QUFDWTtBQUMvRCxJQUFJYyxpQkFBaUI7SUFDakJDLE1BQU1YLHlDQUFJQSxDQUFDWSxLQUFLO0lBQ2hCQyxNQUFNO1FBQ0ZGLE1BQU1YLHlDQUFJQSxDQUFDYyxJQUFJO1FBQ2ZDLE9BQU87SUFDWDtBQUNKO0FBQ0EsU0FBU0MsUUFBUUMsRUFBRSxFQUFFQyxXQUFXO0lBQzVCLE9BQVEsQ0FBQ0QsTUFDTEEsR0FBR0UsWUFBWSxDQUFDQyxVQUFVLENBQUNDLEtBQUssQ0FBQyxTQUFVQyxTQUFTO1FBQ2hELE9BQU9BLFVBQVVYLElBQUksS0FBS1gseUNBQUlBLENBQUN1QixlQUFlLElBQzFDUCxRQUFRRSxXQUFXLENBQUNJLFVBQVVULElBQUksQ0FBQ0UsS0FBSyxDQUFDLEVBQUVHO0lBQ25EO0FBQ1I7QUFDQSxTQUFTTSxpQkFBaUJDLEdBQUc7SUFDekIsT0FBTyxRQUFTdkIsc0VBQXNCQSxDQUFDdUIsUUFBUXRCLHFFQUFxQkEsQ0FBQ3NCLE1BQU1sQixnRUFBaUJBLENBQUNILHNFQUFzQkEsQ0FBQ3FCLFNBQ2hILE9BQ0VBO0FBQ1Y7QUFDQSxTQUFTQyxvQkFBb0JDLE9BQU87SUFDaEMsSUFBSUMsUUFBUSxJQUFJQztJQUNoQixJQUFJQyxRQUFRLElBQUlEO0lBQ2hCRixRQUFRSSxPQUFPLENBQUMsU0FBVUMsU0FBUztRQUMvQixJQUFJQSxXQUFXO1lBQ1gsSUFBSUEsVUFBVW5CLElBQUksRUFBRTtnQkFDaEJlLE1BQU1LLEdBQUcsQ0FBQ0QsVUFBVW5CLElBQUksRUFBRW1CO1lBQzlCLE9BQ0ssSUFBSUEsVUFBVUUsSUFBSSxFQUFFO2dCQUNyQkosTUFBTUcsR0FBRyxDQUFDRCxVQUFVRSxJQUFJLEVBQUVGO1lBQzlCO1FB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QixTQUFVVixJQUFJO1lBQzFCLElBQUl5RTtZQUNKLHFFQUFxRTtZQUNyRSxzREFBc0Q7WUFDdEQsSUFBSSxDQUFDQSxLQUFLekUsS0FBS3pCLFVBQVUsTUFBTSxRQUFRa0csT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxHQUFHL0UsSUFBSSxDQUFDLFNBQVVwQyxTQUFTO2dCQUFJLE9BQU9BLFVBQVVuQixJQUFJLENBQUNFLEtBQUssS0FBSztZQUFVLElBQUk7Z0JBQ3pJO1lBQ0o7WUFDQSxPQUFPbkIsK0NBQVFBLENBQUNBLCtDQUFRQSxDQUFDLENBQUMsR0FBRzhFLE9BQU87Z0JBQUV6QixZQUFZcEQsb0RBQWFBLENBQUNBLG9EQUFhQSxDQUFDLEVBQUUsRUFBRzZFLEtBQUt6QixVQUFVLElBQUksRUFBRSxFQUFHLE9BQU87b0JBQzFHO3dCQUNJdEMsTUFBTVgseUNBQUlBLENBQUNvSixTQUFTO3dCQUNwQnZJLE1BQU07NEJBQUVGLE1BQU1YLHlDQUFJQSxDQUFDYyxJQUFJOzRCQUFFQyxPQUFPO3dCQUFjO29CQUNsRDtpQkFDSCxFQUFFO1lBQU87UUFDbEI7SUFDSjtBQUNKLEVBQ0EscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2xhY2stZ3JhcGhxbC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvZ3JhcGhxbC90cmFuc2Zvcm0uanM/MmIxMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfX2Fzc2lnbiwgX19zcHJlYWRBcnJheSB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgaW52YXJpYW50IH0gZnJvbSBcIi4uL2dsb2JhbHMvaW5kZXguanNcIjtcbmltcG9ydCB7IHZpc2l0LCBLaW5kIH0gZnJvbSBcImdyYXBocWxcIjtcbmltcG9ydCB7IGNoZWNrRG9jdW1lbnQsIGdldE9wZXJhdGlvbkRlZmluaXRpb24sIGdldEZyYWdtZW50RGVmaW5pdGlvbiwgZ2V0RnJhZ21lbnREZWZpbml0aW9ucywgZ2V0TWFpbkRlZmluaXRpb24sIH0gZnJvbSBcIi4vZ2V0RnJvbUFTVC5qc1wiO1xuaW1wb3J0IHsgaXNGaWVsZCB9IGZyb20gXCIuL3N0b3JlVXRpbHMuanNcIjtcbmltcG9ydCB7IGNyZWF0ZUZyYWdtZW50TWFwIH0gZnJvbSBcIi4vZnJhZ21lbnRzLmpzXCI7XG5pbXBvcnQgeyBpc0FycmF5LCBpc05vbkVtcHR5QXJyYXkgfSBmcm9tIFwiLi4vY29tbW9uL2FycmF5cy5qc1wiO1xudmFyIFRZUEVOQU1FX0ZJRUxEID0ge1xuICAgIGtpbmQ6IEtpbmQuRklFTEQsXG4gICAgbmFtZToge1xuICAgICAgICBraW5kOiBLaW5kLk5BTUUsXG4gICAgICAgIHZhbHVlOiBcIl9fdHlwZW5hbWVcIixcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGlzRW1wdHkob3AsIGZyYWdtZW50TWFwKSB7XG4gICAgcmV0dXJuICghb3AgfHxcbiAgICAgICAgb3Auc2VsZWN0aW9uU2V0LnNlbGVjdGlvbnMuZXZlcnkoZnVuY3Rpb24gKHNlbGVjdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIHNlbGVjdGlvbi5raW5kID09PSBLaW5kLkZSQUdNRU5UX1NQUkVBRCAmJlxuICAgICAgICAgICAgICAgIGlzRW1wdHkoZnJhZ21lbnRNYXBbc2VsZWN0aW9uLm5hbWUudmFsdWVdLCBmcmFnbWVudE1hcCk7XG4gICAgICAgIH0pKTtcbn1cbmZ1bmN0aW9uIG51bGxJZkRvY0lzRW1wdHkoZG9jKSB7XG4gICAgcmV0dXJuIChpc0VtcHR5KGdldE9wZXJhdGlvbkRlZmluaXRpb24oZG9jKSB8fCBnZXRGcmFnbWVudERlZmluaXRpb24oZG9jKSwgY3JlYXRlRnJhZ21lbnRNYXAoZ2V0RnJhZ21lbnREZWZpbml0aW9ucyhkb2MpKSkpID9cbiAgICAgICAgbnVsbFxuICAgICAgICA6IGRvYztcbn1cbmZ1bmN0aW9uIGdldERpcmVjdGl2ZU1hdGNoZXIoY29uZmlncykge1xuICAgIHZhciBuYW1lcyA9IG5ldyBNYXAoKTtcbiAgICB2YXIgdGVzdHMgPSBuZXcgTWFwKCk7XG4gICAgY29uZmlncy5mb3JFYWNoKGZ1bmN0aW9uIChkaXJlY3RpdmUpIHtcbiAgICAgICAgaWYgKGRpcmVjdGl2ZSkge1xuICAgICAgICAgICAgaWYgKGRpcmVjdGl2ZS5uYW1lKSB7XG4gICAgICAgICAgICAgICAgbmFtZXMuc2V0KGRpcmVjdGl2ZS5uYW1lLCBkaXJlY3RpdmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZGlyZWN0aXZlLnRlc3QpIHtcbiAgICAgICAgICAgICAgICB0ZXN0cy5zZXQoZGlyZWN0aXZlLnRlc3QsIGRpcmVjdGl2ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGRpcmVjdGl2ZSkge1xuICAgICAgICB2YXIgY29uZmlnID0gbmFtZXMuZ2V0KGRpcmVjdGl2ZS5uYW1lLnZhbHVlKTtcbiAgICAgICAgaWYgKCFjb25maWcgJiYgdGVzdHMuc2l6ZSkge1xuICAgICAgICAgICAgdGVzdHMuZm9yRWFjaChmdW5jdGlvbiAodGVzdENvbmZpZywgdGVzdCkge1xuICAgICAgICAgICAgICAgIGlmICh0ZXN0KGRpcmVjdGl2ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnID0gdGVzdENvbmZpZztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29uZmlnO1xuICAgIH07XG59XG5mdW5jdGlvbiBtYWtlSW5Vc2VHZXR0ZXJGdW5jdGlvbihkZWZhdWx0S2V5KSB7XG4gICAgdmFyIG1hcCA9IG5ldyBNYXAoKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gaW5Vc2VHZXR0ZXJGdW5jdGlvbihrZXkpIHtcbiAgICAgICAgaWYgKGtleSA9PT0gdm9pZCAwKSB7IGtleSA9IGRlZmF1bHRLZXk7IH1cbiAgICAgICAgdmFyIGluVXNlID0gbWFwLmdldChrZXkpO1xuICAgICAgICBpZiAoIWluVXNlKSB7XG4gICAgICAgICAgICBtYXAuc2V0KGtleSwgKGluVXNlID0ge1xuICAgICAgICAgICAgICAgIC8vIFZhcmlhYmxlIGFuZCBmcmFnbWVudCBzcHJlYWQgbmFtZXMgdXNlZCBkaXJlY3RseSB3aXRoaW4gdGhpc1xuICAgICAgICAgICAgICAgIC8vIG9wZXJhdGlvbiBvciBmcmFnbWVudCBkZWZpbml0aW9uLCBhcyBpZGVudGlmaWVkIGJ5IGtleS4gVGhlc2Ugc2V0c1xuICAgICAgICAgICAgICAgIC8vIHdpbGwgYmUgcG9wdWxhdGVkIGR1cmluZyB0aGUgZmlyc3QgdHJhdmVyc2FsIG9mIHRoZSBkb2N1bWVudCBpblxuICAgICAgICAgICAgICAgIC8vIHJlbW92ZURpcmVjdGl2ZXNGcm9tRG9jdW1lbnQgYmVsb3cuXG4gICAgICAgICAgICAgICAgdmFyaWFibGVzOiBuZXcgU2V0KCksXG4gICAgICAgICAgICAgICAgZnJhZ21lbnRTcHJlYWRzOiBuZXcgU2V0KCksXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGluVXNlO1xuICAgIH07XG59XG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlRGlyZWN0aXZlc0Zyb21Eb2N1bWVudChkaXJlY3RpdmVzLCBkb2MpIHtcbiAgICBjaGVja0RvY3VtZW50KGRvYyk7XG4gICAgLy8gUGFzc2luZyBlbXB0eSBzdHJpbmdzIHRvIG1ha2VJblVzZUdldHRlckZ1bmN0aW9uIG1lYW5zIHdlIGhhbmRsZSBhbm9ueW1vdXNcbiAgICAvLyBvcGVyYXRpb25zIGFzIGlmIHRoZWlyIG5hbWVzIHdlcmUgXCJcIi4gQW5vbnltb3VzIGZyYWdtZW50IGRlZmluaXRpb25zIGFyZVxuICAgIC8vIG5vdCBzdXBwb3NlZCB0byBiZSBwb3NzaWJsZSwgYnV0IHRoZSBzYW1lIGRlZmF1bHQgbmFtaW5nIHN0cmF0ZWd5IHNlZW1zXG4gICAgLy8gYXBwcm9wcmlhdGUgZm9yIHRoYXQgY2FzZSBhcyB3ZWxsLlxuICAgIHZhciBnZXRJblVzZUJ5T3BlcmF0aW9uTmFtZSA9IG1ha2VJblVzZUdldHRlckZ1bmN0aW9uKFwiXCIpO1xuICAgIHZhciBnZXRJblVzZUJ5RnJhZ21lbnROYW1lID0gbWFrZUluVXNlR2V0dGVyRnVuY3Rpb24oXCJcIik7XG4gICAgdmFyIGdldEluVXNlID0gZnVuY3Rpb24gKGFuY2VzdG9ycykge1xuICAgICAgICBmb3IgKHZhciBwID0gMCwgYW5jZXN0b3IgPSB2b2lkIDA7IHAgPCBhbmNlc3RvcnMubGVuZ3RoICYmIChhbmNlc3RvciA9IGFuY2VzdG9yc1twXSk7ICsrcCkge1xuICAgICAgICAgICAgaWYgKGlzQXJyYXkoYW5jZXN0b3IpKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgaWYgKGFuY2VzdG9yLmtpbmQgPT09IEtpbmQuT1BFUkFUSU9OX0RFRklOSVRJT04pIHtcbiAgICAgICAgICAgICAgICAvLyBJZiBhbiBvcGVyYXRpb24gaXMgYW5vbnltb3VzLCB3ZSB1c2UgdGhlIGVtcHR5IHN0cmluZyBhcyBpdHMga2V5LlxuICAgICAgICAgICAgICAgIHJldHVybiBnZXRJblVzZUJ5T3BlcmF0aW9uTmFtZShhbmNlc3Rvci5uYW1lICYmIGFuY2VzdG9yLm5hbWUudmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFuY2VzdG9yLmtpbmQgPT09IEtpbmQuRlJBR01FTlRfREVGSU5JVElPTikge1xuICAgICAgICAgICAgICAgIHJldHVybiBnZXRJblVzZUJ5RnJhZ21lbnROYW1lKGFuY2VzdG9yLm5hbWUudmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGdsb2JhbFRoaXMuX19ERVZfXyAhPT0gZmFsc2UgJiYgaW52YXJpYW50LmVycm9yKDEyNSk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG4gICAgdmFyIG9wZXJhdGlvbkNvdW50ID0gMDtcbiAgICBmb3IgKHZhciBpID0gZG9jLmRlZmluaXRpb25zLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIGlmIChkb2MuZGVmaW5pdGlvbnNbaV0ua2luZCA9PT0gS2luZC5PUEVSQVRJT05fREVGSU5JVElPTikge1xuICAgICAgICAgICAgKytvcGVyYXRpb25Db3VudDtcbiAgICAgICAgfVxuICAgIH1cbiAgICB2YXIgZGlyZWN0aXZlTWF0Y2hlciA9IGdldERpcmVjdGl2ZU1hdGNoZXIoZGlyZWN0aXZlcyk7XG4gICAgdmFyIHNob3VsZFJlbW92ZUZpZWxkID0gZnVuY3Rpb24gKG5vZGVEaXJlY3RpdmVzKSB7XG4gICAgICAgIHJldHVybiBpc05vbkVtcHR5QXJyYXkobm9kZURpcmVjdGl2ZXMpICYmXG4gICAgICAgICAgICBub2RlRGlyZWN0aXZlc1xuICAgICAgICAgICAgICAgIC5tYXAoZGlyZWN0aXZlTWF0Y2hlcilcbiAgICAgICAgICAgICAgICAuc29tZShmdW5jdGlvbiAoY29uZmlnKSB7IHJldHVybiBjb25maWcgJiYgY29uZmlnLnJlbW92ZTsgfSk7XG4gICAgfTtcbiAgICB2YXIgb3JpZ2luYWxGcmFnbWVudERlZnNCeVBhdGggPSBuZXcgTWFwKCk7XG4gICAgLy8gQW55IHRpbWUgdGhlIGZpcnN0IHRyYXZlcnNhbCBvZiB0aGUgZG9jdW1lbnQgYmVsb3cgbWFrZXMgYSBjaGFuZ2UgbGlrZVxuICAgIC8vIHJlbW92aW5nIGEgZnJhZ21lbnQgKGJ5IHJldHVybmluZyBudWxsKSwgdGhpcyB2YXJpYWJsZSBzaG91bGQgYmUgc2V0IHRvXG4gICAgLy8gdHJ1ZS4gT25jZSBpdCBiZWNvbWVzIHRydWUsIGl0IHNob3VsZCBuZXZlciBiZSBzZXQgdG8gZmFsc2UgYWdhaW4uIElmIHRoaXNcbiAgICAvLyB2YXJpYWJsZSByZW1haW5zIGZhbHNlIHRocm91Z2hvdXQgdGhlIHRyYXZlcnNhbCwgdGhlbiB3ZSBjYW4gcmV0dXJuIHRoZVxuICAgIC8vIG9yaWdpbmFsIGRvYyBpbW1lZGlhdGVseSB3aXRob3V0IGFueSBtb2RpZmljYXRpb25zLlxuICAgIHZhciBmaXJzdFZpc2l0TWFkZUNoYW5nZXMgPSBmYWxzZTtcbiAgICB2YXIgZmllbGRPcklubGluZUZyYWdtZW50VmlzaXRvciA9IHtcbiAgICAgICAgZW50ZXI6IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICBpZiAoc2hvdWxkUmVtb3ZlRmllbGQobm9kZS5kaXJlY3RpdmVzKSkge1xuICAgICAgICAgICAgICAgIGZpcnN0VmlzaXRNYWRlQ2hhbmdlcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfTtcbiAgICB2YXIgZG9jV2l0aG91dERpcmVjdGl2ZVN1YnRyZWVzID0gdmlzaXQoZG9jLCB7XG4gICAgICAgIC8vIFRoZXNlIHR3byBBU1Qgbm9kZSB0eXBlcyBzaGFyZSB0aGUgc2FtZSBpbXBsZW1lbnRhdGlvbiwgZGVmaW5lZCBhYm92ZS5cbiAgICAgICAgRmllbGQ6IGZpZWxkT3JJbmxpbmVGcmFnbWVudFZpc2l0b3IsXG4gICAgICAgIElubGluZUZyYWdtZW50OiBmaWVsZE9ySW5saW5lRnJhZ21lbnRWaXNpdG9yLFxuICAgICAgICBWYXJpYWJsZURlZmluaXRpb246IHtcbiAgICAgICAgICAgIGVudGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgLy8gVmFyaWFibGVEZWZpbml0aW9uIG5vZGVzIGRvIG5vdCBjb3VudCBhcyB2YXJpYWJsZXMgaW4gdXNlLCB0aG91Z2hcbiAgICAgICAgICAgICAgICAvLyB0aGV5IGRvIGNvbnRhaW4gVmFyaWFibGUgbm9kZXMgdGhhdCBtaWdodCBiZSB2aXNpdGVkIGJlbG93LiBUbyBhdm9pZFxuICAgICAgICAgICAgICAgIC8vIGNvdW50aW5nIHZhcmlhYmxlIGRlY2xhcmF0aW9ucyBhcyB1c2FnZXMsIHdlIHNraXAgdmlzaXRpbmcgdGhlXG4gICAgICAgICAgICAgICAgLy8gY29udGVudHMgb2YgdGhpcyBWYXJpYWJsZURlZmluaXRpb24gbm9kZSBieSByZXR1cm5pbmcgZmFsc2UuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgVmFyaWFibGU6IHtcbiAgICAgICAgICAgIGVudGVyOiBmdW5jdGlvbiAobm9kZSwgX2tleSwgX3BhcmVudCwgX3BhdGgsIGFuY2VzdG9ycykge1xuICAgICAgICAgICAgICAgIHZhciBpblVzZSA9IGdldEluVXNlKGFuY2VzdG9ycyk7XG4gICAgICAgICAgICAgICAgaWYgKGluVXNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGluVXNlLnZhcmlhYmxlcy5hZGQobm9kZS5uYW1lLnZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBGcmFnbWVudFNwcmVhZDoge1xuICAgICAgICAgICAgZW50ZXI6IGZ1bmN0aW9uIChub2RlLCBfa2V5LCBfcGFyZW50LCBfcGF0aCwgYW5jZXN0b3JzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNob3VsZFJlbW92ZUZpZWxkKG5vZGUuZGlyZWN0aXZlcykpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlyc3RWaXNpdE1hZGVDaGFuZ2VzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBpblVzZSA9IGdldEluVXNlKGFuY2VzdG9ycyk7XG4gICAgICAgICAgICAgICAgaWYgKGluVXNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGluVXNlLmZyYWdtZW50U3ByZWFkcy5hZGQobm9kZS5uYW1lLnZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gV2UgbWlnaHQgbGlrZSB0byByZW1vdmUgdGhpcyBGcmFnbWVudFNwcmVhZCBieSByZXR1cm5pbmcgbnVsbCBoZXJlIGlmXG4gICAgICAgICAgICAgICAgLy8gdGhlIGNvcnJlc3BvbmRpbmcgRnJhZ21lbnREZWZpbml0aW9uIG5vZGUgaXMgYWxzbyBnb2luZyB0byBiZSByZW1vdmVkXG4gICAgICAgICAgICAgICAgLy8gYnkgdGhlIGxvZ2ljIGJlbG93LCBidXQgd2UgY2FuJ3QgY29udHJvbCB0aGUgcmVsYXRpdmUgb3JkZXIgb2YgdGhvc2VcbiAgICAgICAgICAgICAgICAvLyBldmVudHMsIHNvIHdlIGhhdmUgdG8gcG9zdHBvbmUgdGhlIHJlbW92YWwgb2YgZGFuZ2xpbmcgRnJhZ21lbnRTcHJlYWRcbiAgICAgICAgICAgICAgICAvLyBub2RlcyB1bnRpbCBhZnRlciB0aGUgY3VycmVudCB2aXNpdCBvZiB0aGUgZG9jdW1lbnQgaGFzIGZpbmlzaGVkLlxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgRnJhZ21lbnREZWZpbml0aW9uOiB7XG4gICAgICAgICAgICBlbnRlcjogZnVuY3Rpb24gKG5vZGUsIF9rZXksIF9wYXJlbnQsIHBhdGgpIHtcbiAgICAgICAgICAgICAgICBvcmlnaW5hbEZyYWdtZW50RGVmc0J5UGF0aC5zZXQoSlNPTi5zdHJpbmdpZnkocGF0aCksIG5vZGUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxlYXZlOiBmdW5jdGlvbiAobm9kZSwgX2tleSwgX3BhcmVudCwgcGF0aCkge1xuICAgICAgICAgICAgICAgIHZhciBvcmlnaW5hbE5vZGUgPSBvcmlnaW5hbEZyYWdtZW50RGVmc0J5UGF0aC5nZXQoSlNPTi5zdHJpbmdpZnkocGF0aCkpO1xuICAgICAgICAgICAgICAgIGlmIChub2RlID09PSBvcmlnaW5hbE5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIEZyYWdtZW50Tm9kZSByZWNlaXZlZCBieSB0aGlzIGxlYXZlIGZ1bmN0aW9uIGlzIGlkZW50aWNhbCB0b1xuICAgICAgICAgICAgICAgICAgICAvLyB0aGUgb25lIHJlY2VpdmVkIGJ5IHRoZSBjb3JyZXNwb25kaW5nIGVudGVyIGZ1bmN0aW9uIChhYm92ZSksIHRoZW5cbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIHZpc2l0b3IgbXVzdCBub3QgaGF2ZSBtYWRlIGFueSBjaGFuZ2VzIHdpdGhpbiB0aGlzXG4gICAgICAgICAgICAgICAgICAgIC8vIEZyYWdtZW50RGVmaW5pdGlvbiBub2RlLiBUaGlzIGZyYWdtZW50IGRlZmluaXRpb24gbWF5IHN0aWxsIGJlXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlbW92ZWQgaWYgdGhlcmUgYXJlIG5vIC4uLnNwcmVhZCByZWZlcmVuY2VzIHRvIGl0LCBidXQgaXQgd29uJ3QgYmVcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVtb3ZlZCBqdXN0IGJlY2F1c2UgaXQgaGFzIG9ubHkgYSBfX3R5cGVuYW1lIGZpZWxkLlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIC8vIFRoaXMgbG9naWMgYXBwbGllcyBvbmx5IGlmIHRoZSBkb2N1bWVudCBjb250YWlucyBvbmUgb3IgbW9yZVxuICAgICAgICAgICAgICAgIC8vIG9wZXJhdGlvbnMsIHNpbmNlIHJlbW92aW5nIGFsbCBmcmFnbWVudHMgZnJvbSBhIGRvY3VtZW50IGNvbnRhaW5pbmdcbiAgICAgICAgICAgICAgICAvLyBvbmx5IGZyYWdtZW50cyBtYWtlcyB0aGUgZG9jdW1lbnQgdXNlbGVzcy5cbiAgICAgICAgICAgICAgICBvcGVyYXRpb25Db3VudCA+IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5zZWxlY3Rpb25TZXQuc2VsZWN0aW9ucy5ldmVyeShmdW5jdGlvbiAoc2VsZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZWN0aW9uLmtpbmQgPT09IEtpbmQuRklFTEQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb24ubmFtZS52YWx1ZSA9PT0gXCJfX3R5cGVuYW1lXCI7XG4gICAgICAgICAgICAgICAgICAgIH0pKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgYSBzb21ld2hhdCBvcGluaW9uYXRlZCBjaG9pY2U6IGlmIGEgRnJhZ21lbnREZWZpbml0aW9uIGVuZHNcbiAgICAgICAgICAgICAgICAgICAgLy8gdXAgaGF2aW5nIG5vIGZpZWxkcyBvdGhlciB0aGFuIF9fdHlwZW5hbWUsIHdlIHJlbW92ZSB0aGUgd2hvbGVcbiAgICAgICAgICAgICAgICAgICAgLy8gZnJhZ21lbnQgZGVmaW5pdGlvbiwgYW5kIGxhdGVyIHBydW5lIC4uLnNwcmVhZCByZWZlcmVuY2VzIHRvIGl0LlxuICAgICAgICAgICAgICAgICAgICBnZXRJblVzZUJ5RnJhZ21lbnROYW1lKG5vZGUubmFtZS52YWx1ZSkucmVtb3ZlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGZpcnN0VmlzaXRNYWRlQ2hhbmdlcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIERpcmVjdGl2ZToge1xuICAgICAgICAgICAgbGVhdmU6IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgYSBtYXRjaGluZyBkaXJlY3RpdmUgaXMgZm91bmQsIHJlbW92ZSB0aGUgZGlyZWN0aXZlIGl0c2VsZi4gTm90ZVxuICAgICAgICAgICAgICAgIC8vIHRoYXQgdGhpcyBkb2VzIG5vdCByZW1vdmUgdGhlIHRhcmdldCAoZmllbGQsIGFyZ3VtZW50LCBldGMpIG9mIHRoZVxuICAgICAgICAgICAgICAgIC8vIGRpcmVjdGl2ZSwgYnV0IG9ubHkgdGhlIGRpcmVjdGl2ZSBpdHNlbGYuXG4gICAgICAgICAgICAgICAgaWYgKGRpcmVjdGl2ZU1hdGNoZXIobm9kZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlyc3RWaXNpdE1hZGVDaGFuZ2VzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9KTtcbiAgICBpZiAoIWZpcnN0VmlzaXRNYWRlQ2hhbmdlcykge1xuICAgICAgICAvLyBJZiBvdXIgZmlyc3QgcGFzcyBkaWQgbm90IGNoYW5nZSBhbnl0aGluZyBhYm91dCB0aGUgZG9jdW1lbnQsIHRoZW4gdGhlcmVcbiAgICAgICAgLy8gaXMgbm8gY2xlYW51cCB3ZSBuZWVkIHRvIGRvLCBhbmQgd2UgY2FuIHJldHVybiB0aGUgb3JpZ2luYWwgZG9jLlxuICAgICAgICByZXR1cm4gZG9jO1xuICAgIH1cbiAgICAvLyBVdGlsaXR5IGZvciBtYWtpbmcgc3VyZSBpblVzZS50cmFuc2l0aXZlVmFycyBpcyByZWN1cnNpdmVseSBwb3B1bGF0ZWQuXG4gICAgLy8gQmVjYXVzZSB0aGlzIGxvZ2ljIGFzc3VtZXMgaW5Vc2UuZnJhZ21lbnRTcHJlYWRzIGhhcyBiZWVuIGNvbXBsZXRlbHlcbiAgICAvLyBwb3B1bGF0ZWQgYW5kIGluVXNlLnJlbW92ZWQgaGFzIGJlZW4gc2V0IGlmIGFwcHJvcHJpYXRlLFxuICAgIC8vIHBvcHVsYXRlVHJhbnNpdGl2ZVZhcnMgbXVzdCBiZSBjYWxsZWQgYWZ0ZXIgdGhhdCBpbmZvcm1hdGlvbiBoYXMgYmVlblxuICAgIC8vIGNvbGxlY3RlZCBieSB0aGUgZmlyc3QgdHJhdmVyc2FsIG9mIHRoZSBkb2N1bWVudC5cbiAgICB2YXIgcG9wdWxhdGVUcmFuc2l0aXZlVmFycyA9IGZ1bmN0aW9uIChpblVzZSkge1xuICAgICAgICBpZiAoIWluVXNlLnRyYW5zaXRpdmVWYXJzKSB7XG4gICAgICAgICAgICBpblVzZS50cmFuc2l0aXZlVmFycyA9IG5ldyBTZXQoaW5Vc2UudmFyaWFibGVzKTtcbiAgICAgICAgICAgIGlmICghaW5Vc2UucmVtb3ZlZCkge1xuICAgICAgICAgICAgICAgIGluVXNlLmZyYWdtZW50U3ByZWFkcy5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZEZyYWdtZW50TmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBwb3B1bGF0ZVRyYW5zaXRpdmVWYXJzKGdldEluVXNlQnlGcmFnbWVudE5hbWUoY2hpbGRGcmFnbWVudE5hbWUpKS50cmFuc2l0aXZlVmFycy5mb3JFYWNoKGZ1bmN0aW9uICh2YXJOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpblVzZS50cmFuc2l0aXZlVmFycy5hZGQodmFyTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpblVzZTtcbiAgICB9O1xuICAgIC8vIFNpbmNlIHdlJ3ZlIGJlZW4ga2VlcGluZyB0cmFjayBvZiBmcmFnbWVudCBzcHJlYWRzIHVzZWQgYnkgcGFydGljdWxhclxuICAgIC8vIG9wZXJhdGlvbnMgYW5kIGZyYWdtZW50IGRlZmluaXRpb25zLCB3ZSBub3cgbmVlZCB0byBjb21wdXRlIHRoZSBzZXQgb2YgYWxsXG4gICAgLy8gc3ByZWFkcyB1c2VkICh0cmFuc2l0aXZlbHkpIGJ5IGFueSBvcGVyYXRpb25zIGluIHRoZSBkb2N1bWVudC5cbiAgICB2YXIgYWxsRnJhZ21lbnROYW1lc1VzZWQgPSBuZXcgU2V0KCk7XG4gICAgZG9jV2l0aG91dERpcmVjdGl2ZVN1YnRyZWVzLmRlZmluaXRpb25zLmZvckVhY2goZnVuY3Rpb24gKGRlZikge1xuICAgICAgICBpZiAoZGVmLmtpbmQgPT09IEtpbmQuT1BFUkFUSU9OX0RFRklOSVRJT04pIHtcbiAgICAgICAgICAgIHBvcHVsYXRlVHJhbnNpdGl2ZVZhcnMoZ2V0SW5Vc2VCeU9wZXJhdGlvbk5hbWUoZGVmLm5hbWUgJiYgZGVmLm5hbWUudmFsdWUpKS5mcmFnbWVudFNwcmVhZHMuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGRGcmFnbWVudE5hbWUpIHtcbiAgICAgICAgICAgICAgICBhbGxGcmFnbWVudE5hbWVzVXNlZC5hZGQoY2hpbGRGcmFnbWVudE5hbWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZGVmLmtpbmQgPT09IEtpbmQuRlJBR01FTlRfREVGSU5JVElPTiAmJlxuICAgICAgICAgICAgLy8gSWYgdGhlcmUgYXJlIG5vIG9wZXJhdGlvbnMgaW4gdGhlIGRvY3VtZW50LCB0aGVuIGFsbCBmcmFnbWVudFxuICAgICAgICAgICAgLy8gZGVmaW5pdGlvbnMgY291bnQgYXMgdXNhZ2VzIG9mIHRoZWlyIG93biBmcmFnbWVudCBuYW1lcy4gVGhpcyBoZXVyaXN0aWNcbiAgICAgICAgICAgIC8vIHByZXZlbnRzIGFjY2lkZW50YWxseSByZW1vdmluZyBhbGwgZnJhZ21lbnQgZGVmaW5pdGlvbnMgZnJvbSB0aGVcbiAgICAgICAgICAgIC8vIGRvY3VtZW50IGp1c3QgYmVjYXVzZSBpdCBjb250YWlucyBubyBvcGVyYXRpb25zIHRoYXQgdXNlIHRoZSBmcmFnbWVudHMuXG4gICAgICAgICAgICBvcGVyYXRpb25Db3VudCA9PT0gMCAmJlxuICAgICAgICAgICAgIWdldEluVXNlQnlGcmFnbWVudE5hbWUoZGVmLm5hbWUudmFsdWUpLnJlbW92ZWQpIHtcbiAgICAgICAgICAgIGFsbEZyYWdtZW50TmFtZXNVc2VkLmFkZChkZWYubmFtZS52YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICAvLyBOb3cgdGhhdCB3ZSBoYXZlIGFkZGVkIGFsbCBmcmFnbWVudCBzcHJlYWRzIHVzZWQgYnkgb3BlcmF0aW9ucyB0byB0aGVcbiAgICAvLyBhbGxGcmFnbWVudE5hbWVzVXNlZCBzZXQsIHdlIGNhbiBjb21wbGV0ZSB0aGUgc2V0IGJ5IHRyYW5zaXRpdmVseSBhZGRpbmdcbiAgICAvLyBhbGwgZnJhZ21lbnQgc3ByZWFkcyB1c2VkIGJ5IHRob3NlIGZyYWdtZW50cywgYW5kIHNvIG9uLlxuICAgIGFsbEZyYWdtZW50TmFtZXNVc2VkLmZvckVhY2goZnVuY3Rpb24gKGZyYWdtZW50TmFtZSkge1xuICAgICAgICAvLyBPbmNlIGFsbCB0aGUgY2hpbGRGcmFnbWVudE5hbWUgc3RyaW5ncyBhZGRlZCBoZXJlIGhhdmUgYmVlbiBzZWVuIGFscmVhZHksXG4gICAgICAgIC8vIHRoZSB0b3AtbGV2ZWwgYWxsRnJhZ21lbnROYW1lc1VzZWQuZm9yRWFjaCBsb29wIHdpbGwgdGVybWluYXRlLlxuICAgICAgICBwb3B1bGF0ZVRyYW5zaXRpdmVWYXJzKGdldEluVXNlQnlGcmFnbWVudE5hbWUoZnJhZ21lbnROYW1lKSkuZnJhZ21lbnRTcHJlYWRzLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkRnJhZ21lbnROYW1lKSB7XG4gICAgICAgICAgICBhbGxGcmFnbWVudE5hbWVzVXNlZC5hZGQoY2hpbGRGcmFnbWVudE5hbWUpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICB2YXIgZnJhZ21lbnRXaWxsQmVSZW1vdmVkID0gZnVuY3Rpb24gKGZyYWdtZW50TmFtZSkge1xuICAgICAgICByZXR1cm4gISEoXG4gICAgICAgIC8vIEEgZnJhZ21lbnQgZGVmaW5pdGlvbiB3aWxsIGJlIHJlbW92ZWQgaWYgdGhlcmUgYXJlIG5vIHNwcmVhZHMgdGhhdCByZWZlclxuICAgICAgICAvLyB0byBpdCwgb3IgdGhlIGZyYWdtZW50IHdhcyBleHBsaWNpdGx5IHJlbW92ZWQgYmVjYXVzZSBpdCBoYWQgbm8gZmllbGRzXG4gICAgICAgIC8vIG90aGVyIHRoYW4gX190eXBlbmFtZS5cbiAgICAgICAgKCFhbGxGcmFnbWVudE5hbWVzVXNlZC5oYXMoZnJhZ21lbnROYW1lKSB8fFxuICAgICAgICAgICAgZ2V0SW5Vc2VCeUZyYWdtZW50TmFtZShmcmFnbWVudE5hbWUpLnJlbW92ZWQpKTtcbiAgICB9O1xuICAgIHZhciBlbnRlclZpc2l0b3IgPSB7XG4gICAgICAgIGVudGVyOiBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgaWYgKGZyYWdtZW50V2lsbEJlUmVtb3ZlZChub2RlLm5hbWUudmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfTtcbiAgICByZXR1cm4gbnVsbElmRG9jSXNFbXB0eSh2aXNpdChkb2NXaXRob3V0RGlyZWN0aXZlU3VidHJlZXMsIHtcbiAgICAgICAgLy8gSWYgdGhlIGZyYWdtZW50IGlzIGdvaW5nIHRvIGJlIHJlbW92ZWQsIHRoZW4gbGVhdmluZyBhbnkgZGFuZ2xpbmdcbiAgICAgICAgLy8gRnJhZ21lbnRTcHJlYWQgbm9kZXMgd2l0aCB0aGUgc2FtZSBuYW1lIHdvdWxkIGJlIGEgbWlzdGFrZS5cbiAgICAgICAgRnJhZ21lbnRTcHJlYWQ6IGVudGVyVmlzaXRvcixcbiAgICAgICAgLy8gVGhpcyBpcyB3aGVyZSB0aGUgZnJhZ21lbnQgZGVmaW5pdGlvbiBpcyBhY3R1YWxseSByZW1vdmVkLlxuICAgICAgICBGcmFnbWVudERlZmluaXRpb246IGVudGVyVmlzaXRvcixcbiAgICAgICAgT3BlcmF0aW9uRGVmaW5pdGlvbjoge1xuICAgICAgICAgICAgbGVhdmU6IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICAgICAgLy8gVXBvbiBsZWF2aW5nIGVhY2ggb3BlcmF0aW9uIGluIHRoZSBkZXB0aC1maXJzdCBBU1QgdHJhdmVyc2FsLCBwcnVuZVxuICAgICAgICAgICAgICAgIC8vIGFueSB2YXJpYWJsZXMgdGhhdCBhcmUgZGVjbGFyZWQgYnkgdGhlIG9wZXJhdGlvbiBidXQgdW51c2VkIHdpdGhpbi5cbiAgICAgICAgICAgICAgICBpZiAobm9kZS52YXJpYWJsZURlZmluaXRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB1c2VkVmFyaWFibGVOYW1lc18xID0gcG9wdWxhdGVUcmFuc2l0aXZlVmFycyhcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgYW4gb3BlcmF0aW9uIGlzIGFub255bW91cywgd2UgdXNlIHRoZSBlbXB0eSBzdHJpbmcgYXMgaXRzIGtleS5cbiAgICAgICAgICAgICAgICAgICAgZ2V0SW5Vc2VCeU9wZXJhdGlvbk5hbWUobm9kZS5uYW1lICYmIG5vZGUubmFtZS52YWx1ZSkpLnRyYW5zaXRpdmVWYXJzO1xuICAgICAgICAgICAgICAgICAgICAvLyBBY2NvcmRpbmcgdG8gdGhlIEdyYXBoUUwgc3BlYywgYWxsIHZhcmlhYmxlcyBkZWNsYXJlZCBieSBhblxuICAgICAgICAgICAgICAgICAgICAvLyBvcGVyYXRpb24gbXVzdCBlaXRoZXIgYmUgdXNlZCBieSB0aGF0IG9wZXJhdGlvbiBvciB1c2VkIGJ5IHNvbWVcbiAgICAgICAgICAgICAgICAgICAgLy8gZnJhZ21lbnQgaW5jbHVkZWQgdHJhbnNpdGl2ZWx5IGludG8gdGhhdCBvcGVyYXRpb246XG4gICAgICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vc3BlYy5ncmFwaHFsLm9yZy9kcmFmdC8jc2VjLUFsbC1WYXJpYWJsZXMtVXNlZFxuICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAvLyBUbyBzdGF5IG9uIHRoZSByaWdodCBzaWRlIG9mIHRoaXMgdmFsaWRhdGlvbiBydWxlLCBpZi93aGVuIHdlXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlbW92ZSB0aGUgbGFzdCAkdmFyIHJlZmVyZW5jZXMgZnJvbSBhbiBvcGVyYXRpb24gb3IgaXRzIGZyYWdtZW50cyxcbiAgICAgICAgICAgICAgICAgICAgLy8gd2UgbXVzdCBhbHNvIHJlbW92ZSB0aGUgY29ycmVzcG9uZGluZyAkdmFyIGRlY2xhcmF0aW9uIGZyb20gdGhlXG4gICAgICAgICAgICAgICAgICAgIC8vIGVuY2xvc2luZyBvcGVyYXRpb24uIFRoaXMgcHJ1bmluZyBhcHBsaWVzIG9ubHkgdG8gb3BlcmF0aW9ucyBhbmRcbiAgICAgICAgICAgICAgICAgICAgLy8gbm90IGZyYWdtZW50IGRlZmluaXRpb25zLCBhdCB0aGUgbW9tZW50LiBGcmFnbWVudHMgbWF5IGJlIGFibGUgdG9cbiAgICAgICAgICAgICAgICAgICAgLy8gZGVjbGFyZSB2YXJpYWJsZXMgZXZlbnR1YWxseSwgYnV0IHRvZGF5IHRoZXkgY2FuIG9ubHkgY29uc3VtZSB0aGVtLlxuICAgICAgICAgICAgICAgICAgICBpZiAodXNlZFZhcmlhYmxlTmFtZXNfMS5zaXplIDwgbm9kZS52YXJpYWJsZURlZmluaXRpb25zLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHt9LCBub2RlKSwgeyB2YXJpYWJsZURlZmluaXRpb25zOiBub2RlLnZhcmlhYmxlRGVmaW5pdGlvbnMuZmlsdGVyKGZ1bmN0aW9uICh2YXJEZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVzZWRWYXJpYWJsZU5hbWVzXzEuaGFzKHZhckRlZi52YXJpYWJsZS5uYW1lLnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSkpO1xufVxuZXhwb3J0IHZhciBhZGRUeXBlbmFtZVRvRG9jdW1lbnQgPSBPYmplY3QuYXNzaWduKGZ1bmN0aW9uIChkb2MpIHtcbiAgICByZXR1cm4gdmlzaXQoZG9jLCB7XG4gICAgICAgIFNlbGVjdGlvblNldDoge1xuICAgICAgICAgICAgZW50ZXI6IGZ1bmN0aW9uIChub2RlLCBfa2V5LCBwYXJlbnQpIHtcbiAgICAgICAgICAgICAgICAvLyBEb24ndCBhZGQgX190eXBlbmFtZSB0byBPcGVyYXRpb25EZWZpbml0aW9ucy5cbiAgICAgICAgICAgICAgICBpZiAocGFyZW50ICYmXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudC5raW5kID09PVxuICAgICAgICAgICAgICAgICAgICAgICAgS2luZC5PUEVSQVRJT05fREVGSU5JVElPTikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIE5vIGNoYW5nZXMgaWYgbm8gc2VsZWN0aW9ucy5cbiAgICAgICAgICAgICAgICB2YXIgc2VsZWN0aW9ucyA9IG5vZGUuc2VsZWN0aW9ucztcbiAgICAgICAgICAgICAgICBpZiAoIXNlbGVjdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBJZiBzZWxlY3Rpb25zIGFscmVhZHkgaGF2ZSBhIF9fdHlwZW5hbWUsIG9yIGFyZSBwYXJ0IG9mIGFuXG4gICAgICAgICAgICAgICAgLy8gaW50cm9zcGVjdGlvbiBxdWVyeSwgZG8gbm90aGluZy5cbiAgICAgICAgICAgICAgICB2YXIgc2tpcCA9IHNlbGVjdGlvbnMuc29tZShmdW5jdGlvbiAoc2VsZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoaXNGaWVsZChzZWxlY3Rpb24pICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAoc2VsZWN0aW9uLm5hbWUudmFsdWUgPT09IFwiX190eXBlbmFtZVwiIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uLm5hbWUudmFsdWUubGFzdEluZGV4T2YoXCJfX1wiLCAwKSA9PT0gMCkpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmIChza2lwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhpcyBTZWxlY3Rpb25TZXQgaXMgQGV4cG9ydC1lZCBhcyBhbiBpbnB1dCB2YXJpYWJsZSwgaXQgc2hvdWxkXG4gICAgICAgICAgICAgICAgLy8gbm90IGhhdmUgYSBfX3R5cGVuYW1lIGZpZWxkIChzZWUgaXNzdWUgIzQ2OTEpLlxuICAgICAgICAgICAgICAgIHZhciBmaWVsZCA9IHBhcmVudDtcbiAgICAgICAgICAgICAgICBpZiAoaXNGaWVsZChmaWVsZCkgJiZcbiAgICAgICAgICAgICAgICAgICAgZmllbGQuZGlyZWN0aXZlcyAmJlxuICAgICAgICAgICAgICAgICAgICBmaWVsZC5kaXJlY3RpdmVzLnNvbWUoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQubmFtZS52YWx1ZSA9PT0gXCJleHBvcnRcIjsgfSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBDcmVhdGUgYW5kIHJldHVybiBhIG5ldyBTZWxlY3Rpb25TZXQgd2l0aCBhIF9fdHlwZW5hbWUgRmllbGQuXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHt9LCBub2RlKSwgeyBzZWxlY3Rpb25zOiBfX3NwcmVhZEFycmF5KF9fc3ByZWFkQXJyYXkoW10sIHNlbGVjdGlvbnMsIHRydWUpLCBbVFlQRU5BTUVfRklFTERdLCBmYWxzZSkgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0pO1xufSwge1xuICAgIGFkZGVkOiBmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgICAgcmV0dXJuIGZpZWxkID09PSBUWVBFTkFNRV9GSUVMRDtcbiAgICB9LFxufSk7XG52YXIgY29ubmVjdGlvblJlbW92ZUNvbmZpZyA9IHtcbiAgICB0ZXN0OiBmdW5jdGlvbiAoZGlyZWN0aXZlKSB7XG4gICAgICAgIHZhciB3aWxsUmVtb3ZlID0gZGlyZWN0aXZlLm5hbWUudmFsdWUgPT09IFwiY29ubmVjdGlvblwiO1xuICAgICAgICBpZiAod2lsbFJlbW92ZSkge1xuICAgICAgICAgICAgaWYgKCFkaXJlY3RpdmUuYXJndW1lbnRzIHx8XG4gICAgICAgICAgICAgICAgIWRpcmVjdGl2ZS5hcmd1bWVudHMuc29tZShmdW5jdGlvbiAoYXJnKSB7IHJldHVybiBhcmcubmFtZS52YWx1ZSA9PT0gXCJrZXlcIjsgfSkpIHtcbiAgICAgICAgICAgICAgICBnbG9iYWxUaGlzLl9fREVWX18gIT09IGZhbHNlICYmIGludmFyaWFudC53YXJuKDEyNik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdpbGxSZW1vdmU7XG4gICAgfSxcbn07XG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlQ29ubmVjdGlvbkRpcmVjdGl2ZUZyb21Eb2N1bWVudChkb2MpIHtcbiAgICByZXR1cm4gcmVtb3ZlRGlyZWN0aXZlc0Zyb21Eb2N1bWVudChbY29ubmVjdGlvblJlbW92ZUNvbmZpZ10sIGNoZWNrRG9jdW1lbnQoZG9jKSk7XG59XG5mdW5jdGlvbiBoYXNEaXJlY3RpdmVzSW5TZWxlY3Rpb25TZXQoZGlyZWN0aXZlcywgc2VsZWN0aW9uU2V0LCBuZXN0ZWRDaGVjaykge1xuICAgIGlmIChuZXN0ZWRDaGVjayA9PT0gdm9pZCAwKSB7IG5lc3RlZENoZWNrID0gdHJ1ZTsgfVxuICAgIHJldHVybiAoISFzZWxlY3Rpb25TZXQgJiZcbiAgICAgICAgc2VsZWN0aW9uU2V0LnNlbGVjdGlvbnMgJiZcbiAgICAgICAgc2VsZWN0aW9uU2V0LnNlbGVjdGlvbnMuc29tZShmdW5jdGlvbiAoc2VsZWN0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gaGFzRGlyZWN0aXZlc0luU2VsZWN0aW9uKGRpcmVjdGl2ZXMsIHNlbGVjdGlvbiwgbmVzdGVkQ2hlY2spO1xuICAgICAgICB9KSk7XG59XG5mdW5jdGlvbiBoYXNEaXJlY3RpdmVzSW5TZWxlY3Rpb24oZGlyZWN0aXZlcywgc2VsZWN0aW9uLCBuZXN0ZWRDaGVjaykge1xuICAgIGlmIChuZXN0ZWRDaGVjayA9PT0gdm9pZCAwKSB7IG5lc3RlZENoZWNrID0gdHJ1ZTsgfVxuICAgIGlmICghaXNGaWVsZChzZWxlY3Rpb24pKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoIXNlbGVjdGlvbi5kaXJlY3RpdmVzKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIChzZWxlY3Rpb24uZGlyZWN0aXZlcy5zb21lKGdldERpcmVjdGl2ZU1hdGNoZXIoZGlyZWN0aXZlcykpIHx8XG4gICAgICAgIChuZXN0ZWRDaGVjayAmJlxuICAgICAgICAgICAgaGFzRGlyZWN0aXZlc0luU2VsZWN0aW9uU2V0KGRpcmVjdGl2ZXMsIHNlbGVjdGlvbi5zZWxlY3Rpb25TZXQsIG5lc3RlZENoZWNrKSkpO1xufVxuZnVuY3Rpb24gZ2V0QXJndW1lbnRNYXRjaGVyKGNvbmZpZykge1xuICAgIHJldHVybiBmdW5jdGlvbiBhcmd1bWVudE1hdGNoZXIoYXJndW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIGNvbmZpZy5zb21lKGZ1bmN0aW9uIChhQ29uZmlnKSB7XG4gICAgICAgICAgICByZXR1cm4gYXJndW1lbnQudmFsdWUgJiZcbiAgICAgICAgICAgICAgICBhcmd1bWVudC52YWx1ZS5raW5kID09PSBLaW5kLlZBUklBQkxFICYmXG4gICAgICAgICAgICAgICAgYXJndW1lbnQudmFsdWUubmFtZSAmJlxuICAgICAgICAgICAgICAgIChhQ29uZmlnLm5hbWUgPT09IGFyZ3VtZW50LnZhbHVlLm5hbWUudmFsdWUgfHxcbiAgICAgICAgICAgICAgICAgICAgKGFDb25maWcudGVzdCAmJiBhQ29uZmlnLnRlc3QoYXJndW1lbnQpKSk7XG4gICAgICAgIH0pO1xuICAgIH07XG59XG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlQXJndW1lbnRzRnJvbURvY3VtZW50KGNvbmZpZywgZG9jKSB7XG4gICAgdmFyIGFyZ01hdGNoZXIgPSBnZXRBcmd1bWVudE1hdGNoZXIoY29uZmlnKTtcbiAgICByZXR1cm4gbnVsbElmRG9jSXNFbXB0eSh2aXNpdChkb2MsIHtcbiAgICAgICAgT3BlcmF0aW9uRGVmaW5pdGlvbjoge1xuICAgICAgICAgICAgZW50ZXI6IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHt9LCBub2RlKSwgeyBcbiAgICAgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIG1hdGNoaW5nIHRvcCBsZXZlbCB2YXJpYWJsZXMgZGVmaW5pdGlvbnMuXG4gICAgICAgICAgICAgICAgICAgIHZhcmlhYmxlRGVmaW5pdGlvbnM6IG5vZGUudmFyaWFibGVEZWZpbml0aW9ucyA/XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlLnZhcmlhYmxlRGVmaW5pdGlvbnMuZmlsdGVyKGZ1bmN0aW9uICh2YXJEZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gIWNvbmZpZy5zb21lKGZ1bmN0aW9uIChhcmcpIHsgcmV0dXJuIGFyZy5uYW1lID09PSB2YXJEZWYudmFyaWFibGUubmFtZS52YWx1ZTsgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBbXSB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIEZpZWxkOiB7XG4gICAgICAgICAgICBlbnRlcjogZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiBgcmVtb3ZlYCBpcyBzZXQgdG8gdHJ1ZSBmb3IgYW4gYXJndW1lbnQsIGFuZCBhbiBhcmd1bWVudCBtYXRjaFxuICAgICAgICAgICAgICAgIC8vIGlzIGZvdW5kIGZvciBhIGZpZWxkLCByZW1vdmUgdGhlIGZpZWxkIGFzIHdlbGwuXG4gICAgICAgICAgICAgICAgdmFyIHNob3VsZFJlbW92ZUZpZWxkID0gY29uZmlnLnNvbWUoZnVuY3Rpb24gKGFyZ0NvbmZpZykgeyByZXR1cm4gYXJnQ29uZmlnLnJlbW92ZTsgfSk7XG4gICAgICAgICAgICAgICAgaWYgKHNob3VsZFJlbW92ZUZpZWxkKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhcmdNYXRjaENvdW50XzEgPSAwO1xuICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS5hcmd1bWVudHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuYXJndW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKGFyZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhcmdNYXRjaGVyKGFyZykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJnTWF0Y2hDb3VudF8xICs9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGFyZ01hdGNoQ291bnRfMSA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBBcmd1bWVudDoge1xuICAgICAgICAgICAgZW50ZXI6IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIGFsbCBtYXRjaGluZyBhcmd1bWVudHMuXG4gICAgICAgICAgICAgICAgaWYgKGFyZ01hdGNoZXIobm9kZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9KSk7XG59XG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlRnJhZ21lbnRTcHJlYWRGcm9tRG9jdW1lbnQoY29uZmlnLCBkb2MpIHtcbiAgICBmdW5jdGlvbiBlbnRlcihub2RlKSB7XG4gICAgICAgIGlmIChjb25maWcuc29tZShmdW5jdGlvbiAoZGVmKSB7IHJldHVybiBkZWYubmFtZSA9PT0gbm9kZS5uYW1lLnZhbHVlOyB9KSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGxJZkRvY0lzRW1wdHkodmlzaXQoZG9jLCB7XG4gICAgICAgIEZyYWdtZW50U3ByZWFkOiB7IGVudGVyOiBlbnRlciB9LFxuICAgICAgICBGcmFnbWVudERlZmluaXRpb246IHsgZW50ZXI6IGVudGVyIH0sXG4gICAgfSkpO1xufVxuLy8gSWYgdGhlIGluY29taW5nIGRvY3VtZW50IGlzIGEgcXVlcnksIHJldHVybiBpdCBhcyBpcy4gT3RoZXJ3aXNlLCBidWlsZCBhXG4vLyBuZXcgZG9jdW1lbnQgY29udGFpbmluZyBhIHF1ZXJ5IG9wZXJhdGlvbiBiYXNlZCBvbiB0aGUgc2VsZWN0aW9uIHNldFxuLy8gb2YgdGhlIHByZXZpb3VzIG1haW4gb3BlcmF0aW9uLlxuZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkUXVlcnlGcm9tU2VsZWN0aW9uU2V0KGRvY3VtZW50KSB7XG4gICAgdmFyIGRlZmluaXRpb24gPSBnZXRNYWluRGVmaW5pdGlvbihkb2N1bWVudCk7XG4gICAgdmFyIGRlZmluaXRpb25PcGVyYXRpb24gPSBkZWZpbml0aW9uLm9wZXJhdGlvbjtcbiAgICBpZiAoZGVmaW5pdGlvbk9wZXJhdGlvbiA9PT0gXCJxdWVyeVwiKSB7XG4gICAgICAgIC8vIEFscmVhZHkgYSBxdWVyeSwgc28gcmV0dXJuIHRoZSBleGlzdGluZyBkb2N1bWVudC5cbiAgICAgICAgcmV0dXJuIGRvY3VtZW50O1xuICAgIH1cbiAgICAvLyBCdWlsZCBhIG5ldyBxdWVyeSB1c2luZyB0aGUgc2VsZWN0aW9uIHNldCBvZiB0aGUgbWFpbiBvcGVyYXRpb24uXG4gICAgdmFyIG1vZGlmaWVkRG9jID0gdmlzaXQoZG9jdW1lbnQsIHtcbiAgICAgICAgT3BlcmF0aW9uRGVmaW5pdGlvbjoge1xuICAgICAgICAgICAgZW50ZXI6IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHt9LCBub2RlKSwgeyBvcGVyYXRpb246IFwicXVlcnlcIiB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSk7XG4gICAgcmV0dXJuIG1vZGlmaWVkRG9jO1xufVxuLy8gUmVtb3ZlIGZpZWxkcyAvIHNlbGVjdGlvbiBzZXRzIHRoYXQgaW5jbHVkZSBhbiBAY2xpZW50IGRpcmVjdGl2ZS5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVDbGllbnRTZXRzRnJvbURvY3VtZW50KGRvY3VtZW50KSB7XG4gICAgY2hlY2tEb2N1bWVudChkb2N1bWVudCk7XG4gICAgdmFyIG1vZGlmaWVkRG9jID0gcmVtb3ZlRGlyZWN0aXZlc0Zyb21Eb2N1bWVudChbXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRlc3Q6IGZ1bmN0aW9uIChkaXJlY3RpdmUpIHsgcmV0dXJuIGRpcmVjdGl2ZS5uYW1lLnZhbHVlID09PSBcImNsaWVudFwiOyB9LFxuICAgICAgICAgICAgcmVtb3ZlOiB0cnVlLFxuICAgICAgICB9LFxuICAgIF0sIGRvY3VtZW50KTtcbiAgICByZXR1cm4gbW9kaWZpZWREb2M7XG59XG5leHBvcnQgZnVuY3Rpb24gYWRkTm9uUmVhY3RpdmVUb05hbWVkRnJhZ21lbnRzKGRvY3VtZW50KSB7XG4gICAgY2hlY2tEb2N1bWVudChkb2N1bWVudCk7XG4gICAgcmV0dXJuIHZpc2l0KGRvY3VtZW50LCB7XG4gICAgICAgIEZyYWdtZW50U3ByZWFkOiBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgLy8gRG8gbm90IGFkZCBgQG5vbnJlYWN0aXZlYCBpZiB0aGUgZnJhZ21lbnQgaXMgbWFya2VkIHdpdGggYEB1bm1hc2tgXG4gICAgICAgICAgICAvLyBzaW5jZSB3ZSB3YW50IHRvIHJlYWN0IHRvIGNoYW5nZXMgaW4gdGhpcyBmcmFnbWVudC5cbiAgICAgICAgICAgIGlmICgoX2EgPSBub2RlLmRpcmVjdGl2ZXMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zb21lKGZ1bmN0aW9uIChkaXJlY3RpdmUpIHsgcmV0dXJuIGRpcmVjdGl2ZS5uYW1lLnZhbHVlID09PSBcInVubWFza1wiOyB9KSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgbm9kZSksIHsgZGlyZWN0aXZlczogX19zcHJlYWRBcnJheShfX3NwcmVhZEFycmF5KFtdLCAobm9kZS5kaXJlY3RpdmVzIHx8IFtdKSwgdHJ1ZSksIFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAga2luZDogS2luZC5ESVJFQ1RJVkUsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiB7IGtpbmQ6IEtpbmQuTkFNRSwgdmFsdWU6IFwibm9ucmVhY3RpdmVcIiB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF0sIGZhbHNlKSB9KTtcbiAgICAgICAgfSxcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRyYW5zZm9ybS5qcy5tYXAiXSwibmFtZXMiOlsiX19hc3NpZ24iLCJfX3NwcmVhZEFycmF5IiwiaW52YXJpYW50IiwidmlzaXQiLCJLaW5kIiwiY2hlY2tEb2N1bWVudCIsImdldE9wZXJhdGlvbkRlZmluaXRpb24iLCJnZXRGcmFnbWVudERlZmluaXRpb24iLCJnZXRGcmFnbWVudERlZmluaXRpb25zIiwiZ2V0TWFpbkRlZmluaXRpb24iLCJpc0ZpZWxkIiwiY3JlYXRlRnJhZ21lbnRNYXAiLCJpc0FycmF5IiwiaXNOb25FbXB0eUFycmF5IiwiVFlQRU5BTUVfRklFTEQiLCJraW5kIiwiRklFTEQiLCJuYW1lIiwiTkFNRSIsInZhbHVlIiwiaXNFbXB0eSIsIm9wIiwiZnJhZ21lbnRNYXAiLCJzZWxlY3Rpb25TZXQiLCJzZWxlY3Rpb25zIiwiZXZlcnkiLCJzZWxlY3Rpb24iLCJGUkFHTUVOVF9TUFJFQUQiLCJudWxsSWZEb2NJc0VtcHR5IiwiZG9jIiwiZ2V0RGlyZWN0aXZlTWF0Y2hlciIsImNvbmZpZ3MiLCJuYW1lcyIsIk1hcCIsInRlc3RzIiwiZm9yRWFjaCIsImRpcmVjdGl2ZSIsInNldCIsInRlc3QiLCJjb25maWciLCJnZXQiLCJzaXplIiwidGVzdENvbmZpZyIsIm1ha2VJblVzZUdldHRlckZ1bmN0aW9uIiwiZGVmYXVsdEtleSIsIm1hcCIsImluVXNlR2V0dGVyRnVuY3Rpb24iLCJrZXkiLCJpblVzZSIsInZhcmlhYmxlcyIsIlNldCIsImZyYWdtZW50U3ByZWFkcyIsInJlbW92ZURpcmVjdGl2ZXNGcm9tRG9jdW1lbnQiLCJkaXJlY3RpdmVzIiwiZ2V0SW5Vc2VCeU9wZXJhdGlvbk5hbWUiLCJnZXRJblVzZUJ5RnJhZ21lbnROYW1lIiwiZ2V0SW5Vc2UiLCJhbmNlc3RvcnMiLCJwIiwiYW5jZXN0b3IiLCJsZW5ndGgiLCJPUEVSQVRJT05fREVGSU5JVElPTiIsIkZSQUdNRU5UX0RFRklOSVRJT04iLCJnbG9iYWxUaGlzIiwiX19ERVZfXyIsImVycm9yIiwib3BlcmF0aW9uQ291bnQiLCJpIiwiZGVmaW5pdGlvbnMiLCJkaXJlY3RpdmVNYXRjaGVyIiwic2hvdWxkUmVtb3ZlRmllbGQiLCJub2RlRGlyZWN0aXZlcyIsInNvbWUiLCJyZW1vdmUiLCJvcmlnaW5hbEZyYWdtZW50RGVmc0J5UGF0aCIsImZpcnN0VmlzaXRNYWRlQ2hhbmdlcyIsImZpZWxkT3JJbmxpbmVGcmFnbWVudFZpc2l0b3IiLCJlbnRlciIsIm5vZGUiLCJkb2NXaXRob3V0RGlyZWN0aXZlU3VidHJlZXMiLCJGaWVsZCIsIklubGluZUZyYWdtZW50IiwiVmFyaWFibGVEZWZpbml0aW9uIiwiVmFyaWFibGUiLCJfa2V5IiwiX3BhcmVudCIsIl9wYXRoIiwiYWRkIiwiRnJhZ21lbnRTcHJlYWQiLCJGcmFnbWVudERlZmluaXRpb24iLCJwYXRoIiwiSlNPTiIsInN0cmluZ2lmeSIsImxlYXZlIiwib3JpZ2luYWxOb2RlIiwicmVtb3ZlZCIsIkRpcmVjdGl2ZSIsInBvcHVsYXRlVHJhbnNpdGl2ZVZhcnMiLCJ0cmFuc2l0aXZlVmFycyIsImNoaWxkRnJhZ21lbnROYW1lIiwidmFyTmFtZSIsImFsbEZyYWdtZW50TmFtZXNVc2VkIiwiZGVmIiwiZnJhZ21lbnROYW1lIiwiZnJhZ21lbnRXaWxsQmVSZW1vdmVkIiwiaGFzIiwiZW50ZXJWaXNpdG9yIiwiT3BlcmF0aW9uRGVmaW5pdGlvbiIsInZhcmlhYmxlRGVmaW5pdGlvbnMiLCJ1c2VkVmFyaWFibGVOYW1lc18xIiwiZmlsdGVyIiwidmFyRGVmIiwidmFyaWFibGUiLCJhZGRUeXBlbmFtZVRvRG9jdW1lbnQiLCJPYmplY3QiLCJhc3NpZ24iLCJTZWxlY3Rpb25TZXQiLCJwYXJlbnQiLCJza2lwIiwibGFzdEluZGV4T2YiLCJmaWVsZCIsImQiLCJhZGRlZCIsImNvbm5lY3Rpb25SZW1vdmVDb25maWciLCJ3aWxsUmVtb3ZlIiwiYXJndW1lbnRzIiwiYXJnIiwid2FybiIsInJlbW92ZUNvbm5lY3Rpb25EaXJlY3RpdmVGcm9tRG9jdW1lbnQiLCJoYXNEaXJlY3RpdmVzSW5TZWxlY3Rpb25TZXQiLCJuZXN0ZWRDaGVjayIsImhhc0RpcmVjdGl2ZXNJblNlbGVjdGlvbiIsImdldEFyZ3VtZW50TWF0Y2hlciIsImFyZ3VtZW50TWF0Y2hlciIsImFyZ3VtZW50IiwiYUNvbmZpZyIsIlZBUklBQkxFIiwicmVtb3ZlQXJndW1lbnRzRnJvbURvY3VtZW50IiwiYXJnTWF0Y2hlciIsImFyZ0NvbmZpZyIsImFyZ01hdGNoQ291bnRfMSIsIkFyZ3VtZW50IiwicmVtb3ZlRnJhZ21lbnRTcHJlYWRGcm9tRG9jdW1lbnQiLCJidWlsZFF1ZXJ5RnJvbVNlbGVjdGlvblNldCIsImRvY3VtZW50IiwiZGVmaW5pdGlvbiIsImRlZmluaXRpb25PcGVyYXRpb24iLCJvcGVyYXRpb24iLCJtb2RpZmllZERvYyIsInJlbW92ZUNsaWVudFNldHNGcm9tRG9jdW1lbnQiLCJhZGROb25SZWFjdGl2ZVRvTmFtZWRGcmFnbWVudHMiLCJfYSIsIkRJUkVDVElWRSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/graphql/transform.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/observables/Concast.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/observables/Concast.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Concast: () => (/* binding */ Concast)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _Observable_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Observable.js */ \"(ssr)/./node_modules/zen-observable-ts/module.js\");\n/* harmony import */ var _iteration_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./iteration.js */ \"(ssr)/./node_modules/@apollo/client/utilities/observables/iteration.js\");\n/* harmony import */ var _subclassing_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./subclassing.js */ \"(ssr)/./node_modules/@apollo/client/utilities/observables/subclassing.js\");\n\n\n\n\nfunction isPromiseLike(value) {\n    return value && typeof value.then === \"function\";\n}\n// A Concast<T> observable concatenates the given sources into a single\n// non-overlapping sequence of Ts, automatically unwrapping any promises,\n// and broadcasts the T elements of that sequence to any number of\n// subscribers, all without creating a bunch of intermediary Observable\n// wrapper objects.\n//\n// Even though any number of observers can subscribe to the Concast, each\n// source observable is guaranteed to receive at most one subscribe call,\n// and the results are multicast to all observers.\n//\n// In addition to broadcasting every next/error message to this.observers,\n// the Concast stores the most recent message using this.latest, so any\n// new observers can immediately receive the latest message, even if it\n// was originally delivered in the past. This behavior means we can assume\n// every active observer in this.observers has received the same most\n// recent message.\n//\n// With the exception of this.latest replay, a Concast is a \"hot\"\n// observable in the sense that it does not replay past results from the\n// beginning of time for each new observer.\n//\n// Could we have used some existing RxJS class instead? Concast<T> is\n// similar to a BehaviorSubject<T>, because it is multicast and redelivers\n// the latest next/error message to new subscribers. Unlike Subject<T>,\n// Concast<T> does not expose an Observer<T> interface (this.handlers is\n// intentionally private), since Concast<T> gets its inputs from the\n// concatenated sources. If we ever switch to RxJS, there may be some\n// value in reusing their code, but for now we use zen-observable, which\n// does not contain any Subject implementations.\nvar Concast = /** @class */ function(_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Concast, _super);\n    // Not only can the individual elements of the iterable be promises, but\n    // also the iterable itself can be wrapped in a promise.\n    function Concast(sources) {\n        var _this = _super.call(this, function(observer) {\n            _this.addObserver(observer);\n            return function() {\n                return _this.removeObserver(observer);\n            };\n        }) || this;\n        // Active observers receiving broadcast messages. Thanks to this.latest,\n        // we can assume all observers in this Set have received the same most\n        // recent message, though possibly at different times in the past.\n        _this.observers = new Set();\n        _this.promise = new Promise(function(resolve, reject) {\n            _this.resolve = resolve;\n            _this.reject = reject;\n        });\n        // Bound handler functions that can be reused for every internal\n        // subscription.\n        _this.handlers = {\n            next: function(result) {\n                if (_this.sub !== null) {\n                    _this.latest = [\n                        \"next\",\n                        result\n                    ];\n                    _this.notify(\"next\", result);\n                    (0,_iteration_js__WEBPACK_IMPORTED_MODULE_1__.iterateObserversSafely)(_this.observers, \"next\", result);\n                }\n            },\n            error: function(error) {\n                var sub = _this.sub;\n                if (sub !== null) {\n                    // Delay unsubscribing from the underlying subscription slightly,\n                    // so that immediately subscribing another observer can keep the\n                    // subscription active.\n                    if (sub) setTimeout(function() {\n                        return sub.unsubscribe();\n                    });\n                    _this.sub = null;\n                    _this.latest = [\n                        \"error\",\n                        error\n                    ];\n                    _this.reject(error);\n                    _this.notify(\"error\", error);\n                    (0,_iteration_js__WEBPACK_IMPORTED_MODULE_1__.iterateObserversSafely)(_this.observers, \"error\", error);\n                }\n            },\n            complete: function() {\n                var _a = _this, sub = _a.sub, _b = _a.sources, sources = _b === void 0 ? [] : _b;\n                if (sub !== null) {\n                    // If complete is called before concast.start, this.sources may be\n                    // undefined, so we use a default value of [] for sources. That works\n                    // here because it falls into the if (!value) {...} block, which\n                    // appropriately terminates the Concast, even if this.sources might\n                    // eventually have been initialized to a non-empty array.\n                    var value = sources.shift();\n                    if (!value) {\n                        if (sub) setTimeout(function() {\n                            return sub.unsubscribe();\n                        });\n                        _this.sub = null;\n                        if (_this.latest && _this.latest[0] === \"next\") {\n                            _this.resolve(_this.latest[1]);\n                        } else {\n                            _this.resolve();\n                        }\n                        _this.notify(\"complete\");\n                        // We do not store this.latest = [\"complete\"], because doing so\n                        // discards useful information about the previous next (or\n                        // error) message. Instead, if new observers subscribe after\n                        // this Concast has completed, they will receive the final\n                        // 'next' message (unless there was an error) immediately\n                        // followed by a 'complete' message (see addObserver).\n                        (0,_iteration_js__WEBPACK_IMPORTED_MODULE_1__.iterateObserversSafely)(_this.observers, \"complete\");\n                    } else if (isPromiseLike(value)) {\n                        value.then(function(obs) {\n                            return _this.sub = obs.subscribe(_this.handlers);\n                        }, _this.handlers.error);\n                    } else {\n                        _this.sub = value.subscribe(_this.handlers);\n                    }\n                }\n            }\n        };\n        _this.nextResultListeners = new Set();\n        // A public way to abort observation and broadcast.\n        _this.cancel = function(reason) {\n            _this.reject(reason);\n            _this.sources = [];\n            _this.handlers.error(reason);\n        };\n        // Suppress rejection warnings for this.promise, since it's perfectly\n        // acceptable to pay no attention to this.promise if you're consuming\n        // the results through the normal observable API.\n        _this.promise.catch(function(_) {});\n        // If someone accidentally tries to create a Concast using a subscriber\n        // function, recover by creating an Observable from that subscriber and\n        // using it as the source.\n        if (typeof sources === \"function\") {\n            sources = [\n                new _Observable_js__WEBPACK_IMPORTED_MODULE_2__.Observable(sources)\n            ];\n        }\n        if (isPromiseLike(sources)) {\n            sources.then(function(iterable) {\n                return _this.start(iterable);\n            }, _this.handlers.error);\n        } else {\n            _this.start(sources);\n        }\n        return _this;\n    }\n    Concast.prototype.start = function(sources) {\n        if (this.sub !== void 0) return;\n        // In practice, sources is most often simply an Array of observables.\n        // TODO Consider using sources[Symbol.iterator]() to take advantage\n        // of the laziness of non-Array iterables.\n        this.sources = Array.from(sources);\n        // Calling this.handlers.complete() kicks off consumption of the first\n        // source observable. It's tempting to do this step lazily in\n        // addObserver, but this.promise can be accessed without calling\n        // addObserver, so consumption needs to begin eagerly.\n        this.handlers.complete();\n    };\n    Concast.prototype.deliverLastMessage = function(observer) {\n        if (this.latest) {\n            var nextOrError = this.latest[0];\n            var method = observer[nextOrError];\n            if (method) {\n                method.call(observer, this.latest[1]);\n            }\n            // If the subscription is already closed, and the last message was\n            // a 'next' message, simulate delivery of the final 'complete'\n            // message again.\n            if (this.sub === null && nextOrError === \"next\" && observer.complete) {\n                observer.complete();\n            }\n        }\n    };\n    Concast.prototype.addObserver = function(observer) {\n        if (!this.observers.has(observer)) {\n            // Immediately deliver the most recent message, so we can always\n            // be sure all observers have the latest information.\n            this.deliverLastMessage(observer);\n            this.observers.add(observer);\n        }\n    };\n    Concast.prototype.removeObserver = function(observer) {\n        if (this.observers.delete(observer) && this.observers.size < 1) {\n            // In case there are still any listeners in this.nextResultListeners, and\n            // no error or completion has been broadcast yet, make sure those\n            // observers have a chance to run and then remove themselves from\n            // this.observers.\n            this.handlers.complete();\n        }\n    };\n    Concast.prototype.notify = function(method, arg) {\n        var nextResultListeners = this.nextResultListeners;\n        if (nextResultListeners.size) {\n            // Replacing this.nextResultListeners first ensures it does not grow while\n            // we are iterating over it, potentially leading to infinite loops.\n            this.nextResultListeners = new Set();\n            nextResultListeners.forEach(function(listener) {\n                return listener(method, arg);\n            });\n        }\n    };\n    // We need a way to run callbacks just *before* the next result (or error or\n    // completion) is delivered by this Concast, so we can be sure any code that\n    // runs as a result of delivering that result/error observes the effects of\n    // running the callback(s). It was tempting to reuse the Observer type instead\n    // of introducing NextResultListener, but that messes with the sizing and\n    // maintenance of this.observers, and ends up being more code overall.\n    Concast.prototype.beforeNext = function(callback) {\n        var called = false;\n        this.nextResultListeners.add(function(method, arg) {\n            if (!called) {\n                called = true;\n                callback(method, arg);\n            }\n        });\n    };\n    return Concast;\n}(_Observable_js__WEBPACK_IMPORTED_MODULE_2__.Observable);\n\n// Necessary because the Concast constructor has a different signature\n// than the Observable constructor.\n(0,_subclassing_js__WEBPACK_IMPORTED_MODULE_3__.fixObservableSubclass)(Concast); //# sourceMappingURL=Concast.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/observables/Concast.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/observables/asyncMap.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/observables/asyncMap.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   asyncMap: () => (/* binding */ asyncMap)\n/* harmony export */ });\n/* harmony import */ var _Observable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Observable.js */ \"(ssr)/./node_modules/zen-observable-ts/module.js\");\n\n// Like Observable.prototype.map, except that the mapping function can\n// optionally return a Promise (or be async).\n/**\n * @deprecated `asyncMap` will be removed in Apollo Client 4.0. This function is\n * safe to use in Apollo Client 3.x.\n *\n * **Recommended now**\n *\n * No action needed\n *\n * **When migrating**\n *\n * Prefer to use RxJS's built in helpers. Convert promises into observables\n * using the [`from`](https://rxjs.dev/api/index/function/from) function.\n */ function asyncMap(observable, mapFn, catchFn) {\n    return new _Observable_js__WEBPACK_IMPORTED_MODULE_0__.Observable(function(observer) {\n        var promiseQueue = {\n            // Normally we would initialize promiseQueue to Promise.resolve(), but\n            // in this case, for backwards compatibility, we need to be careful to\n            // invoke the first callback synchronously.\n            then: function(callback) {\n                return new Promise(function(resolve) {\n                    return resolve(callback());\n                });\n            }\n        };\n        function makeCallback(examiner, key) {\n            return function(arg) {\n                if (examiner) {\n                    var both = function() {\n                        // If the observer is closed, we don't want to continue calling the\n                        // mapping function - it's result will be swallowed anyways.\n                        return observer.closed ? /* will be swallowed */ 0 : examiner(arg);\n                    };\n                    promiseQueue = promiseQueue.then(both, both).then(function(result) {\n                        return observer.next(result);\n                    }, function(error) {\n                        return observer.error(error);\n                    });\n                } else {\n                    observer[key](arg);\n                }\n            };\n        }\n        var handler = {\n            next: makeCallback(mapFn, \"next\"),\n            error: makeCallback(catchFn, \"error\"),\n            complete: function() {\n                // no need to reassign `promiseQueue`, after `observer.complete`,\n                // the observer will be closed and short-circuit everything anyways\n                /*promiseQueue = */ promiseQueue.then(function() {\n                    return observer.complete();\n                });\n            }\n        };\n        var sub = observable.subscribe(handler);\n        return function() {\n            return sub.unsubscribe();\n        };\n    });\n} //# sourceMappingURL=asyncMap.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL29ic2VydmFibGVzL2FzeW5jTWFwLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTZDO0FBQzdDLHNFQUFzRTtBQUN0RSw2Q0FBNkM7QUFDN0M7Ozs7Ozs7Ozs7OztDQVlDLEdBQ00sU0FBU0MsU0FBU0MsVUFBVSxFQUFFQyxLQUFLLEVBQUVDLE9BQU87SUFDL0MsT0FBTyxJQUFJSixzREFBVUEsQ0FBQyxTQUFVSyxRQUFRO1FBQ3BDLElBQUlDLGVBQWU7WUFDZixzRUFBc0U7WUFDdEUsc0VBQXNFO1lBQ3RFLDJDQUEyQztZQUMzQ0MsTUFBTSxTQUFVQyxRQUFRO2dCQUNwQixPQUFPLElBQUlDLFFBQVEsU0FBVUMsT0FBTztvQkFBSSxPQUFPQSxRQUFRRjtnQkFBYTtZQUN4RTtRQUNKO1FBQ0EsU0FBU0csYUFBYUMsUUFBUSxFQUFFQyxHQUFHO1lBQy9CLE9BQU8sU0FBVUMsR0FBRztnQkFDaEIsSUFBSUYsVUFBVTtvQkFDVixJQUFJRyxPQUFPO3dCQUNQLG1FQUFtRTt3QkFDbkUsNERBQTREO3dCQUM1RCxPQUFPVixTQUFTVyxNQUFNLEdBQ2xCLHFCQUFxQixHQUFHLElBQ3RCSixTQUFTRTtvQkFDbkI7b0JBQ0FSLGVBQWVBLGFBQWFDLElBQUksQ0FBQ1EsTUFBTUEsTUFBTVIsSUFBSSxDQUFDLFNBQVVVLE1BQU07d0JBQUksT0FBT1osU0FBU2EsSUFBSSxDQUFDRDtvQkFBUyxHQUFHLFNBQVVFLEtBQUs7d0JBQUksT0FBT2QsU0FBU2MsS0FBSyxDQUFDQTtvQkFBUTtnQkFDNUosT0FDSztvQkFDRGQsUUFBUSxDQUFDUSxJQUFJLENBQUNDO2dCQUNsQjtZQUNKO1FBQ0o7UUFDQSxJQUFJTSxVQUFVO1lBQ1ZGLE1BQU1QLGFBQWFSLE9BQU87WUFDMUJnQixPQUFPUixhQUFhUCxTQUFTO1lBQzdCaUIsVUFBVTtnQkFDTixpRUFBaUU7Z0JBQ2pFLG1FQUFtRTtnQkFDbkUsaUJBQWlCLEdBQUdmLGFBQWFDLElBQUksQ0FBQztvQkFBYyxPQUFPRixTQUFTZ0IsUUFBUTtnQkFBSTtZQUNwRjtRQUNKO1FBQ0EsSUFBSUMsTUFBTXBCLFdBQVdxQixTQUFTLENBQUNIO1FBQy9CLE9BQU87WUFBYyxPQUFPRSxJQUFJRSxXQUFXO1FBQUk7SUFDbkQ7QUFDSixFQUNBLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL3NsYWNrLWdyYXBocWwtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL29ic2VydmFibGVzL2FzeW5jTWFwLmpzP2FmMjkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCIuL09ic2VydmFibGUuanNcIjtcbi8vIExpa2UgT2JzZXJ2YWJsZS5wcm90b3R5cGUubWFwLCBleGNlcHQgdGhhdCB0aGUgbWFwcGluZyBmdW5jdGlvbiBjYW5cbi8vIG9wdGlvbmFsbHkgcmV0dXJuIGEgUHJvbWlzZSAob3IgYmUgYXN5bmMpLlxuLyoqXG4gKiBAZGVwcmVjYXRlZCBgYXN5bmNNYXBgIHdpbGwgYmUgcmVtb3ZlZCBpbiBBcG9sbG8gQ2xpZW50IDQuMC4gVGhpcyBmdW5jdGlvbiBpc1xuICogc2FmZSB0byB1c2UgaW4gQXBvbGxvIENsaWVudCAzLnguXG4gKlxuICogKipSZWNvbW1lbmRlZCBub3cqKlxuICpcbiAqIE5vIGFjdGlvbiBuZWVkZWRcbiAqXG4gKiAqKldoZW4gbWlncmF0aW5nKipcbiAqXG4gKiBQcmVmZXIgdG8gdXNlIFJ4SlMncyBidWlsdCBpbiBoZWxwZXJzLiBDb252ZXJ0IHByb21pc2VzIGludG8gb2JzZXJ2YWJsZXNcbiAqIHVzaW5nIHRoZSBbYGZyb21gXShodHRwczovL3J4anMuZGV2L2FwaS9pbmRleC9mdW5jdGlvbi9mcm9tKSBmdW5jdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFzeW5jTWFwKG9ic2VydmFibGUsIG1hcEZuLCBjYXRjaEZuKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgICB2YXIgcHJvbWlzZVF1ZXVlID0ge1xuICAgICAgICAgICAgLy8gTm9ybWFsbHkgd2Ugd291bGQgaW5pdGlhbGl6ZSBwcm9taXNlUXVldWUgdG8gUHJvbWlzZS5yZXNvbHZlKCksIGJ1dFxuICAgICAgICAgICAgLy8gaW4gdGhpcyBjYXNlLCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHksIHdlIG5lZWQgdG8gYmUgY2FyZWZ1bCB0b1xuICAgICAgICAgICAgLy8gaW52b2tlIHRoZSBmaXJzdCBjYWxsYmFjayBzeW5jaHJvbm91c2x5LlxuICAgICAgICAgICAgdGhlbjogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJldHVybiByZXNvbHZlKGNhbGxiYWNrKCkpOyB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICAgIGZ1bmN0aW9uIG1ha2VDYWxsYmFjayhleGFtaW5lciwga2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgICAgICAgICAgICAgIGlmIChleGFtaW5lcikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYm90aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSBvYnNlcnZlciBpcyBjbG9zZWQsIHdlIGRvbid0IHdhbnQgdG8gY29udGludWUgY2FsbGluZyB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1hcHBpbmcgZnVuY3Rpb24gLSBpdCdzIHJlc3VsdCB3aWxsIGJlIHN3YWxsb3dlZCBhbnl3YXlzLlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9ic2VydmVyLmNsb3NlZCA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogd2lsbCBiZSBzd2FsbG93ZWQgKi8gMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogZXhhbWluZXIoYXJnKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgcHJvbWlzZVF1ZXVlID0gcHJvbWlzZVF1ZXVlLnRoZW4oYm90aCwgYm90aCkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7IHJldHVybiBvYnNlcnZlci5uZXh0KHJlc3VsdCk7IH0sIGZ1bmN0aW9uIChlcnJvcikgeyByZXR1cm4gb2JzZXJ2ZXIuZXJyb3IoZXJyb3IpOyB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVyW2tleV0oYXJnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHZhciBoYW5kbGVyID0ge1xuICAgICAgICAgICAgbmV4dDogbWFrZUNhbGxiYWNrKG1hcEZuLCBcIm5leHRcIiksXG4gICAgICAgICAgICBlcnJvcjogbWFrZUNhbGxiYWNrKGNhdGNoRm4sIFwiZXJyb3JcIiksXG4gICAgICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIC8vIG5vIG5lZWQgdG8gcmVhc3NpZ24gYHByb21pc2VRdWV1ZWAsIGFmdGVyIGBvYnNlcnZlci5jb21wbGV0ZWAsXG4gICAgICAgICAgICAgICAgLy8gdGhlIG9ic2VydmVyIHdpbGwgYmUgY2xvc2VkIGFuZCBzaG9ydC1jaXJjdWl0IGV2ZXJ5dGhpbmcgYW55d2F5c1xuICAgICAgICAgICAgICAgIC8qcHJvbWlzZVF1ZXVlID0gKi8gcHJvbWlzZVF1ZXVlLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4gb2JzZXJ2ZXIuY29tcGxldGUoKTsgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgICB2YXIgc3ViID0gb2JzZXJ2YWJsZS5zdWJzY3JpYmUoaGFuZGxlcik7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBzdWIudW5zdWJzY3JpYmUoKTsgfTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFzeW5jTWFwLmpzLm1hcCJdLCJuYW1lcyI6WyJPYnNlcnZhYmxlIiwiYXN5bmNNYXAiLCJvYnNlcnZhYmxlIiwibWFwRm4iLCJjYXRjaEZuIiwib2JzZXJ2ZXIiLCJwcm9taXNlUXVldWUiLCJ0aGVuIiwiY2FsbGJhY2siLCJQcm9taXNlIiwicmVzb2x2ZSIsIm1ha2VDYWxsYmFjayIsImV4YW1pbmVyIiwia2V5IiwiYXJnIiwiYm90aCIsImNsb3NlZCIsInJlc3VsdCIsIm5leHQiLCJlcnJvciIsImhhbmRsZXIiLCJjb21wbGV0ZSIsInN1YiIsInN1YnNjcmliZSIsInVuc3Vic2NyaWJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/observables/asyncMap.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/observables/iteration.js":
/*!************************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/observables/iteration.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   iterateObserversSafely: () => (/* binding */ iterateObserversSafely)\n/* harmony export */ });\n/**\n * @deprecated `iterateObserversSafely` will be removed with Apollo Client 4.0.\n * Please discontinue using this function.\n */ function iterateObserversSafely(observers, method, argument) {\n    // In case observers is modified during iteration, we need to commit to the\n    // original elements, which also provides an opportunity to filter them down\n    // to just the observers with the given method.\n    var observersWithMethod = [];\n    observers.forEach(function(obs) {\n        return obs[method] && observersWithMethod.push(obs);\n    });\n    observersWithMethod.forEach(function(obs) {\n        return obs[method](argument);\n    });\n} //# sourceMappingURL=iteration.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL29ic2VydmFibGVzL2l0ZXJhdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7OztDQUdDLEdBQ00sU0FBU0EsdUJBQXVCQyxTQUFTLEVBQUVDLE1BQU0sRUFBRUMsUUFBUTtJQUM5RCwyRUFBMkU7SUFDM0UsNEVBQTRFO0lBQzVFLCtDQUErQztJQUMvQyxJQUFJQyxzQkFBc0IsRUFBRTtJQUM1QkgsVUFBVUksT0FBTyxDQUFDLFNBQVVDLEdBQUc7UUFBSSxPQUFPQSxHQUFHLENBQUNKLE9BQU8sSUFBSUUsb0JBQW9CRyxJQUFJLENBQUNEO0lBQU07SUFDeEZGLG9CQUFvQkMsT0FBTyxDQUFDLFNBQVVDLEdBQUc7UUFBSSxPQUFPQSxHQUFHLENBQUNKLE9BQU8sQ0FBQ0M7SUFBVztBQUMvRSxFQUNBLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL3NsYWNrLWdyYXBocWwtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL29ic2VydmFibGVzL2l0ZXJhdGlvbi5qcz9iNDc4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGRlcHJlY2F0ZWQgYGl0ZXJhdGVPYnNlcnZlcnNTYWZlbHlgIHdpbGwgYmUgcmVtb3ZlZCB3aXRoIEFwb2xsbyBDbGllbnQgNC4wLlxuICogUGxlYXNlIGRpc2NvbnRpbnVlIHVzaW5nIHRoaXMgZnVuY3Rpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpdGVyYXRlT2JzZXJ2ZXJzU2FmZWx5KG9ic2VydmVycywgbWV0aG9kLCBhcmd1bWVudCkge1xuICAgIC8vIEluIGNhc2Ugb2JzZXJ2ZXJzIGlzIG1vZGlmaWVkIGR1cmluZyBpdGVyYXRpb24sIHdlIG5lZWQgdG8gY29tbWl0IHRvIHRoZVxuICAgIC8vIG9yaWdpbmFsIGVsZW1lbnRzLCB3aGljaCBhbHNvIHByb3ZpZGVzIGFuIG9wcG9ydHVuaXR5IHRvIGZpbHRlciB0aGVtIGRvd25cbiAgICAvLyB0byBqdXN0IHRoZSBvYnNlcnZlcnMgd2l0aCB0aGUgZ2l2ZW4gbWV0aG9kLlxuICAgIHZhciBvYnNlcnZlcnNXaXRoTWV0aG9kID0gW107XG4gICAgb2JzZXJ2ZXJzLmZvckVhY2goZnVuY3Rpb24gKG9icykgeyByZXR1cm4gb2JzW21ldGhvZF0gJiYgb2JzZXJ2ZXJzV2l0aE1ldGhvZC5wdXNoKG9icyk7IH0pO1xuICAgIG9ic2VydmVyc1dpdGhNZXRob2QuZm9yRWFjaChmdW5jdGlvbiAob2JzKSB7IHJldHVybiBvYnNbbWV0aG9kXShhcmd1bWVudCk7IH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXRlcmF0aW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJpdGVyYXRlT2JzZXJ2ZXJzU2FmZWx5Iiwib2JzZXJ2ZXJzIiwibWV0aG9kIiwiYXJndW1lbnQiLCJvYnNlcnZlcnNXaXRoTWV0aG9kIiwiZm9yRWFjaCIsIm9icyIsInB1c2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/observables/iteration.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/observables/subclassing.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/observables/subclassing.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fixObservableSubclass: () => (/* binding */ fixObservableSubclass)\n/* harmony export */ });\n/* harmony import */ var _Observable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Observable.js */ \"(ssr)/./node_modules/zen-observable-ts/module.js\");\n/* harmony import */ var _common_canUse_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/canUse.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n\n\n// Generic implementations of Observable.prototype methods like map and\n// filter need to know how to create a new Observable from an Observable\n// subclass (like Concast or ObservableQuery). Those methods assume\n// (perhaps unwisely?) that they can call the subtype's constructor with a\n// Subscriber function, even though the subclass constructor might expect\n// different parameters. Defining this static Symbol.species property on\n// the subclass is a hint to generic Observable code to use the default\n// constructor instead of trying to do `new Subclass(observer => ...)`.\nfunction fixObservableSubclass(subclass) {\n    function set(key) {\n        // Object.defineProperty is necessary because the Symbol.species\n        // property is a getter by default in modern JS environments, so we\n        // can't assign to it with a normal assignment expression.\n        Object.defineProperty(subclass, key, {\n            value: _Observable_js__WEBPACK_IMPORTED_MODULE_0__.Observable\n        });\n    }\n    if (_common_canUse_js__WEBPACK_IMPORTED_MODULE_1__.canUseSymbol && Symbol.species) {\n        set(Symbol.species);\n    }\n    // The \"@@species\" string is used as a fake Symbol.species value in some\n    // polyfill systems (including the SymbolSpecies variable used by\n    // zen-observable), so we should set it as well, to be safe.\n    set(\"@@species\");\n    return subclass;\n} //# sourceMappingURL=subclassing.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL29ic2VydmFibGVzL3N1YmNsYXNzaW5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE2QztBQUNNO0FBQ25ELHVFQUF1RTtBQUN2RSx3RUFBd0U7QUFDeEUsbUVBQW1FO0FBQ25FLDBFQUEwRTtBQUMxRSx5RUFBeUU7QUFDekUsd0VBQXdFO0FBQ3hFLHVFQUF1RTtBQUN2RSx1RUFBdUU7QUFDaEUsU0FBU0Usc0JBQXNCQyxRQUFRO0lBQzFDLFNBQVNDLElBQUlDLEdBQUc7UUFDWixnRUFBZ0U7UUFDaEUsbUVBQW1FO1FBQ25FLDBEQUEwRDtRQUMxREMsT0FBT0MsY0FBYyxDQUFDSixVQUFVRSxLQUFLO1lBQUVHLE9BQU9SLHNEQUFVQTtRQUFDO0lBQzdEO0lBQ0EsSUFBSUMsMkRBQVlBLElBQUlRLE9BQU9DLE9BQU8sRUFBRTtRQUNoQ04sSUFBSUssT0FBT0MsT0FBTztJQUN0QjtJQUNBLHdFQUF3RTtJQUN4RSxpRUFBaUU7SUFDakUsNERBQTREO0lBQzVETixJQUFJO0lBQ0osT0FBT0Q7QUFDWCxFQUNBLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL3NsYWNrLWdyYXBocWwtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL29ic2VydmFibGVzL3N1YmNsYXNzaW5nLmpzP2ExZjIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCIuL09ic2VydmFibGUuanNcIjtcbmltcG9ydCB7IGNhblVzZVN5bWJvbCB9IGZyb20gXCIuLi9jb21tb24vY2FuVXNlLmpzXCI7XG4vLyBHZW5lcmljIGltcGxlbWVudGF0aW9ucyBvZiBPYnNlcnZhYmxlLnByb3RvdHlwZSBtZXRob2RzIGxpa2UgbWFwIGFuZFxuLy8gZmlsdGVyIG5lZWQgdG8ga25vdyBob3cgdG8gY3JlYXRlIGEgbmV3IE9ic2VydmFibGUgZnJvbSBhbiBPYnNlcnZhYmxlXG4vLyBzdWJjbGFzcyAobGlrZSBDb25jYXN0IG9yIE9ic2VydmFibGVRdWVyeSkuIFRob3NlIG1ldGhvZHMgYXNzdW1lXG4vLyAocGVyaGFwcyB1bndpc2VseT8pIHRoYXQgdGhleSBjYW4gY2FsbCB0aGUgc3VidHlwZSdzIGNvbnN0cnVjdG9yIHdpdGggYVxuLy8gU3Vic2NyaWJlciBmdW5jdGlvbiwgZXZlbiB0aG91Z2ggdGhlIHN1YmNsYXNzIGNvbnN0cnVjdG9yIG1pZ2h0IGV4cGVjdFxuLy8gZGlmZmVyZW50IHBhcmFtZXRlcnMuIERlZmluaW5nIHRoaXMgc3RhdGljIFN5bWJvbC5zcGVjaWVzIHByb3BlcnR5IG9uXG4vLyB0aGUgc3ViY2xhc3MgaXMgYSBoaW50IHRvIGdlbmVyaWMgT2JzZXJ2YWJsZSBjb2RlIHRvIHVzZSB0aGUgZGVmYXVsdFxuLy8gY29uc3RydWN0b3IgaW5zdGVhZCBvZiB0cnlpbmcgdG8gZG8gYG5ldyBTdWJjbGFzcyhvYnNlcnZlciA9PiAuLi4pYC5cbmV4cG9ydCBmdW5jdGlvbiBmaXhPYnNlcnZhYmxlU3ViY2xhc3Moc3ViY2xhc3MpIHtcbiAgICBmdW5jdGlvbiBzZXQoa2V5KSB7XG4gICAgICAgIC8vIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSBpcyBuZWNlc3NhcnkgYmVjYXVzZSB0aGUgU3ltYm9sLnNwZWNpZXNcbiAgICAgICAgLy8gcHJvcGVydHkgaXMgYSBnZXR0ZXIgYnkgZGVmYXVsdCBpbiBtb2Rlcm4gSlMgZW52aXJvbm1lbnRzLCBzbyB3ZVxuICAgICAgICAvLyBjYW4ndCBhc3NpZ24gdG8gaXQgd2l0aCBhIG5vcm1hbCBhc3NpZ25tZW50IGV4cHJlc3Npb24uXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzdWJjbGFzcywga2V5LCB7IHZhbHVlOiBPYnNlcnZhYmxlIH0pO1xuICAgIH1cbiAgICBpZiAoY2FuVXNlU3ltYm9sICYmIFN5bWJvbC5zcGVjaWVzKSB7XG4gICAgICAgIHNldChTeW1ib2wuc3BlY2llcyk7XG4gICAgfVxuICAgIC8vIFRoZSBcIkBAc3BlY2llc1wiIHN0cmluZyBpcyB1c2VkIGFzIGEgZmFrZSBTeW1ib2wuc3BlY2llcyB2YWx1ZSBpbiBzb21lXG4gICAgLy8gcG9seWZpbGwgc3lzdGVtcyAoaW5jbHVkaW5nIHRoZSBTeW1ib2xTcGVjaWVzIHZhcmlhYmxlIHVzZWQgYnlcbiAgICAvLyB6ZW4tb2JzZXJ2YWJsZSksIHNvIHdlIHNob3VsZCBzZXQgaXQgYXMgd2VsbCwgdG8gYmUgc2FmZS5cbiAgICBzZXQoXCJAQHNwZWNpZXNcIik7XG4gICAgcmV0dXJuIHN1YmNsYXNzO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3ViY2xhc3NpbmcuanMubWFwIl0sIm5hbWVzIjpbIk9ic2VydmFibGUiLCJjYW5Vc2VTeW1ib2wiLCJmaXhPYnNlcnZhYmxlU3ViY2xhc3MiLCJzdWJjbGFzcyIsInNldCIsImtleSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJTeW1ib2wiLCJzcGVjaWVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/observables/subclassing.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/promises/preventUnhandledRejection.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/promises/preventUnhandledRejection.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   preventUnhandledRejection: () => (/* binding */ preventUnhandledRejection)\n/* harmony export */ });\nfunction preventUnhandledRejection(promise) {\n    promise.catch(function() {});\n    return promise;\n} //# sourceMappingURL=preventUnhandledRejection.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL3Byb21pc2VzL3ByZXZlbnRVbmhhbmRsZWRSZWplY3Rpb24uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLFNBQVNBLDBCQUEwQkMsT0FBTztJQUM3Q0EsUUFBUUMsS0FBSyxDQUFDLFlBQWM7SUFDNUIsT0FBT0Q7QUFDWCxFQUNBLHFEQUFxRCIsInNvdXJjZXMiOlsid2VicGFjazovL3NsYWNrLWdyYXBocWwtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL3Byb21pc2VzL3ByZXZlbnRVbmhhbmRsZWRSZWplY3Rpb24uanM/NGQyNyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gcHJldmVudFVuaGFuZGxlZFJlamVjdGlvbihwcm9taXNlKSB7XG4gICAgcHJvbWlzZS5jYXRjaChmdW5jdGlvbiAoKSB7IH0pO1xuICAgIHJldHVybiBwcm9taXNlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJldmVudFVuaGFuZGxlZFJlamVjdGlvbi5qcy5tYXAiXSwibmFtZXMiOlsicHJldmVudFVuaGFuZGxlZFJlamVjdGlvbiIsInByb21pc2UiLCJjYXRjaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/promises/preventUnhandledRejection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/version.js":
/*!************************************************!*\
  !*** ./node_modules/@apollo/client/version.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: () => (/* binding */ version)\n/* harmony export */ });\nvar version = \"3.14.0\"; //# sourceMappingURL=version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sSUFBSUEsVUFBVSxTQUFTLENBQzlCLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL3NsYWNrLWdyYXBocWwtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdmVyc2lvbi5qcz82ZmRiIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB2YXIgdmVyc2lvbiA9IFwiMy4xNC4wXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD12ZXJzaW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJ2ZXJzaW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/version.js\n");

/***/ })

};
;